\ ******************************************************************************
\
\ APPLE II ELITE GAME SOURCE
\
\ Apple II Elite was written by Ian Bell and David Braben and is copyright
\ D. Braben and I. Bell 1986
\
\ The code on this site is identical to the source disks released on Ian Bell's
\ personal website at http://www.elitehomepage.org/ (it's just been reformatted
\ to be more readable)
\
\ The commentary is copyright Mark Moxon, and any misunderstandings or mistakes
\ in the documentation are entirely my fault
\
\ The terminology and notations used in this commentary are explained at
\ https://elite.bbcelite.com/terminology
\
\ The deep dive articles referred to in this commentary can be found at
\ https://elite.bbcelite.com/deep_dives
\
\ ------------------------------------------------------------------------------
\
\ This source file produces the following binary files:
\
\   * ELTA.bin
\   * ELTB.bin
\   * ELTC.bin
\   * ELTD.bin
\   * ELTE.bin
\   * ELTF.bin
\   * ELTG.bin
\   * ELTH.bin
\   * ELTI.bin
\   * ELTJ.bin
\   * ELTK.bin
\
\ ******************************************************************************

 INCLUDE "versions/apple/1-source-files/main-sources/elite-build-options.asm"

 _CASSETTE_VERSION      = (_VERSION = 1)
 _DISC_VERSION          = (_VERSION = 2)
 _6502SP_VERSION        = (_VERSION = 3)
 _MASTER_VERSION        = (_VERSION = 4)
 _ELECTRON_VERSION      = (_VERSION = 5)
 _ELITE_A_VERSION       = (_VERSION = 6)
 _NES_VERSION           = (_VERSION = 7)
 _C64_VERSION           = (_VERSION = 8)
 _APPLE_VERSION         = (_VERSION = 9)
 _IB_DISK                   = (_VARIANT = 1)
 _SOURCE_DISK_BUILD         = (_VARIANT = 2)
 _SOURCE_DISK_CODE_FILES    = (_VARIANT = 3)
 _SOURCE_DISK_ELT_FILES     = (_VARIANT = 4)
 _DISC_DOCKED           = FALSE
 _DISC_FLIGHT           = FALSE
 _ELITE_A_DOCKED        = FALSE
 _ELITE_A_FLIGHT        = FALSE
 _ELITE_A_SHIPS_R       = FALSE
 _ELITE_A_SHIPS_S       = FALSE
 _ELITE_A_SHIPS_T       = FALSE
 _ELITE_A_SHIPS_U       = FALSE
 _ELITE_A_SHIPS_V       = FALSE
 _ELITE_A_SHIPS_W       = FALSE
 _ELITE_A_ENCYCLOPEDIA  = FALSE
 _ELITE_A_6502SP_IO     = FALSE
 _ELITE_A_6502SP_PARA   = FALSE

 KEY1 = &15
 KEY2 = &69
 USA% = FALSE
 W% = &A700
 L% = &2000
 Z = 0
 CODE% = &4000
 LOAD% = &4000
 D% = &A300
 SCBASE = &2000
 K% = &800
 LS% = &B5F
 DLOC% = SCBASE
 R% = &BFFF

IF _IB_DISK

 STORE = &0200
 CODE2 = &2000

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 STORE = &D000
 CODE2 = &9000

ENDIF

 NTY = 32
\E% = D%+2*NTY
\KWL% = E%+NTY
\KWH% = E%+2*NTY
 QQ18 = &B60
 SNE = &F20
 FONT = &1D00
 TAP% = LS%-111
 NMIV = &3FC
 BRKV = &3F0
 IRQV = &3FE
 CHRV = &36
 MSL = 1
 SST = 2
 ESC = 3
 PLT = 4
 OIL = 5
 AST = 7
 SPL = 8
 SHU = 9
 CYL = 11
 ANA = 14
 HER = 15
 COPS = 16
 SH3 = 17
 KRA = 19
 ADA = 20
 WRM = 23
 CYL2 = 24
 ASP = 25
 THG = 29
 TGL = 30
 CON = 31
 DOD = 32
 REMCOU = 32
 NOST = 12
 NOSH = 8
\ ****
 JL = ESC
 JH = SHU+2
 PACK = SH3
 NI% = 37
 POW = 15
 B = &30
 Armlas = INT(128.5+1.5*POW)
 Mlas = 50
\NRU% = 26
 NRU% = 0 \ Bug
 VE = &57
 LL = 30
 VIOLET = 4
 GREEN = 8
 WHITE = 12
 BLUE = 16
 RED = 20
 FUZZY = 24
 BLACK = 0
 CYAN = WHITE
 MAG = WHITE
 sfxplas = 0
 sfxelas = 1
 sfxhit = 2
 sfxexpl = 3
 sfxwhosh = 4
 sfxbeep = 5
 sfxboop = 6
 sfxhyp1 = 7
 sfxeng = 8
 sfxecm = 9
 sfxblas = 10
 sfxalas = 11
 sfxmlas = 12
 sfxbomb = 13
 sfxtrib = 14
 sfxelas2 = 15
 ZPSTORE = 0
\XX21 = D%
 X = 128
 Y = 68

 conhieght = 80

 Q% = _MAX_COMMANDER    \ Set Q% to TRUE to max out the default commander, FALSE
                        \ for the standard default commander

 TKN1 = &F40
 RUTOK = TKN1+&B52
 RUPLA = TKN1+&B1E
 RUGAL = TKN1+&B38

 GCYT = 19
 GCYB = GCYT+.75*128

 comsiz  =  110
\ Commander file size (1-252 bytes)
 comfil  =  TAP%-20
\ Commander file (must not exceed 252 bytes)
 comfil2 =  comfil+comsiz-4
 buffer  =  K%
\ 256 byte sector buffer
 buffr2  =  K%+256
\ 342 6 bit 'nibble' buffer
 fretrk  =  buffer+&30
\ last allocated track
 dirtrk  =  buffer+&31
\ direction of track allocation (+1 or -1)
 tracks  =  buffer+&34
\ number of tracks per disc
 bitmap  =  buffer+&38
\ bit map of free sectors in track 0

IF (buffer AND &FF) OR (buffr2 AND &FF)
 ERROR "STOP: buffer/buffr2 not on page boundary"
ENDIF

\ Disc Controller Addresses
 phsoff  =  &C080
\ stepper motor phase 0 off
 mtroff  =  &C088
\ turn motor off
 mtron   =  &C089
\ turn motor on
 drv1en  =  &C08A
\ enable drive 1
 drv2en  =  &C08B
\ enable drive 2
 Q6L     =  &C08C
\ strobe data latch for I/O
 Q6H     =  &C08D
\ load data latch
 Q7L     =  &C08E
\ prepare latch for input
 Q7H     =  &C08F
\ prepare latch for output

\ ******************************************

 ORG &0002

.ZP

.RAND

 SKIP 4

.T1

 SKIP 1

.T2

 SKIP 1

.T3

 SKIP 1

.T4

 SKIP 1

.SC

 SKIP 2

 SCH = SC+1

.INWK

 SKIP NI%

 NEWB = INWK+36
 XX19 = INWK+33
 XX1 = INWK

.P

 SKIP 3

.XC

 SKIP 1

.COL

 SKIP 1

.YC

 SKIP 1

.QQ17

 SKIP 1

.XX2

 SKIP 16

 K3 = XX2
 K4 = XX2+14

.XX16

 SKIP 18

\ ZP up to K3+1 always paged in

.XX0

 SKIP 2

.INF

 SKIP 2

.V

 SKIP 2

.XX

 SKIP 2

.YY

 SKIP 2

.SUNX

 SKIP 2

.BETA

 SKIP 1

.BET1

 SKIP 1

.QQ22

 SKIP 2

.ECMA

 SKIP 1

.ALP1

 SKIP 1

.ALP2

 SKIP 2

.XX15

 SKIP 6

 ztemp0 = XX15
 ztemp1 = ztemp0+1
 ztemp2 = ztemp1+1
 ztemp3 = ztemp2+1
\ Other Addresses
 track   =  K%+256+350
 sector  =  track+1
 curtrk  =  sector+1
 tsltrk  =  curtrk+1
 tslsct  =  tsltrk+1
 filtrk  =  tslsct+1
 filsct  =  filtrk+1
 mtimel  =  filsct+1
 mtimeh  =  mtimel+1
 seeks   =  mtimeh+1
 recals  =  seeks+1
 slot16  =  recals+1
 atemp0  =  slot16+1
 stkptr  =  atemp0+1
 idfld   =  stkptr+1
\ (4 bytes)

.XX12

 SKIP 6

 X1 = XX15
 Y1 = X1+1
 X2 = Y1+1
 Y2 = X2+1

.K

 SKIP 4

.LAS

 SKIP 1

.MSTG

 SKIP 1

.KEYLOOK

 SKIP 17

 thiskey = KEYLOOK

 KLO = KEYLOOK
 KL = KLO
 KY1 = KLO+1
 KY2 = KLO+2
 KY3 = KLO+3
 KY4 = KLO+4
 KY5 = KLO+5
 KY6 = KLO+6
 KY7 = KLO+7
 KY12 = KLO+8
 KY13 = KLO+9
 KY14 = KLO+10
 KY15 = KLO+11
 KY16 = KLO+12
 KY17 = KLO+13
 KY18 = KLO+14
 KY19 = KLO+15
 KY20 = KLO+16

.LSP

 SKIP 1

.QQ15

 SKIP 6

.XX18

 SKIP 9

.QQ19

 SKIP 6

 K5 = XX18
 K6 = K5+4

.BET2

 SKIP 2

.DELTA

 SKIP 1

.DELT4

 SKIP 2

.U

 SKIP 1

.Q

 SKIP 1

.R

 SKIP 1

.S

 SKIP 1

.XSAV

 SKIP 1

.YSAV

 SKIP 1

.XX17

 SKIP 1

.QQ11

 SKIP 1

.ZZ

 SKIP 1

.XX13

 SKIP 1

.MCNT

 SKIP 1

.DL

 SKIP 1

.TYPE

 SKIP 1

.ALPHA

 SKIP 1

\.PBUP
\
\SKIP 1
\
\.HBUP
\
\ SKIP 1
\
\.LBUP
\
\ SKIP 1

.QQ12

 SKIP 1

.TGT

 SKIP 1

.FLAG

 SKIP 1

.CNT

 SKIP 1

.CNT2

 SKIP 1

.STP

 SKIP 1

.XX4

 SKIP 1

.XX20

 SKIP 1

.LSNUM

 SKIP 1

.LSNUM2

 SKIP 1

.RAT

 SKIP 1

.RAT2

 SKIP 1

.K2

 SKIP 4

.widget

 SKIP 1

.dontclip

 SKIP 1

.Yx2M1

 SKIP 1

.text

 SKIP 1

.messXC

 SKIP 1

.newzp

 SKIP 1

.T

 SKIP 1

.JSTX

 SKIP 1

.JSTY

 SKIP 1

.LSX

 SKIP 1

.FSH

 SKIP 1

.ASH

 SKIP 1

.ENERGY

 SKIP 1

.QQ3

 SKIP 1

.QQ4

 SKIP 1

.QQ5

 SKIP 1

.QQ6

 SKIP 2

.QQ7

 SKIP 2

.QQ8

 SKIP 2

.QQ9

 SKIP 1

.QQ10

 SKIP 1

.NOSTM

 SKIP 1

\ ******************************************

 ORG &200

.UP

\.QQ16

 SKIP 65

.FRIN

 SKIP NOSH+1

.MANY

 SKIP NTY+1

 SSPR = MANY+SST

.JUNK

 SKIP 1

.auto

 SKIP 1

.ECMP

 SKIP 1

.MJ

 SKIP 1

.CABTMP

 SKIP 1

.LAS2

 SKIP 1

.MSAR

 SKIP 1

.VIEW

 SKIP 1

.LASCT

 SKIP 1

.GNTMP

 SKIP 1

.HFX

 SKIP 1

.EV

 SKIP 1

.DLY

 SKIP 1

.de

 SKIP 1

.LASX

 SKIP 1

.LASY

 SKIP 1

.XX24

 SKIP 1

.ALTIT

 SKIP 1

.SWAP

 SKIP 1

.XP

 SKIP 1

.YP

 SKIP 1

.YS

 SKIP 1

.BALI

 SKIP 1

.UPO

 SKIP 1

.boxsize

 SKIP 1

.distaway

 SKIP 1

.XSAV2

 SKIP 1

.YSAV2

 SKIP 1

.NAME

 SKIP 8

.TP

 SKIP 1

.QQ0

 SKIP 1

.QQ1

 SKIP 1

.QQ21

 SKIP 6

.CASH

 SKIP 4

.QQ14

 SKIP 1

.COK

 SKIP 1

.GCNT

 SKIP 1

.LASER

 SKIP 6

.CRGO

 SKIP 1

.QQ20

 SKIP 17

.ECM

 SKIP 1

.BST

 SKIP 1

.BOMB

 SKIP 1

.ENGY

 SKIP 1

.DKCMP

 SKIP 1

.GHYP

 SKIP 1

.ESCP

 SKIP 2

.TRIBBLE

 SKIP 2

.TALLYL

 SKIP 1

.NOMSL

 SKIP 1

.FIST

 SKIP 1

.AVL

 SKIP 17

.QQ26

 SKIP 1

.TALLY

 SKIP 2

.SVC

 SKIP 1

 SKIP 1

 SKIP 1

 SKIP 1

.MCH

 SKIP 1

 NT% = MCH-1-TP

.COMX

 SKIP 1

.COMY

 SKIP 1

.dialc

 SKIP 14

.QQ24

 SKIP 1

.QQ25

 SKIP 1

.QQ28

 SKIP 1

.QQ29

 SKIP 1

.gov

 SKIP 1

.tek

 SKIP 1

.SLSP

 SKIP 2

.QQ2

 SKIP 6

.safehouse

 SKIP 6

.frump

 SKIP 1

\ ******************************************

 ORG &400

.WP

.LSX2

 SKIP 256

.LSY2

 SKIP 256

.LSO

 SKIP 200

.SX

 SKIP NOST+1

.SXL

 SKIP NOST+1

.SY

 SKIP NOST+1

.SYL

 SKIP NOST+1

.SZ

 SKIP NOST+1

.SZL

 SKIP NOST+1

\ ******************************************


 f1 = &32
 f2 = &33
 f3 = &34
 f4 = &35
 f5 = &36
 f6 = &37
 f7 = &38
 f8 = &39
 f9 = &30
 f0 = &31
 f12 = &32
 f22 = &33
 f32 = &34

 XX3 = &100
 BUF = &100

\ ******************************************************************************
\
\ ELITE A FILE
\
\ Produces the binary file ELTA.bin that gets loaded by elite-bcfs.asm.
\
\ ******************************************************************************

 ORG CODE%

 LOAD_A% = LOAD%

 JMP S% \@@

.log

 EQUB &08

 FOR I%, 1, 255

  EQUB INT(&2000 * LOG(I%) / LOG(2) + 0.5) DIV 256

 NEXT


.logL

 EQUB &03

 FOR I%, 1, 255

  EQUB INT(&2000 * LOG(I%) / LOG(2) + 0.5) MOD 256

 NEXT

.alogh

 FOR I%, 0, 255

  EQUB INT(2^((I% / 2 + 128) / 16) + 0.5) DIV 256

 NEXT

.SCTBX1

FOR I%, 0, 255

 EQUB (I% + 8) MOD 7

NEXT

.SCTBX2

FOR I%, 0, 255

 EQUB (I% + 8) DIV 7

NEXT

.wtable

 EQUD &9B9A9796
 EQUD &A69F9E9D
 EQUD &ADACABA7
 EQUD &B3B2AFAE
 EQUD &B7B6B5B4
 EQUD &BCBBBAB9
 EQUD &CBBFBEBD
 EQUD &D3CFCECD

 EQUD &DAD9D7D6
 EQUD &DEDDDCDB
 EQUD &E7E6E5DF
 EQUD &ECEBEAE9
 EQUD &F2EFEEED
 EQUD &F6F5F4F3
 EQUD &FBFAF9F7
 EQUD &FFFEFDFC
 
IF (P% - wtable) > (P% AND &FF)
 ERROR "Wtable crosses page bndry."
ENDIF

.COMC

 SKIP 1

.dials

 EQUD 0
 EQUD 0
 EQUD 0
 EQUW 0

.mscol

 EQUD 0

.DFLAG

 SKIP 1

.DNOIZ

 SKIP 1

.DAMP

 SKIP 1 \ D

.DJD

 SKIP 1 \ A

.PATG

 SKIP 1 \ X

.FLH

 SKIP 1 \ F

.JSTGY

IF _IB_DISK

 EQUB &FF

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 SKIP 1 \ Y

ENDIF

.JSTE

 SKIP 1 \ J

.JSTK

 SKIP 1 \ K

.UPTOG

 SKIP 1 \ U

.DISK

 SKIP 1 \ T

.MULIE

 SKIP 1

IF _IB_DISK

 EQUB &0B

ENDIF

.TGINT

 EQUS "DAXFYJKUT"
 RTS  \checksum here

.S%

IF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 CLD

ENDIF

 LDA #STORE MOD 256
 STA SC
 LDA #STORE DIV 256
 STA SC+1
 LDA #CODE2 MOD 256
 STA P
 LDA #CODE2 DIV 256
 STA P+1

IF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 LDA &C08B \ RAM card

ENDIF

IF _IB_DISK

 LDX #7

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 LDX #(&C0-&90)

ENDIF

 LDY #0

.Sept3

 LDA (SC),Y
 STA (P),Y
 INY
 BNE Sept3
 INC SC+1
 INC P+1
 DEX

IF _IB_DISK

 BPL Sept3

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 BNE Sept3

ENDIF

IF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 LDA &C081 \ ROMs

ENDIF

 JSR DEEOR
\JSR Checksum

IF _IB_DISK

 LDA #&30
 STA &8342
 NOP
 NOP

ENDIF

 JSR COLD
 JMP BEGIN
 \

.DEEOR

 LDA #((G%-1)MOD 256)
 STA FRIN
 LDA #((G%-1)DIV 256)
 STA FRIN+1
 LDA #((R%-1)DIV 256)
 LDY #((R%-1)MOD 256)
 LDX #KEY1
 JSR DEEORS
 LDA #((QQ18-1)MOD 256)
 STA FRIN
 LDA #((QQ18-1)DIV 256)
 STA FRIN+1
 LDA #&1F
 LDY #&FF
 LDX #KEY2

.DEEORS

 STX T
 STA SC+1
 LDA #0
 STA SC

.DEEORL

 LDA (SC),Y
 SEC
 SBC T
 STA (SC),Y
 STA T
 TYA
 BNE P%+4
 DEC SC+1
 DEY
 CPY FRIN
 BNE DEEORL
 LDA SC+1
 CMP FRIN+1
 BNE DEEORL
 RTS
 EQUD &2345AAB7 \red herring
 \

.G%

 \mutilate from here to R%

.DOENTRY

 \after dock
 JSR RES2
 JSR LAUN
 LDA #0
 STA DELTA
\STA ALPHA
\STA BETA
\STA ALP1
\STA BET1
 STA GNTMP
 STA QQ22+1
 LDA #&FF
 STA FSH
 STA ASH
 STA ENERGY
\JSR HALL
 LDY #44
 JSR DELAY
 LDA TP
 AND #3
 BNE EN1
 LDA TALLY+1
 BEQ EN4
 LDA GCNT
 LSR A
 BNE EN4
 JMP BRIEF

.EN1

 CMP #3
 BNE EN2
 JMP DEBRIEF

.EN2

 LDA GCNT
 CMP #2
 BNE EN4
 LDA TP
 AND #&F
 CMP #2
 BNE EN3
 LDA TALLY+1
 CMP #5
 BCC EN4
 JMP BRIEF2

.EN3

 CMP #6
 BNE EN5
 LDA QQ0
 CMP #215
 BNE EN4
 LDA QQ1
 CMP #84
 BNE EN4
 JMP BRIEF3

.EN5

 CMP #10
 BNE EN4
 LDA QQ0
 CMP #63
 BNE EN4
 LDA QQ1
 CMP #72
 BNE EN4
 JMP DEBRIEF2

.EN4

\LDA CASH+2
\CMP #&C4
\BCC EN6
\LDA TP
\AND #&10
\BNE EN6
\JMP TBRIEF
 \.EN6
 JMP BAY

.BRKBK

 LDA #(BRBR MOD 256)
 SEI
 STA BRKV
 LDA #(BRBR DIV 256)
 STA BRKV+1
 CLI
 RTS
\TRIBDIR
\EQUB 0
\EQUB 1
\EQUB &FF
\EQUB 0
\TRIBDIRH
\EQUB 0
\EQUB 0
\EQUB &FF
\EQUB 0

.SPMASK

 EQUW &04FB
 EQUW &08F7
 EQUW &10EF
 EQUW &20DF
 EQUW &40BF
 EQUW &807F
\MVT RIBS
\MVT R1
\nom inus
 \....

.M%

 LDA K%
 STA RAND
\LDA TRIBCT
\BEQ NOMVETR
\JMP MVTRIBS
 \.NOMVETR
 LDX JSTX
 JSR cntr
 JSR cntr
 TXA
 EOR #128
 TAY
 AND #128
 STA ALP2
 STX JSTX
 EOR #128
 STA ALP2+1
 TYA
 BPL P%+7
 EOR #&FF
 CLC
 ADC #1
 LSR A
 LSR A
 CMP #8
 BCS P%+3
 LSR A
 STA ALP1
 ORA ALP2
 STA ALPHA
 LDX JSTY
 JSR cntr
 TXA
 EOR #128
 TAY
 AND #128
 STX JSTY
 STA BET2+1
 EOR #128
 STA BET2
 TYA
 BPL P%+4
 EOR #&FF
 ADC #4
 LSR A
 LSR A
 LSR A
 LSR A
 CMP #3
 BCS P%+3
 LSR A
 STA BET1
 ORA BET2
 STA BETA
 LDA KY2
 BEQ MA17
 LDA DELTA
 CMP #40
 BCS MA17
 INC DELTA

.MA17

 LDA KY1
 BEQ MA4
 DEC DELTA
 BNE MA4
 INC DELTA

.MA4

 LDA KY15
 AND NOMSL
 BEQ MA20
 LDY #GREEN
 JSR ABORT
 JSR BOOP \ @@
 LDA #0
 STA MSAR

.MA20

 LDA MSTG
 BPL MA25
 LDA KY14
 BEQ MA25
 LDX NOMSL
 BEQ MA25
 STA MSAR
 LDY #WHITE
 JSR MSBAR

.MA25

 LDA KY16
 BEQ MA24
 LDA MSTG
 BMI MA64
 JSR FRMIS

.MA24

 LDA KY12
 BEQ MA76

IF _IB_DISK

 LDA &02B9
 BMI MA76

ENDIF

 ASL BOMB
 BEQ MA76
 JSR BOMBON \@@

.MA76

 LDA KY20
 BEQ MA78
 LDA #0
 STA auto
\JSR stopbd

.MA78

 LDA KY13
 AND ESCP
 BEQ noescp
 LDA MJ
 BNE noescp
 JMP ESCAPE

.noescp

 LDA KY18
 BEQ P%+5
 JSR WARP
 LDA KY17
 AND ECM
 BEQ MA64
 LDA ECMA
 BNE MA64
 DEC ECMP
 JSR ECBLB2

.MA64

 LDA KY19
 AND DKCMP
 BEQ MA68

IF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES

\EOR KLO+&29
\BEQ MA68

ELIF _SOURCE_DISK_CODE_FILES

 EOR KLO+&29
 BEQ MA68

ENDIF

 STA auto
\JSR startbd

.MA68

 \kill phantom Cs
 LDA #0
 STA LAS
 STA DELT4
 LDA DELTA
 LSR A
 ROR DELT4
 LSR A
 ROR DELT4
 STA DELT4+1
 LDA LASCT
 BNE MA3
 LDA KY7
 BEQ MA3
 LDA GNTMP
 CMP #242
 BCS MA3
 LDX VIEW
 LDA LASER,X
 BEQ MA3
 PHA
 AND #127
 STA LAS
 STA LAS2
 JSR LASNOISE
 JSR LASLI
 PLA
 BPL ma1
 LDA #0

.ma1

 AND #&FA
 STA LASCT

.MA3

 LDX #0

.MAL1

 STX XSAV
 LDA FRIN,X
 BNE P%+5
 JMP MA18
 STA TYPE
 JSR GINF
 LDY #(NI%-1)

.MAL2

 LDA (INF),Y
 STA INWK,Y
 DEY
 BPL MAL2
 LDA TYPE
 BMI MA21
 ASL A
 TAY
 LDA XX21-2,Y
 STA XX0
 LDA XX21-1,Y
 STA XX0+1
 LDA BOMB
 BPL MA21
 CPY #2*SST
 BEQ MA21
 CPY #2*THG
 BEQ MA21
 CPY #2*CON
 BCS MA21
 LDA INWK+31
 AND #32
 BNE MA21
 ASL INWK+31
 SEC
 ROR INWK+31
 LDX TYPE
 JSR EXNO2

.MA21

 JSR MVEIT
 LDY #(NI%-1)

.MAL3

 LDA INWK,Y
 STA (INF),Y
 DEY
 BPL MAL3
 LDA INWK+31
 AND #&A0
 JSR MAS4
 BNE MA65
 LDA INWK
 ORA INWK+3
 ORA INWK+6
 BMI MA65
 LDX TYPE
 BMI MA65
 CPX #SST
 BEQ ISDK
 AND #&C0
 BNE MA65
 CPX #MSL
 BEQ MA65
 LDA BST
 AND INWK+5
 BPL MA58
 CPX #OIL
 BEQ oily
 LDY #0
 LDA (XX0),Y
 LSR A
 LSR A
 LSR A
 LSR A
 BEQ MA58
 ADC #1
 BNE slvy2

.oily

 JSR DORND
 AND #7

.slvy2

 JSR tnpr1
 LDY #78
 BCS MA59
 LDY QQ29
 ADC QQ20,Y
 STA QQ20,Y
 TYA
 ADC #208
 JSR MESS
 ASL NEWB
 SEC
 ROR NEWB

.MA65

 JMP MA26

.ISDK

 LDA K%+NI%+36
 AND #4
 BNE MA62
 LDA INWK+14
 CMP #&D6
 BCC MA62
 JSR SPS1
 LDA XX15+2
 CMP #89 \86
 BCC MA62
 LDA INWK+16
 AND #&7F
 CMP #80
 BCC MA62

.GOIN

\JSR stopbd
 JMP DOENTRY

.MA62

 LDA DELTA
 CMP #5
 BCC MA67
 JMP DEATH

.MA59

 JSR EXNO3

.MA60

 ASL INWK+31
 SEC
 ROR INWK+31

.MA61

 BNE MA26

.MA67

 LDA #1
 STA DELTA
 LDA #5
 BNE MA63

.MA58

 ASL INWK+31
 SEC
 ROR INWK+31
 LDA INWK+35
 SEC
 ROR A

.MA63

 JSR OOPS
 JSR EXNO3

.MA26

 LDA NEWB
 BPL P%+5
 JSR SCAN
 LDA QQ11
 BNE MA15
 JSR PLUT
 JSR HITCH
 BCC MA8
 LDA MSAR
 BEQ MA47
 JSR BEEP
 LDX XSAV
 LDY #RED
 JSR ABORT2

.MA47

 LDA LAS
 BEQ MA8
 LDX #15
 JSR EXNO
 LDA TYPE
 CMP #SST
 BEQ MA14+2
 CMP #CON
 BCC BURN
 LDA LAS
 CMP #(Armlas AND127)
 BNE MA14+2
 LSR LAS
 LSR LAS

.BURN

 LDA INWK+35
 SEC
 SBC LAS
 BCS MA14
 ASL INWK+31
 SEC
 ROR INWK+31
 LDA TYPE
 CMP #AST
 BNE nosp
 LDA LAS
 CMP #Mlas
 BNE nosp
 JSR DORND
 LDX #SPL
 AND #3
 JSR SPIN2

.nosp

 LDY #PLT
 JSR SPIN
 LDY #OIL
 JSR SPIN
 LDX TYPE
 JSR EXNO2

.MA14

 STA INWK+35
 LDA TYPE
 JSR ANGRY

.MA8

 JSR LL9

.MA15

 LDY #35
 LDA INWK+35
 STA (INF),Y
 LDA NEWB
 BMI KS1S
 LDA INWK+31
 BPL MAC1
 AND #&20
 BEQ MAC1
 LDA NEWB
 AND #64
 ORA FIST
 STA FIST
 LDA DLY
 ORA MJ
 BNE KS1S
 LDY #10
 LDA (XX0),Y
 BEQ KS1S
 TAX
 INY
 LDA (XX0),Y
 TAY
 JSR MCASH
 LDA #0
 JSR MESS

.KS1S

 JMP KS1

.MAC1

 LDA TYPE
 BMI MA27
 JSR FAROF
 BCC KS1S

.MA27

 LDY #31
 LDA INWK+31
 STA (INF),Y
 LDX XSAV
 INX
 JMP MAL1

.MA18

 LDA BOMB
 BPL MA77
 JSR BOMBEFF2 \ @@
 ASL BOMB
 BMI MA77
 JSR BOMBOFF

.MA77

 LDA MCNT
 AND #7
 BNE MA22
 LDX ENERGY
 BPL b
 LDX ASH
 JSR SHD
 STX ASH
 LDX FSH
 JSR SHD
 STX FSH

.b

 SEC
 LDA ENGY
 ADC ENERGY
 BCS paen1
 STA ENERGY

.paen1

 LDA MJ
 BNE MA23S
 LDA MCNT
 AND #31
 BNE MA93
 LDA SSPR
 BNE MA23S
 TAY
 JSR MAS2
 BNE MA23S
 LDX #28

.MAL4

 LDA K%,X
 STA INWK,X
 DEX
 BPL MAL4
 INX
 LDY #9
 JSR MAS1
 BNE MA23S
 LDX #3
 LDY #11
 JSR MAS1
 BNE MA23S
 LDX #6
 LDY #13
 JSR MAS1
 BNE MA23S
 LDA #&C0
 JSR FAROF2
 BCC MA23S
 JSR WPLS
 JSR NWSPS

.MA23S

 JMP MA23

.MA22

 LDA MJ
 BNE MA23S
 LDA MCNT
 AND #31

.MA93

 CMP #10
 BNE MA29
 LDA #50
 CMP ENERGY
 BCC P%+6
 ASL A
 JSR MESS
 LDY #&FF
 STY ALTIT
 INY
 JSR m
 BNE MA23
 JSR MAS3
 BCS MA23
 SBC #&24
 BCC MA28
 STA R
 JSR LL5
 LDA Q
 STA ALTIT
 BNE MA23

.MA28

 JMP DEATH

.MA29

 CMP #15
 BNE MA33
 LDA auto
 BEQ MA23
 LDA #123
 BNE MA34

.MA33

 CMP #20
 BNE MA23
 LDA #30
 STA CABTMP
 LDA SSPR
 BNE MA23
 LDY #NI%
 JSR MAS2
 BNE MA23
 JSR MAS3
 EOR #&FF
 ADC #30
 STA CABTMP
 BCS MA28
 CMP #&E0
 BCC MA23
\CMP #&F0
\BCC nokilltr
\LDA #5
\JSR SETL1
\LDA VIC+&15
\AND #&3
\STA VIC+&15
\LDA #4
\JSR SETL1
\LSR TRIBBLE+1
\ROR TRIBBLE
 \.nokilltr
 LDA BST
 BEQ MA23
 LDA DELT4+1
 LSR A
 ADC QQ14
 CMP #70
 BCC P%+4
 LDA #70
 STA QQ14
 LDA #160

.MA34

 JSR MESS  \--BT

.MA23

 LDA LAS2
 BEQ MA16
 LDA LASCT
 CMP #8
 BCS MA16
 JSR LASLI2
 LDA #0
 STA LAS2

.MA16

 LDA ECMP
 BEQ MA69
 JSR DENGY
 BEQ MA70

.MA69

 LDA ECMA
 BEQ MA66
 LDY #20
 ORA #192
 TAX
 JSR SOBLIP \ @@
 DEC ECMA
 BNE MA66

.MA70

 JSR ECMOF

.MA66

 LDA QQ11
 BNE oh
 JMP STARS
\JMP PBFL

.SPIN

 JSR DORND
 BPL oh
 TYA
 TAX
 LDY #0
 AND (XX0),Y
 AND #15

.SPIN2

 STA CNT

.spl

 BEQ oh
 LDA #0
 JSR SFS1
 DEC CNT
 BNE spl+2

.oh

 RTS

.BOMBOFF

 LDA QQ11
 BNE BOMBR1
 LDY #1
 LDA BOMBTBX
 STA XX12
 LDA BOMBTBY
 STA XX12+1

.BOMBL1

 JSR CLICK
 LDA XX12
 STA X1
 LDA XX12+1
 STA Y1
 LDA BOMBTBX,Y
 STA X2
 STA XX12
 LDA BOMBTBY,Y
 STA Y2
 STA XX12+1
 JSR LOIN
 INY
 CPY #10
 BCC BOMBL1

.BOMBR1

 RTS

.BOMBEFF2

 JSR P%+3
 JSR BOMBEFF

.BOMBEFF

 JSR SOBOMB
 JSR BOMBOFF

.BOMBON

 LDY #0

.BOMBL2

 JSR DORND
 AND #127
 ADC #3
 STA BOMBTBY,Y
 TXA
 AND #31
 CLC
 ADC BOMBPOS,Y
 STA BOMBTBX,Y
 INY
 CPY #10
 BCC BOMBL2
 LDX #0
 STX BOMBTBX+9
 DEX
 STX BOMBTBX
 BCS BOMBOFF

.BOMBPOS

 EQUD &A0C0E0E0
 EQUD &20406080
 EQUW 0

.BOMBTBX

 EQUD 0
 EQUD 0
 EQUW 0

.BOMBTBY

 EQUD 0
 EQUD 0
 EQUW 0

.MT27

 LDA #217
 BNE P%+4

.MT28

 LDA #220
 CLC
 ADC GCNT
 BNE DETOK

.DETOK3

 PHA
 TAX
 TYA
 PHA
 LDA V
 PHA
 LDA V+1
 PHA
 LDA #(RUTOK MOD 256)
 STA V
 LDA #(RUTOK DIV 256)
 BNE DTEN
 \.....................

.DETOK

 PHA
 TAX
 TYA
 PHA
 LDA V
 PHA
 LDA V+1
 PHA
 LDA #(TKN1 MOD 256)
 STA V
 LDA #(TKN1 DIV 256)

.DTEN

 STA V+1
 LDY #0

.DTL1

 LDA (V),Y
 EOR #VE
 BNE DT1
 DEX
 BEQ DTL2

.DT1

 INY
 BNE DTL1
 INC V+1
 BNE DTL1

.DTL2

 INY
 BNE P%+4
 INC V+1
 LDA (V),Y
 EOR #VE
 BEQ DTEX
 JSR DETOK2
 JMP DTL2

.DTEX

 PLA
 STA V+1
 PLA
 STA V
 PLA
 TAY
 PLA
 RTS
 \.............

.DETOK2

 CMP #32
 BCC DT3
 BIT DTW3
 BPL DT8
 TAX
 TYA
 PHA
 LDA V
 PHA
 LDA V+1
 PHA
 TXA
 JSR TT27
 JMP DT7 \TT27

.DT8

 CMP #91
 BCC DTS
 CMP #129
 BCC DT6
 CMP #215
 BCC DETOK
 SBC #215
 ASL A
 PHA
 TAX
 LDA TKN2,X
 JSR DTS
 PLA
 TAX
 LDA TKN2+1,X \letter pair

.DTS

 CMP #&41
 BCC DT9
 BIT DTW6
 BMI DT10
 BIT DTW2
 BMI DT5

.DT10

 ORA DTW1

.DT5

 AND DTW8

.DT9

 JMP DASC \ascii

.DT3

 TAX
 TYA
 PHA
 LDA V
 PHA
 LDA V+1
 PHA  \Magic
 TXA
 ASL A
 TAX
 LDA JMTB-2,X
 STA DTM+1
 LDA JMTB-1,X
 STA DTM+2
 TXA
 LSR A

.DTM

IF _IB_DISK

 JSR MT19

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 JSR DASC

ENDIF

.DT7

 PLA
 STA V+1
 PLA
 STA V
 PLA
 TAY
 RTS

.DT6

 STA SC
 TYA
 PHA
 LDA V
 PHA
 LDA V+1
 PHA
 JSR DORND
 TAX
 LDA #0
 CPX #51
 ADC #0
 CPX #102
 ADC #0
 CPX #153
 ADC #0
 CPX #204
 LDX SC
 ADC MTIN-91,X
 JSR DETOK
 JMP DT7 \Multitoken
 \....................

.MT1

 LDA #0
 EQUB &2C

.MT2

 LDA #32
 STA DTW1
 LDA #0
 STA DTW6
 RTS

.MT8

 LDA #6

IF _IB_DISK

 STA XC

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 JSR DOXC

ENDIF

 LDA #&FF
 STA DTW2
 RTS

.MT9

 LDA #1
 STA XC
 JMP TT66

.MT13

 LDA #128
 STA DTW6
 LDA #32
 STA DTW1
 RTS

.MT6

 LDA #128
 STA QQ17
 LDA #&FF
 EQUB &2C

.MT5

 LDA #0
 STA DTW3
 RTS

.MT14

 LDA #128
 EQUB &2C

.MT15

 LDA #0
 STA DTW4
 ASL A
 STA DTW5
 RTS

.MT17

 LDA QQ17
 AND #191
 STA QQ17
 LDA #3
 JSR TT27
 LDX DTW5
 LDA BUF-1,X
 JSR VOWEL
 BCC MT171
 DEC DTW5

.MT171

 LDA #153
 JMP DETOK

.MT18

 JSR MT19
 JSR DORND
 AND #3
 TAY

.MT18L

 JSR DORND
 AND #62
 TAX
 LDA TKN2+2,X
 JSR DTS
 LDA TKN2+3,X
 JSR DTS
 DEY
 BPL MT18L
 RTS

.MT19

 LDA #&DF
 STA DTW8
 RTS

.VOWEL

 ORA #32
 CMP #'a'
 BEQ VRTS
 CMP #'e'
 BEQ VRTS
 CMP #'i'
 BEQ VRTS
 CMP #'o'
 BEQ VRTS
 CMP #'u'
 BEQ VRTS
 CLC

.VRTS

\RTS 

.WHITETEXT

\LDA #32
\JSR DOVDU19
\LDA #RED
\JMP DOCOL
 RTS
 \............

.JMTB

 EQUW MT1
 EQUW MT2
 EQUW TT27
 EQUW TT27
 EQUW MT5
 EQUW MT6
 EQUW DASC
 EQUW MT8
 EQUW MT9
 EQUW DASC
 EQUW NLIN4
 EQUW DASC
 EQUW MT13
 EQUW MT14
 EQUW MT15
 EQUW MT16
 EQUW MT17
 EQUW MT18
 EQUW MT19
 EQUW DASC
 EQUW CLYNS
 EQUW PAUSE
 EQUW MT23
 EQUW PAUSE2
 EQUW BRIS
 EQUW MT26
 EQUW MT27
 EQUW MT28
 EQUW MT29
 EQUW FILEPR
 EQUW OTHERFILEPR
 EQUW DASC
 \.............

.TKN2

 EQUB 12
 EQUB 10
 EQUS "ABOUSEITILETSTONLONUTHNO"

.QQ16

 EQUS "ALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
 \.............
 EQUS ":0.E."

.NA%

IF _IB_DISK

 EQUS ("JAMESON")

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 EQUS ("jameson")

ENDIF

 EQUB 13
 EQUB 0

IF _IB_DISK

 EQUD &5A4AAD14
 EQUD &B7530248
 EQUD &E8030000
 EQUW &0046
 EQUB 0 \Fuel-Gal
 EQUD &0F
 EQUW 0
 EQUB &16 \Laser-Cargo

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 EQUD 0
 EQUD 0 \Base seed
 EQUD 0 \Cash
 EQUW 0
 EQUB 0 \Fuel-Gal
 EQUD 0
 EQUW 0
 EQUB 0 \Laser-Cargo

ENDIF

 EQUD 0
 EQUD 0
 EQUD 0
 EQUD 0
 EQUB 0 \ crgo
 EQUD 0 \ ECM-ENGY
 EQUW 0
 EQUB 0 \DCK-escp
 EQUD 0 \ EXPAND

IF _IB_DISK

 EQUB 3 \ MISSILES

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 EQUB 0 \ MISSILES

ENDIF

 EQUB 0 \ FIST
 EQUB 16
 EQUB 15
 EQUB 17
 EQUB 0
 EQUB 3
 EQUB 28
 EQUB 14
 EQUW 0
 EQUB 10
 EQUB 0
 EQUB 17
 EQUB 58
 EQUB 7
 EQUB 9
 EQUB 8
 EQUB 0
 EQUB 0 \QQ26
 EQUW 0 \TALLY
 EQUB 128 \SVC

IF _IB_DISK

.CHK2

 EQUB &AA

.CHK3

 EQUB &27

.CHK

 EQUB &03

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

.CHK2

 EQUB 0

.CHK3

 EQUB 0

.CHK

 EQUB 0

ENDIF

 EQUD 0
 EQUD 0
 EQUD 0
 EQUD 0
 EQUD 0
 \.........

 \ZIP

.S1%

 EQUS ":0.E."

.NA2%

 EQUS ("JAMESON")
 EQUB 13
 EQUB 0
 EQUB 20 \ QQ0
 EQUB 173 \ QQ1
 EQUD &2485A4A \ QQ21
 EQUW &B753 \Base seed
 EQUD (((&E8030000)AND(NOT(Q%)))+((&CA9A3B)AND Q%))\CASH,&80969800
 EQUB 70 \fuel
 EQUB Q%AND128 \COK-UP
 EQUB 0 \GALACTIC COUNT
 EQUB (Armlas ANDQ%)+(POW AND(NOT(Q%)))
 EQUB (POW)AND Q%
 EQUB (POW+128)AND Q%
 EQUB Mlas AND Q%
 EQUW 0 \LASER
 EQUB 22+(15 AND Q%) \37 CRGO
 EQUD 0
 EQUD 0
 EQUD 0
 EQUD 0
 EQUB 0 \ crgo
 EQUB Q% \ECM
 EQUB Q% \BST
 EQUB Q%AND127 \BOMB
 EQUB Q%AND1 \ENGY++
 EQUB Q% \DCK COMP
 EQUB Q% \GHYP
 EQUB Q% \ESCP
 EQUD FALSE \EXPAND
 EQUB 3+(Q%AND1) \MISSILES
 EQUB FALSE \FIST
 EQUB 16
 EQUB 15
 EQUB 17
 EQUB 0
 EQUB 3
 EQUB 28
 EQUB 14
 EQUW 0
 EQUB 10
 EQUB 0
 EQUB 17
 EQUB 58
 EQUB 7
 EQUB 9
 EQUB 8
 EQUB 0
 EQUB 0 \QQ26
 EQUW (20000ANDQ%) \TALLY
 EQUB 128 \SVC

 \.CHK2

 EQUB &AA

 \.CHK3

 EQUB &27

 \.CHK

 EQUB &03
 EQUD 0
 EQUD 0
 EQUD 0

.NAEND%

 EQUD 0

.scacol

 EQUB 0
 EQUB BLUE
 EQUB BLUE
 EQUB RED
 EQUB RED
 EQUB RED \barrel
 EQUB RED
 EQUB RED
 EQUB RED
 EQUB CYAN
 EQUB CYAN \transp
 EQUB CYAN
 EQUB MAG
 EQUB MAG
 EQUB MAG
 EQUB RED
 EQUB CYAN \Viper
 EQUB CYAN
 EQUB CYAN
 EQUB CYAN
 EQUB CYAN
 EQUB CYAN
 EQUB CYAN
 EQUB BLUE \Wor
 EQUB CYAN
 EQUB CYAN
 EQUB MAG
 EQUB CYAN
 EQUB CYAN \Moray
 EQUB FUZZY
 EQUB CYAN
 EQUB CYAN \Con
 EQUB 0
 EQUB CYAN
 EQUD 0

\ ******************************************************************************
\
\ Save ELTA.bin
\
\ ******************************************************************************

 PRINT "ELITE A"
 PRINT "Assembled at ", ~CODE%
 PRINT "Ends at ", ~P%
 PRINT "Code size is ", ~(P% - CODE%)
 PRINT "Execute at ", ~LOAD%
 PRINT "Reload at ", ~LOAD_A%

 PRINT "S.ELTA ", ~CODE%, " ", ~P%, " ", ~LOAD%, " ", ~LOAD_A%
 SAVE "versions/apple/3-assembled-output/ELTA.bin", CODE%, P%, LOAD%

\ ******************************************************************************
\
\ ELITE B FILE
\
\ Produces the binary file ELTB.bin that gets loaded by elite-bcfs.asm.
\
\ ******************************************************************************

 CODE_B% = P%

 LOAD_B% = LOAD% + P% - CODE%

.UNIV

 FOR I%, 0, NOSH

  EQUW K% + I% * NI%    \ Address of block no. I%, of size NI%, in workspace K%

 NEXT

.NLI4

 LDX #39

.NLL1

 LDA &480,X
 CMP #160
 BEQ NLI5
 LDA #&AD
 STA &500,X

.NLI5

 DEX
 BPL NLL1
 RTS

.FLKB

 BIT &C010
 RTS

.NLIN3

 JSR TT27

.NLIN4

 LDA text
 BMI NLI4
 LDA #19
 BNE NLIN2

.NLIN

 LDA #23

.NLIN5

 JSR INCYC

.NLIN2

 STA Y1
 LDA #BLUE
 STA COL
 LDX #0
 STX X1
 DEX
 STX X2
 JMP HLOIN

.HLOIN2

 JSR EDGES
 STY Y1
 LDA #0
 STA LSO,Y
 JMP HLOIN
 \.........

.PIX1

 JSR ADD
 STA YY+1
 TXA
 STA SYL,Y

.PIXEL2

 LDA X1
 BPL PX1
 EOR #&7F
 CLC
 ADC #1

.PX1

 EOR #128
 TAX
 LDA Y1
 AND #127
 CMP #Y
 BCS PXR1
 LDA Y1
 BPL PX2
 EOR #&7F
 ADC #1

.PX2

 STA T
 LDA #(Y+1)
 SBC T
 \....

.PIXEL

 STY T1
 STA SC+1
 LSR A
 LSR A
 LSR A
 STA T3
 TAY
 LDA SCTBL,Y
 STA SC
 LDA SC+1
 AND #7
 STA T2
 ASL A
 ASL A
 ADC SCTBH,Y
 STA SC+1
 LDA SCTBX1,X
 ASL A
 LDY ZZ
 BMI P%+4
 ADC #14
 CPY #&50
 LDY SCTBX2,X
 TAX
 BCS PX4
 LDA TWOS3,X
 EOR (SC),Y
 STA (SC),Y
 LDA TWOS3+1,X
 BEQ PX3
 INY
 EOR (SC),Y
 STA (SC),Y
 DEY

.PX3

 LDA T2
 BEQ PX6
 LDA SC+1
 SBC #3
 STA SC+1

.PX4

 LDA TWOS3,X
 EOR (SC),Y
 STA (SC),Y
 LDA TWOS3+1,X
 BEQ PX5
 INY
 EOR (SC),Y
 STA (SC),Y

.PX5

 LDY T1

.PXR1

 RTS

.PX6

 STX T2
 LDX T3
 LDA SCTBL-1,X
 STA SC
 LDA SCTBH2-1,X
 STA SC+1
 LDX T2
 JMP PX4
 \....

.TWOS3

 EQUW &0003
 EQUW &0006
 EQUW &000C
 EQUW &0018
 EQUW &0030
 EQUW &0060
 EQUW &0140
 EQUW &0007
 EQUW &000E
 EQUW &001C
 EQUW &0038
 EQUW &0070
 EQUW &0160
 EQUW &0340
 \.........

.BLINE

 TXA
 ADC K4
 STA K6+2
 LDA K4+1
 ADC T
 STA K6+3
 LDA FLAG
 BEQ BL1
 INC FLAG

.BL5

 LDY LSP
 LDA #&FF
 CMP LSY2-1,Y
 BEQ BL7
 STA LSY2,Y
 INC LSP
 BNE BL7

.BL1

 LDA K5
 STA XX15
 LDA K5+1
 STA XX15+1
 LDA K5+2
 STA XX15+2
 LDA K5+3
 STA XX15+3
 LDA K6
 STA XX15+4
 LDA K6+1
 STA XX15+5
 LDA K6+2
 STA XX12
 LDA K6+3
 STA XX12+1
 JSR LL145
 BCS BL5
 LDA SWAP
 BEQ BL9
 LDA X1
 LDY X2
 STA X2
 STY X1
 LDA Y1
 LDY Y2
 STA Y2
 STY Y1

.BL9

 LDY LSP
 LDA LSY2-1,Y
 CMP #&FF
 BNE BL8
 LDA X1
 STA LSX2,Y
 LDA Y1
 STA LSY2,Y
 INY

.BL8

 LDA X2
 STA LSX2,Y
 LDA Y2
 STA LSY2,Y
 INY
 STY LSP
 JSR LOIN
 LDA XX13
 BNE BL5

.BL7

 LDA K6
 STA K5
 LDA K6+1
 STA K5+1
 LDA K6+2
 STA K5+2
 LDA K6+3
 STA K5+3
 LDA CNT
 CLC
 ADC STP
 STA CNT
 RTS

.FLIP

\LDA MJ
\BNE FLIP-1
 LDY NOSTM

.FLL1

 LDX SY,Y
 LDA SX,Y
 STA Y1
 STA SY,Y
 TXA
 STA X1
 STA SX,Y
 LDA SZ,Y
 STA ZZ
 JSR PIXEL2
 DEY
 BNE FLL1
 RTS

.STARS

 LDX VIEW
 BEQ STARS1
 DEX
 BNE ST11
 JMP STARS6

.ST11

 JMP STARS2

.STARS1

 LDY NOSTM

.STL1

 JSR DV42
 LDA R
 LSR P
 ROR A
 LSR P
 ROR A
 ORA #1
 STA Q
 LDA SZL,Y
 SBC DELT4
 STA SZL,Y
 LDA SZ,Y
 STA ZZ
 SBC DELT4+1
 STA SZ,Y
 JSR MLU1
 STA YY+1
 LDA P
 ADC SYL,Y
 STA YY
 STA R
 LDA Y1
 ADC YY+1
 STA YY+1
 STA S
 LDA SX,Y
 STA X1
 JSR MLU2
 STA XX+1
 LDA P
 ADC SXL,Y
 STA XX
 LDA X1
 ADC XX+1
 STA XX+1
 EOR ALP2+1
 JSR MLS1
 JSR ADD
 STA YY+1
 STX YY
 EOR ALP2
 JSR MLS2
 JSR ADD
 STA XX+1
 STX XX
 LDX BET1
 LDA YY+1
 EOR BET2+1
 JSR MULTS-2
 STA Q
 JSR MUT2
 ASL P
 ROL A
 STA T
 LDA #0
 ROR A
 ORA T
 JSR ADD
 STA XX+1
 TXA
 STA SXL,Y
 LDA YY
 STA R
 LDA YY+1
 STA S
\JSR MAD
\STA SSTXR
 LDA #0
 STA P
 LDA BETA
 EOR #128
 JSR PIX1
 LDA XX+1
 STA X1
 STA SX,Y
 AND #127
 CMP #120
 BCS KILL1
 LDA YY+1
 STA SY,Y
 STA Y1
 AND #127
 CMP #120
 BCS KILL1
 LDA SZ,Y
 CMP #16
 BCC KILL1
 STA ZZ

.STC1

 JSR PIXEL2
 DEY
 BEQ P%+5
 JMP STL1
 RTS

.KILL1

 JSR DORND
 ORA #4
 STA Y1
 STA SY,Y
 JSR DORND
 ORA #8
 STA X1
 STA SX,Y
 JSR DORND
 ORA #&90
 STA SZ,Y
 STA ZZ
 LDA Y1
 JMP STC1

.STARS6

 LDY NOSTM

.STL6

 JSR DV42
 LDA R
 LSR P
 ROR A
 LSR P
 ROR A
 ORA #1
 STA Q
 LDA SX,Y
 STA X1
 JSR MLU2
 STA XX+1
 LDA SXL,Y
 SBC P
 STA XX
 LDA X1
 SBC XX+1
 STA XX+1
 JSR MLU1
 STA YY+1
 LDA SYL,Y
 SBC P
 STA YY
 STA R
 LDA Y1
 SBC YY+1
 STA YY+1
 STA S
 LDA SZL,Y
 ADC DELT4
 STA SZL,Y
 LDA SZ,Y
 STA ZZ
 ADC DELT4+1
 STA SZ,Y
 LDA XX+1
 EOR ALP2
 JSR MLS1
 JSR ADD
 STA YY+1
 STX YY
 EOR ALP2+1
 JSR MLS2
 JSR ADD
 STA XX+1
 STX XX
 LDA YY+1
 EOR BET2+1
 LDX BET1
 JSR MULTS-2
 STA Q
 LDA XX+1
 STA S
 EOR #128
 JSR MUT1
 ASL P
 ROL A
 STA T
 LDA #0
 ROR A
 ORA T
 JSR ADD
 STA XX+1
 TXA
 STA SXL,Y
 LDA YY
 STA R
 LDA YY+1
 STA S
\EOR #128
\JSR MAD
\STA SSTXR
 LDA #0
 STA P
 LDA BETA
 JSR PIX1
 LDA XX+1
 STA X1
 STA SX,Y
 LDA YY+1
 STA SY,Y
 STA Y1
 AND #127
 CMP #110
 BCS KILL6
 LDA SZ,Y
 CMP #160
 BCS KILL6
 STA ZZ

.STC6

 JSR PIXEL2
 DEY
 BEQ ST3
 JMP STL6

.ST3

 RTS

.KILL6

 JSR DORND
 AND #127
 ADC #10
 STA SZ,Y
 STA ZZ
 LSR A
 BCS ST4
 LSR A
 LDA #&FC
 ROR A
 STA X1
 STA SX,Y
 JSR DORND
 STA Y1
 STA SY,Y
 JMP STC6

.ST4

 JSR DORND
 STA X1
 STA SX,Y
 LSR A
 LDA #230
 ROR A
 STA Y1
 STA SY,Y
 BNE STC6

.MAS1

 LDA INWK,Y
 ASL A
 STA K+1
 LDA INWK+1,Y
 ROL A
 STA K+2
 LDA #0
 ROR A
 STA K+3
 JSR MVT3
 STA INWK+2,X
 LDY K+1
 STY INWK,X
 LDY K+2
 STY INWK+1,X
 AND #127

.MA9

 RTS

.m

 LDA #0

.MAS2

 ORA K%+2,Y
 ORA K%+5,Y
 ORA K%+8,Y
 AND #127
 RTS

.MAS3

 LDA K%+1,Y
 JSR SQUA2
 STA R
 LDA K%+4,Y
 JSR SQUA2
 ADC R
 BCS MA30
 STA R
 LDA K%+7,Y
 JSR SQUA2
 ADC R
 BCC P%+4

.MA30

 LDA #&FF
 RTS

.wearedocked

 LDA #205
 JSR DETOK
 JSR TT67_copy \ Is TT67 in source, needs to point to high memory version
 JMP st6+3

.st4

 LDX #9
 CMP #25
 BCS st3
 DEX
 CMP #10
 BCS st3
 DEX
 CMP #2
 BCS st3
 DEX
 BNE st3

.STATUS

 LDA #8
 JSR TRADEMODE
 JSR TT111
 LDA #7

IF _IB_DISK

 STA XC

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 JSR DOXC

ENDIF

 LDA #126
 JSR NLIN3
 LDA #15
 LDY QQ12
 BNE wearedocked
 LDA #230
 LDY JUNK
 LDX FRIN+2,Y
 BEQ st6
 LDY ENERGY
 CPY #128
 ADC #1

.st6

 JSR plf
 LDA #125
 JSR spc
 LDA #19
 LDY FIST
 BEQ st5
 CPY #50
 ADC #1

.st5

 JSR plf
 LDA #16
 JSR spc
 LDA TALLY+1
 BNE st4
 TAX
 LDA TALLY
 LSR A
 LSR A
 INX
 LSR A
 BNE P%-2

.st3

 TXA
 CLC
 ADC #21
 JSR plf
 LDA #18
 JSR plf2
 LDA ESCP
 BEQ P%+7
 LDA #112
 JSR plf2
 LDA BST
 BEQ P%+7
 LDA #111
 JSR plf2
 LDA ECM
 BEQ P%+7
 LDA #&6C
 JSR plf2
 LDA #113
 STA XX4

.stqv

 TAY
 LDX BOMB-113,Y
 BEQ P%+5
 JSR plf2
 INC XX4
 LDA XX4
 CMP #117
 BCC stqv
 LDX #0

.st

 STX CNT
 LDY LASER,X
 BEQ st1
 TXA
 CLC
 ADC #96
 JSR spc
 LDA #103
 LDX CNT
 LDY LASER,X
 CPY #128+POW
 BNE P%+4
 LDA #104
 CPY #Armlas
 BNE P%+4
 LDA #117
 CPY #Mlas
 BNE P%+4
 LDA #118
 JSR plf2

.st1

 LDX CNT
 INX
 CPX #4
 BCC st
 RTS

.plf2

 JSR plf
 LDA #6

IF _IB_DISK

 STA XC
 RTS

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 JMP DOXC

ENDIF

.MVT3

 LDA K+3
 STA S
 AND #128
 STA T
 EOR INWK+2,X
 BMI MV13
 LDA K+1
 CLC
 ADC INWK,X
 STA K+1
 LDA K+2
 ADC INWK+1,X
 STA K+2
 LDA K+3
 ADC INWK+2,X
 AND #127
 ORA T
 STA K+3
 RTS

.MV13

 LDA S
 AND #127
 STA S
 LDA INWK,X
 SEC
 SBC K+1
 STA K+1
 LDA INWK+1,X
 SBC K+2
 STA K+2
 LDA INWK+2,X
 AND #127
 SBC S
 ORA #128
 EOR T
 STA K+3
 BCS MV14
 LDA #1
 SBC K+1
 STA K+1
 LDA #0
 SBC K+2
 STA K+2
 LDA #0
 SBC K+3
 AND #127
 ORA T
 STA K+3

.MV14

 RTS

.MVS5

 LDA INWK+1,X
 AND #127
 LSR A
 STA T
 LDA INWK,X
 SEC
 SBC T
 STA R
 LDA INWK+1,X
 SBC #0
 STA S
 LDA INWK,Y
 STA P
 LDA INWK+1,Y
 AND #128
 STA T
 LDA INWK+1,Y
 AND #127
 LSR A
 ROR P
 LSR A
 ROR P
 LSR A
 ROR P
 LSR A
 ROR P
 ORA T
 EOR RAT2
 STX Q
 JSR ADD
 STA K+1
 STX K
 LDX Q
 LDA INWK+1,Y
 AND #127
 LSR A
 STA T
 LDA INWK,Y
 SEC
 SBC T
 STA R
 LDA INWK+1,Y
 SBC #0
 STA S
 LDA INWK,X
 STA P
 LDA INWK+1,X
 AND #128
 STA T
 LDA INWK+1,X
 AND #127
 LSR A
 ROR P
 LSR A
 ROR P
 LSR A
 ROR P
 LSR A
 ROR P
 ORA T
 EOR #128
 EOR RAT2
 STX Q
 JSR ADD
 STA INWK+1,Y
 STX INWK,Y
 LDX Q
 LDA K
 STA INWK,X
 LDA K+1
 STA INWK+1,X
 RTS

.TENS

 EQUD &E87648

.pr2

 LDA #3
 LDY #0

.TT11

 STA U
 LDA #0
 STA K
 STA K+1
 STY K+2
 STX K+3

.BPRNT

 LDX #11
 STX T
 PHP
 BCC TT30
 DEC T
 DEC U

.TT30

 LDA #11
 SEC
 STA XX17
 SBC U
 STA U
 INC U
 LDY #0
 STY S
 JMP TT36

.TT35

 ASL K+3
 ROL K+2
 ROL K+1
 ROL K
 ROL S
 LDX #3

.tt35

 LDA K,X
 STA XX15,X
 DEX
 BPL tt35
 LDA S
 STA XX15+4
 ASL K+3
 ROL K+2
 ROL K+1
 ROL K
 ROL S
 ASL K+3
 ROL K+2
 ROL K+1
 ROL K
 ROL S
 CLC
 LDX #3

.tt36

 LDA K,X
 ADC XX15,X
 STA K,X
 DEX
 BPL tt36
 LDA XX15+4
 ADC S
 STA S
 LDY #0

.TT36

 LDX #3
 SEC

.tt37

 LDA K,X
 SBC TENS,X
 STA XX15,X
 DEX
 BPL tt37
 LDA S
 SBC #23
 STA XX15+4
 BCC TT37
 LDX #3

.tt38

 LDA XX15,X
 STA K,X
 DEX
 BPL tt38
 LDA XX15+4
 STA S
 INY
 JMP TT36

.TT37

 TYA
 BNE TT32
 LDA T
 BEQ TT32
 DEC U
 BPL TT34
 LDA #32
 BNE tt34

.TT32

 LDY #0
 STY T
 CLC
 ADC #B

.tt34

 JSR TT26

.TT34

 DEC T
 BPL P%+4
 INC T
 DEC XX17
 BMI rT10
 BNE P%+10
 PLP
 BCC P%+7
 LDA #&2E
 JSR TT26
 JMP TT35

.rT10

 RTS

.DTW1

 EQUB 32

.DTW2

IF _IB_DISK

 EQUB 0

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 EQUB &FF

ENDIF

.DTW3

 EQUB 0

.DTW4

 SKIP 1

.DTW5

 EQUB 0

.DTW6

 EQUB 0

.DTW8

 EQUB &FF

.FEED

 LDA #12
 EQUB &2C

.MT16

 LDA #65

 DTW7 = MT16+1


 \ New TT26 entry for right justified text

.DASC 

.TT26

 STX SC
 LDX #&FF
 STX DTW8
 CMP #'.'
 BEQ DA8
 CMP #':'
 BEQ DA8
 CMP #10
 BEQ DA8
 CMP #12
 BEQ DA8
 CMP #32
 BEQ DA8
 INX

.DA8

 STX DTW2
 LDX SC
 BIT DTW4
 BMI P%+5
 JMP CHPR
 BIT DTW4
 BVS P%+6
 CMP #12
 BEQ DA1
 LDX DTW5
 STA BUF,X
 LDX SC
 INC DTW5
 CLC
 RTS

.DA1

 TXA
 PHA
 TYA
 PHA

.DA5

 LDX DTW5
 BEQ DA6+3
 CPX #(LL+1)
 BCC DA6
 LSR SC+1

.DA11

 LDA SC+1
 BMI P%+6
 LDA #64
 STA SC+1
 LDY #(LL-1)

.DAL1

 LDA BUF+LL
 CMP #32
 BEQ DA2

.DAL2

 DEY
 BMI DA11
 BEQ DA11
 LDA BUF,Y
 CMP #32
 BNE DAL2
 ASL SC+1
 BMI DAL2
 STY SC
 LDY DTW5

.DAL6

 LDA BUF,Y
 STA BUF+1,Y
 DEY
 CPY SC
 BCS DAL6
 INC DTW5
\LDA #32

.DAL3

 CMP BUF,Y
 BNE DAL1
 DEY
 BPL DAL3
 BMI DA11

.DA2

 LDX #LL
 JSR DAS1
 LDA #12
 JSR CHPR
 LDA DTW5
\CLC 
 SBC #LL
 STA DTW5
 TAX
 BEQ DA6+3
 LDY #0
 INX

.DAL4

 LDA BUF+LL+1,Y
 STA BUF,Y
 INY
 DEX
 BNE DAL4
 BEQ DA5

.DAS1

 LDY #0

.DAL5

 LDA BUF,Y
 JSR CHPR
 INY
 DEX
 BNE DAL5

.dec27

 RTS

.DA6

 JSR DAS1
 STX DTW5
 PLA
 TAY
 PLA
 TAX
 LDA #12

.DA7

 EQUB &2C

.BELL

 LDA #7
 JMP CHPR
 \..........
 \ ............... DIALS .......................... 

.DIALS

 LDY #0
 LDA #210
 STA K
 LDX #RED
 LDA MCNT
 AND #8
 AND FLH
 BEQ P%+4
 LDX #WHITE
 STX K+2
 LDA DELTA
 JSR DIS2
 LDA #WHITE
 STA COL
 LDA ALP1
 LSR A
 BIT ALP2+1
 JSR DIS5
 LDA BET1
 ASL A
 BIT BET2
 JSR DIS5
 LDA ENERGY
 LSR A

.DIL1

 STA K+1
 JSR DIS2
 LDA K+1
 SEC
 SBC #32
 BCS P%+4
 LDA #0
 CPY #7
 BNE DIL1
 LDA #16
 STA K
 LDA FSH
 JSR DIS1
 LDA ASH
 JSR DIS1
 LDA QQ14
 JSR DIS1+2
 LDA ALTIT
 JSR DIS1
 LDA CABTMP
 JSR DIS1
 LDA GNTMP
 JSR DIS1
 JMP COMPAS
 \....

.DIS1

 LSR A
 LSR A
 LSR A

.DIS2

 CMP #32
 BCC P%+4
 LDA #31
 LDX dialc1,Y
 CMP dialle,Y
 BCC DI3
 LDX dialc2,Y

.DI3

 CPX #&FF
 BNE DI4
 LDX K+2
 CLC

.DI4

 INY
 PHA
 CMP dials-1,Y
 BNE DI6
 TXA
 CMP dialc-1,Y
 BEQ DI8

.DI6

 TXA
 LDX dialc-1,Y
 STA dialc-1,Y
 LDA dials-1,Y
 JSR DIS7
 LDX dialc-1,Y
 PLA
 STA dials-1,Y

.DIS7

 STX COL
 LDX dialY-1,Y
 STX Y1
 LDX K
 STX X1
 CLC
 ADC K
 AND #&FE
 STA X2
 JSR P%+3
 JMP MSBARS

.DI8

 PLA

.DIR1

 RTS
 \....

.DIS5

 BPL DI9
 EOR #&FF
 CLC
 ADC #1

.DI9

 INY
 CLC
 ADC #224
 CMP dials-1,Y
 BEQ DIR1
 PHA
 LDA dials-1,Y
 BEQ P%+5
 JSR DIS6
 PLA
 STA dials-1,Y

.DIS6

 STA X1
 LDA dialY-1,Y
 STA Y1
 CLC
 ADC #6
 STA Y2
 JMP VLOIN
 \....
 \...

.dialY

 EQUB &89
 EQUB &90
 EQUB &98
 EQUB &B9
 EQUB &B1
 EQUB &A9
 EQUB &A1
 EQUB &89
 EQUB &91
 EQUB &99
 EQUB &B1
 EQUB &A1
 EQUB &A9

.dialle

 EQUB 28
 EQUB  0
 EQUB  0
 EQUB 16
 EQUB  0
 EQUB  0
 EQUB  0
 EQUB  8
 EQUB  8
 EQUB  0
 EQUB  8
 EQUB 24
 EQUB 24

.dialc1

 EQUB WHITE
 EQUB WHITE
 EQUB WHITE
 EQUB &FF
 EQUB VIOLET
 EQUB VIOLET
 EQUB VIOLET
 EQUB &FF
 EQUB &FF
 EQUB GREEN
 EQUB &FF
 EQUB BLUE
 EQUB BLUE

.dialc2

 EQUB &FF
 EQUB WHITE
 EQUB WHITE
 EQUB VIOLET
 EQUB VIOLET
 EQUB VIOLET
 EQUB VIOLET
 EQUB VIOLET
 EQUB VIOLET
 EQUB GREEN
 EQUB GREEN
 EQUB &FF
 EQUB &FF
 \.......

.ESCAPE

 JSR RES2
 LDX #CYL
 STX TYPE
 JSR FRS1
 BCS ES1
 LDX #CYL2
 JSR FRS1

.ES1

 LDA #8
 STA INWK+27
 LDA #&C2
 STA INWK+30
 LSR A
 STA INWK+32

.ESL1

 JSR MVEIT
 JSR LL9
 DEC INWK+32
 BNE ESL1
 JSR SCAN
 LDA #0
 LDX #16

.ESL2

 STA QQ20,X
 DEX
 BPL ESL2
 STA FIST
 STA ESCP
\LDA TRIBBLE
\ORA TRIBBLE+1
\BEQ nosurviv
\JSR DORND
\AND #7
\ORA #1
\STA TRIBBLE
\LDA #0
\STA TRIBBLE+1
 \.nosurviv
 LDA #70
 STA QQ14
 JMP GOIN

.HME2

\LDA #CYAN
\JSR DOCOL
 LDA #14
 JSR DETOK
 JSR TT103
 JSR TT81
 LDA #0
 STA XX20

.HME3

 JSR MT14
 JSR cpl
 LDX DTW5
 LDA INWK+5,X
 CMP #13
 BNE HME6

.HME4

 DEX
 LDA INWK+5,X
 ORA #32
 CMP BUF,X
 BEQ HME4
 TXA
 BMI HME5

.HME6

 JSR TT20
 INC XX20
 BNE HME3
 JSR TT111
 JSR TT103
 JSR BOOP \ @@
 LDA #215
 JMP DETOK
 \Not found

.HME5

 LDA QQ15+3
 STA QQ9
 LDA QQ15+1
 STA QQ10
 JSR TT111
 JSR TT103
 JSR MT15
 JMP T95

\ ******************************************************************************
\
\ Save ELTB.bin
\
\ ******************************************************************************

 PRINT "ELITE B"
 PRINT "Assembled at ", ~CODE_B%
 PRINT "Ends at ", ~P%
 PRINT "Code size is ", ~(P% - CODE_B%)
 PRINT "Execute at ", ~LOAD%
 PRINT "Reload at ", ~LOAD_B%

 PRINT "S.ELTB ", ~CODE_B%, " ", ~P%, " ", ~LOAD%, " ", ~LOAD_B%
 SAVE "versions/apple/3-assembled-output/ELTB.bin", CODE_B%, P%, LOAD%

\ ******************************************************************************
\
\ ELITE C FILE
\
\ Produces the binary file ELTC.bin that gets loaded by elite-bcfs.asm.
\
\ ******************************************************************************

 CODE_C% = P%

 LOAD_C% = LOAD% +P% - CODE%

.TA352

 LDA INWK
 ORA INWK+3
 ORA INWK+6
 BNE TA872
 LDA #80
 JSR OOPS

.TA872

 LDX #PLT
 BNE TA353

.TA34

 LDA #0
 JSR MAS4
 BEQ P%+5
 JMP TN4 \fix
 JSR TA873
 JSR EXNO3
 LDA #250
 JMP OOPS

.TA18 \ msl

 LDA ECMA
 BNE TA352
 LDA INWK+32
 ASL A
 BMI TA34
 LSR A
 TAX
 LDA UNIV,X
 STA V
 LDA UNIV+1,X
 JSR VCSUB
 LDA K3+2
 ORA K3+5
 ORA K3+8
 AND #127
 ORA K3+1
 ORA K3+4
 ORA K3+7
 BNE TA64
 LDA INWK+32
 CMP #&82
 BEQ TA352
 LDY #31
 LDA (V),Y
 BIT M32+1
 BNE TA35
 ORA #128
 STA (V),Y

.TA35

 LDA INWK
 ORA INWK+3
 ORA INWK+6
 BNE TA87
 LDA #80
 JSR OOPS

.TA87

 LDA INWK+32
 AND #127
 LSR A
 TAX

.TA353

 JSR EXNO2

.TA873

 ASL INWK+31
 SEC
 ROR INWK+31

.TA1

 RTS

.TA64

 JSR DORND
 CMP #16
 BCS TA19S

.M32

 LDY #32
 LDA (V),Y
 LSR A
 BCS P%+5

.TA19S

 JMP TA19
 JMP ECBLB2

.TACTICS

 LDA #3
 STA RAT
 LDA #4
 STA RAT2
 LDA #22
 STA CNT2
 CPX #MSL
 BEQ TA18
 CPX #SST
 BNE TA13
 LDA NEWB
 AND #4
 BNE TN5
 LDA MANY+SHU+1
 BNE TA1
 JSR DORND
 CMP #253
 BCC TA1
 AND #1
 ADC #SHU-1
 TAX
 BNE TN6

.TN5

 JSR DORND
 CMP #240
 BCC TA1
 LDA MANY+COPS
 CMP #4 \ <<
 BCS TA22
 LDX #COPS

.TN6

 LDA #&F1
 JMP SFS1

.TA13

 CPX #HER
 BNE TA17
 JSR DORND
 CMP #200
 BCC TA22
 LDX #0
 STX INWK+32
 LDX #&24
 STX NEWB
 AND #3
 ADC #SH3
 TAX
 JSR TN6
 LDA #0
 STA INWK+32
 RTS

.TA17

 LDY #14
 LDA INWK+35
 CMP (XX0),Y
 BCS TA21
 INC INWK+35

.TA21

 CPX #TGL
 BNE TA14
 LDA MANY+THG
 BNE TA14
 LSR INWK+32
 ASL INWK+32
 LSR INWK+27

.TA22

 RTS

.TA14

 JSR DORND
 LDA NEWB
 LSR A
 BCC TN1
 CPX #50
 BCS TA22

.TN1

 LSR A
 BCC TN2
 LDX FIST
 CPX #40
 BCC TN2
 LDA NEWB
 ORA #4
 STA NEWB
 LSR A
 LSR A

.TN2

 LSR A
 BCS TN3
 LSR A
 LSR A
 BCC GOPL
 JMP DOCKIT

.GOPL

 JSR SPS1
 JMP TA151

.TN3

 LSR A
 BCC TN4
 LDA SSPR
 BEQ TN4
 LDA INWK+32
 AND #129
 STA INWK+32

.TN4

 LDX #8

.TAL1

 LDA INWK,X
 STA K3,X
 DEX
 BPL TAL1

.TA19

 JSRTAS2
 \XX15 = r~96
 LDY #10
 JSR TAS3
 STA CNT
 LDA TYPE
 CMP #MSL
 BNE P%+5
 JMP TA20
 CMP #ANA
 BNE TN7
 JSR DORND
 CMP #200
 BCC TN7
 JSR DORND
 LDX #WRM
 CMP #100
 BCS P%+4
 LDX #SH3
 JMP TN6

.TN7

 JSR DORND
 CMP #250
 BCC TA7
 JSR DORND
 ORA #&68
 STA INWK+29

.TA7 \ VRol

 LDY #14
 LDA (XX0),Y
 LSR A
 CMP INWK+35
 BCC TA3
 LSR A
 LSR A
 CMP INWK+35
 BCC ta3
 JSR DORND
 CMP #230
 BCC ta3
 LDX TYPE
 LDA E%-1,X
 BPL ta3
 LDA NEWB
 AND #&F0
 STA NEWB
 LDY #36
 STA (INF),Y
 \**
 LDA #0
 STA INWK+32
 JMP SESCP

.ta3

 LDA INWK+31
 AND #7
 BEQ TA3
 STA T
 JSR DORND
 AND #31
 CMP T
 BCS TA3
 LDA ECMA
 BNE TA3
 DEC INWK+31
 LDA TYPE
 CMP #THG
 BNE TA16
 LDX #TGL
 LDA INWK+32
 JMP SFS1

.TA16

 JMP SFRMIS

.TA3

 LDA #0
 JSR MAS4
 AND #&E0
 BNE TA4
 LDX CNT \ BPLTA4
 CPX #160
 BCC TA4
 LDY #19
 LDA (XX0),Y
 AND #&F8
 BEQ TA4
 LDA INWK+31
 ORA #64
 STA INWK+31
 CPX #163
 BCC TA4
\LDY #19
 LDA (XX0),Y
 LSR A
 JSR OOPS
 DEC INWK+28
 LDA ECMA
 BNE TA9-1
 JSR LASNOISE \ @@
 \frLs

.TA4

 LDA INWK+7
 CMP #3
 BCS TA5
 LDA INWK+1
 ORA INWK+4
 AND #&FE
 BEQ TA15

.TA5

 JSR DORND
 ORA #128
 CMP INWK+32
 BCS TA15

.TA20

 JSR TAS6
 LDA CNT
 EOR #128

.TA152

 STA CNT

.TA15 \ ^XX15

 LDY #16
 JSR TAS3
 TAX
 EOR #128
 AND #128
 STA INWK+30
 TXA
 ASL A
 CMP RAT2
 BCC TA11
 LDA RAT
 ORA INWK+30
 STA INWK+30

.TA11

 LDA INWK+29
 ASL A
 CMP #32
 BCS TA6
 LDY #22
 JSR TAS3
 TAX
 EOR INWK+30
 AND #128
 EOR #128
 STA INWK+29
 TXA
 ASL A
 CMP RAT2
 BCC TA12
 LDA RAT
 ORA INWK+29
 STA INWK+29

.TA12

.TA6

 LDA CNT
 BMI TA9
 CMP CNT2
 BCC TA9

.PH10E

 LDA #3
 STA INWK+28
 RTS

.TA9

 AND #127
 CMP #18
 BCC TA10
 LDA #&FF
 LDX TYPE
 CPX #MSL
 BNE P%+3
 ASL A
 STA INWK+28

.TA10

 RTS

.TA151

 LDY #10
 JSR TAS3
 CMP #&98
 BCC ttt
 LDX #0
 STX RAT2

.ttt

 JMP TA152

.DOCKIT

 LDA #6
 STA RAT2
 LSR A
 STA RAT
 LDA #&1D
 STA CNT2
 LDA SSPR
 BNE P%+5

.GOPLS

 JMP GOPL
 JSR VCSU1 \K3 = ship-spc.stn
 LDA K3+2
 ORA K3+5
 ORA K3+8
 AND #127
 BNE GOPLS
 JSR TA2
 LDA Q
 STA K
 JSR TAS2
 LDY #10
 JSR TAS4
 BMI PH1
 CMP #&23
 BCC PH1 \ fss.r
 LDY #10
 JSR TAS3
 CMP #&A2 \ fpl.r
 BCS PH3
 LDA K
\BEQ PH10
 CMP #&9D
 BCC PH2
 LDA TYPE
 BMI PH3

.PH2

 JSR TAS6
 JSR TA151

.PH22

 LDX #0
 STX INWK+28
 INX
 STX INWK+27
 RTS

.PH1

 JSR VCSU1
 JSR DCS1
 JSR DCS1
 JSR TAS2
 JSR TAS6
 JMP TA151 \head for sp+

.TN11

 INC INWK+28
 LDA #127
 STA INWK+29
 BNE TN13

.PH3

 LDX #0
 STX RAT2
 STX INWK+30
 LDA TYPE
 BPL PH32
 EOR XX15
 EOR XX15+1
 ASL A
 LDA #2
 ROR A
 STA INWK+29
 LDA XX15
 ASL A
 CMP #12
 BCS PH22
 LDA XX15+1
 ASL A
 LDA #2
 ROR A
 STA INWK+30
 LDA XX15+1
 ASL A
 CMP #12
 BCS PH22

.PH32

 STX INWK+29
 LDA INWK+22
 STA XX15
 LDA INWK+24
 STA XX15+1
 LDA INWK+26
 STA XX15+2
 LDY #16
 JSR TAS4
 ASL A
 CMP #&42
 BCS TN11
 JSR PH22

.TN13

 LDA K3+10
 BNE TNRTS
 ASL NEWB
 SEC
 ROR NEWB

.TNRTS

 RTS \Docked

.VCSU1

 LDA #((K%+NI%)MOD 256)
 STA V
 LDA #((K%+NI%)DIV 256)

.VCSUB

 STA V+1
 LDY #2
 JSR TAS1
 LDY #5
 JSR TAS1
 LDY #8

.TAS1

 LDA (V),Y
 EOR #128
 STA K+3
 DEY
 LDA (V),Y
 STA K+2
 DEY
 LDA (V),Y
 STA K+1
 STY U
 LDX U
 JSR MVT3
 LDY U
 STA K3+2,X
 LDA K+2
 STA K3+1,X
 LDA K+1
 STA K3,X
 RTS

.TAS4

 LDX K%+NI%,Y
 STX Q
 LDA XX15
 JSR MULT12
 LDX K%+NI%+2,Y
 STX Q
 LDA XX15+1
 JSR MAD
 STA S
 STX R
 LDX K%+NI%+4,Y
 STX Q
 LDA XX15+2
 JMP MAD

.TAS6

 LDA XX15
 EOR #128
 STA XX15
 LDA XX15+1
 EOR #128
 STA XX15+1
 LDA XX15+2
 EOR #128
 STA XX15+2
 RTS

.DCS1

 JSR P%+3
 LDA K%+NI%+10
 LDX #0
 JSR TAS7
 LDA K%+NI%+12
 LDX #3
 JSR TAS7
 LDA K%+NI%+14
 LDX #6

.TAS7

 ASL A
 STA R
 LDA #0
 ROR A
 EOR #128
 EOR K3+2,X
 BMI TS71
 LDA R
 ADC K3,X
 STA K3,X
 BCC TS72
 INC K3+1,X

.TS72

 RTS

.TS71

 LDA K3,X
 SEC
 SBC R
 STA K3,X
 LDA K3+1,X
 SBC #0
 STA K3+1,X
 BCS TS72
 LDA K3,X
 EOR #&FF
 ADC #1
 STA K3,X
 LDA K3+1,X
 EOR #&FF
 ADC #0
 STA K3+1,X
 LDA K3+2,X
 EOR #128
 STA K3+2,X
 JMP TS72

.HITCH

 CLC
 LDA INWK+8
 BNE HI1
 LDA TYPE
 BMI HI1
 LDA INWK+31
 AND #32
 ORA INWK+1
 ORA INWK+4
 BNE HI1
 LDA INWK
 JSR SQUA2
 STA S
 LDA P
 STA R
 LDA INWK+3
 JSR SQUA2
 TAX
 LDA P
 ADC R
 STA R
 TXA
 ADC S
 BCS TN10
 STA S
 LDY #2
 LDA (XX0),Y
 CMP S
 BNE HI1
 DEY
 LDA (XX0),Y
 CMP R

.HI1

 RTS

.TN10

 CLC
 RTS

.FRS1

 JSR ZINF
 LDA #28
 STA INWK+3
 LSR A
 STA INWK+6
 LDA #128
 STA INWK+5
 LDA MSTG
 ASL A
 ORA #128
 STA INWK+32

.fq1

 LDA #96
 STA INWK+14
 ORA #128
 STA INWK+22
 LDA DELTA
 ROL A
 STA INWK+27
 TXA
 JMP NWSHP

.FRMIS

 LDX #MSL
 JSR FRS1
 BCC FR1
 LDX MSTG
 JSR GINF
 LDA FRIN,X
 JSR ANGRY
 LDY #BLACK
 JSR ABORT
 DEC NOMSL
 LDY #120
 JSR SOHISS \ @@

.ANGRY

 CMP #SST
 BEQ AN2
 LDY #36
 LDA (INF),Y
 AND #32
 BEQ P%+5
 JSR AN2
 LDY #32
 LDA (INF),Y
 BEQ HI1
 ORA #128
 STA (INF),Y
 LDY #28
 LDA #2
 STA (INF),Y
 ASL A
 LDY #30
 STA (INF),Y
 LDA TYPE
 CMP #CYL
 BCC AN3
 LDY #36
 LDA (INF),Y
 ORA #4
 STA (INF),Y

.AN3

 RTS

.AN2

 LDA K%+NI%+36
 ORA #4
 STA K%+NI%+36
 RTS

.FR1

 LDA #201
 JMP MESS

.SESCP

 LDX #ESC
 LDA #&FE \SFS1- in EliteI

.SFS1

 STA T1
 TXA
 PHA
 LDA XX0
 PHA
 LDA XX0+1
 PHA
 LDA INF
 PHA
 LDA INF+1
 PHA
 LDY #NI%-1

.FRL2

 LDA INWK,Y
 STA XX3,Y
 LDA (INF),Y
 STA INWK,Y
 DEY
 BPL FRL2
 LDA TYPE
 CMP #SST
 BNE rx
 TXA
 PHA
 LDA #32
 STA INWK+27
 LDX #0
 LDA INWK+10
 JSR SFS2
 LDX #3
 LDA INWK+12
 JSR SFS2
 LDX #6
 LDA INWK+14
 JSR SFS2
 PLA
 TAX

.rx

 LDA T1
 STA INWK+32
 LSR INWK+29
 ASL INWK+29
 TXA
 CMP #SPL+1
 BCS NOIL
 CMP #PLT
 BCC NOIL
 PHA
 JSR DORND
 ASL A
 STA INWK+30
 TXA
 AND #15
 STA INWK+27
 LDA #&FF
 ROR A
 STA INWK+29
 PLA

.NOIL

 JSR NWSHP
 PLA
 STA INF+1
 PLA
 STA INF
 LDX #NI%-1

.FRL3

 LDA XX3,X
 STA INWK,X
 DEX
 BPL FRL3
 PLA
 STA XX0+1
 PLA
 STA XX0
 PLA
 TAX
 RTS

.SFS2

 ASL A
 STA R
 LDA #0
 ROR A
 JMP MVT1

.LL164

 LDA #255

.BEEPL7

 STA T2
 TAX
 LDY #90
 JSR SOBLIP
 LDA T2
 SBC #10
 CMP #170
 BCS BEEPL7 \ @@ \ =  = Do hypcolours
 LDA #4
 JSR HFS2
 \ =  = Do hypcolours
 RTS

.LAUN

 LDY #0
 JSR SOHISS
 JSR SOHISS \ @@
 LDA #8

.HFS2

 STA STP
 LDA QQ11
 PHA
 LDA #0
 JSR TT66
 PLA
 STA QQ11

.HFS1

 LDX #X
 STX K3
 LDX #Y
 STX K4
 LDX #0
 STX XX4
 STX K3+1
 STX K4+1

.HFL5

 JSR HFL1
 INC XX4
 LDX XX4
 CPX #8
 BNE HFL5
 RTS

.HFL1

 LDA XX4
 AND #7
 CLC
 ADC #8
 STA K

.HFL2

 LDY #10
 JSR SOHISS \ @@
 LDA #1
 STA LSP
 JSR CIRCLE2
 ASL K
 BCS HF8
 LDA K
 CMP #160
 BCC HFL2

.HF8

 RTS

.STARS2

 LDA #0
 CPX #2
 ROR A
 STA RAT
 EOR #128
 STA RAT2
 JSR ST2
 LDY NOSTM

.STL2

 LDA SZ,Y
 STA ZZ
 LSR A
 LSR A
 LSR A
 JSR DV41
 LDA P
 STA newzp
 EOR RAT2
 STA S
 LDA SXL,Y
 STA P
 LDA SX,Y
 STA X1
 JSR ADD \<<--
 STA S
 STX R
 LDA SY,Y
 STA Y1
 EOR BET2
 LDX BET1
 JSR MULTS-2
 JSR ADD
 STX XX
 STA XX+1
 LDX SYL,Y
 STX R
 LDX Y1
 STX S
 LDX BET1
 EOR BET2+1
 JSR MULTS-2
 JSR ADD
 STX YY
 STA YY+1
 LDX ALP1
 EOR ALP2
 JSR MULTS-2
 STA Q
 LDA XX
 STA R
 LDA XX+1
 STA S
 EOR #128
 JSR MAD
 STA XX+1
 TXA
 STA SXL,Y
 LDA YY
 STA R
 LDA YY+1
 STA S
 JSR MAD
 STA S
 STX R
 LDA #0
 STA P
 LDA ALPHA
 JSR PIX1
 LDA XX+1
 STA SX,Y
 STA X1
 AND #127
 EOR #&7F
 CMP newzp
 BCC KILL2
 BEQ KILL2
 LDA YY+1
 STA SY,Y
 STA Y1
 AND #127
 CMP #116
 BCS ST5

.STC2

 JSR PIXEL2
 DEY
 BEQ ST2
 JMP STL2 \<<--

.ST2

 LDA ALPHA
 EOR RAT
 STA ALPHA
 LDA ALP2
 EOR RAT
 STA ALP2
 EOR #128
 STA ALP2+1
 LDA BET2
 EOR RAT
 STA BET2
 EOR #128
 STA BET2+1
 RTS

.KILL2

 JSR DORND
 STA Y1
 STA SY,Y
 LDA #115
 ORA RAT
 STA X1
 STA SX,Y
 BNE STF1

.ST5

 JSR DORND
 STA X1
 STA SX,Y
 LDA #110
 ORA ALP2+1
 STA Y1
 STA SY,Y

.STF1

 JSR DORND
 ORA #8
 STA ZZ
 STA SZ,Y
 BNE STC2

INCLUDE "library/common/main/subroutine/mu5.asm"
INCLUDE "library/common/main/subroutine/mult3.asm"
INCLUDE "library/common/main/subroutine/mls2.asm"
INCLUDE "library/common/main/subroutine/mls1.asm"
INCLUDE "library/common/main/subroutine/mu6.asm"
INCLUDE "library/common/main/subroutine/squa.asm"
INCLUDE "library/common/main/subroutine/squa2.asm"
INCLUDE "library/common/main/subroutine/mu1.asm"
INCLUDE "library/common/main/subroutine/mlu1.asm"
INCLUDE "library/common/main/subroutine/mlu2.asm"
INCLUDE "library/common/main/subroutine/multu.asm"
INCLUDE "library/common/main/subroutine/mu11.asm"
INCLUDE "library/common/main/subroutine/fmltu2.asm"
INCLUDE "library/common/main/subroutine/fmltu.asm"
INCLUDE "library/common/main/subroutine/mltu2.asm"
INCLUDE "library/common/main/subroutine/mut3.asm"
INCLUDE "library/common/main/subroutine/mut2.asm"
INCLUDE "library/common/main/subroutine/mut1.asm"
INCLUDE "library/common/main/subroutine/mult1.asm"
INCLUDE "library/common/main/subroutine/mult12.asm"
INCLUDE "library/common/main/subroutine/tas3.asm"
INCLUDE "library/common/main/subroutine/mad.asm"
INCLUDE "library/common/main/subroutine/add.asm"
INCLUDE "library/common/main/subroutine/tis1.asm"
INCLUDE "library/common/main/subroutine/dv42.asm"
INCLUDE "library/common/main/subroutine/dv41.asm"
INCLUDE "library/advanced/main/subroutine/dvid4.asm"
INCLUDE "library/common/main/subroutine/dvid3b2.asm"
INCLUDE "library/common/main/subroutine/cntr.asm"
INCLUDE "library/common/main/subroutine/bump2.asm"
INCLUDE "library/common/main/subroutine/redu2.asm"
INCLUDE "library/common/main/subroutine/lasli.asm"
INCLUDE "library/enhanced/main/subroutine/pdesc.asm"
INCLUDE "library/enhanced/main/subroutine/brief2.asm"
INCLUDE "library/enhanced/main/subroutine/brp.asm"
INCLUDE "library/enhanced/main/subroutine/brief3.asm"
INCLUDE "library/enhanced/main/subroutine/debrief2.asm"
INCLUDE "library/enhanced/main/subroutine/debrief.asm"
INCLUDE "library/advanced/main/subroutine/tbrief.asm"
INCLUDE "library/enhanced/main/subroutine/brief.asm"
INCLUDE "library/enhanced/main/subroutine/bris.asm"

\ ******************************************************************************
\
\       Name: PAUSE
\       Type: Subroutine
\   Category: Missions
\    Summary: Wait until a key is pressed for the Constrictor mission briefing
\
\ ******************************************************************************

.PAUSE

 JSR PAUSE2             \ ???

\ ******************************************************************************
\
\       Name: PAS1
\       Type: Subroutine
\   Category: Missions
\    Summary: Scan the keyboard for the Constrictor mission briefing
\
\ ******************************************************************************

.PAS1

 LDA #1                 \ ???
 JMP TT66

INCLUDE "library/enhanced/main/subroutine/mt23.asm"
INCLUDE "library/enhanced/main/subroutine/mt29.asm"
INCLUDE "library/enhanced/main/subroutine/pause2.asm"
INCLUDE "library/common/main/subroutine/ginf.asm"
INCLUDE "library/common/main/subroutine/ping.asm"
INCLUDE "library/common/main/subroutine/delay.asm"
INCLUDE "library/enhanced/main/variable/mtin.asm"

\ ******************************************************************************
\
\ Save ELTC.bin
\
\ ******************************************************************************

 PRINT "ELITE C"
 PRINT "Assembled at ", ~CODE_C%
 PRINT "Ends at ", ~P%
 PRINT "Code size is ", ~(P% - CODE_C%)
 PRINT "Execute at ", ~LOAD%
 PRINT "Reload at ", ~LOAD_C%

 PRINT "S.ELTC ", ~CODE_C%, " ", ~P%, " ", ~LOAD%, " ", ~LOAD_C%
 SAVE "versions/apple/3-assembled-output/ELTC.bin", CODE_C%, P%, LOAD%

\ ******************************************************************************
\
\ ELITE D FILE
\
\ Produces the binary file ELTD.bin that gets loaded by elite-bcfs.asm.
\
\ ******************************************************************************

 CODE_D% = P%

 LOAD_D% = LOAD% + P% - CODE%

INCLUDE "library/master/main/subroutine/scaley.asm"
INCLUDE "library/master/main/subroutine/scaley2.asm"
INCLUDE "library/master/main/subroutine/scalex.asm"
INCLUDE "library/master/main/subroutine/dvloin.asm"
INCLUDE "library/enhanced/main/subroutine/tnpr1.asm"
INCLUDE "library/common/main/subroutine/tnpr.asm"
INCLUDE "library/advanced/main/subroutine/setxc-doxc.asm"
INCLUDE "library/advanced/main/subroutine/setyc-doyc.asm"
INCLUDE "library/advanced/main/subroutine/incyc.asm"
INCLUDE "library/advanced/main/subroutine/trademode.asm"
INCLUDE "library/common/main/subroutine/tt20.asm"
INCLUDE "library/common/main/subroutine/tt54.asm"
INCLUDE "library/common/main/subroutine/tt146.asm"
INCLUDE "library/common/main/subroutine/tt60.asm"
INCLUDE "library/common/main/subroutine/ttx69.asm"
INCLUDE "library/common/main/subroutine/tt69.asm"
INCLUDE "library/common/main/subroutine/tt67.asm"
INCLUDE "library/common/main/subroutine/tt70.asm"
INCLUDE "library/common/main/subroutine/spc.asm"
INCLUDE "library/common/main/subroutine/tt25.asm"
INCLUDE "library/common/main/subroutine/tt24.asm"
INCLUDE "library/common/main/subroutine/tt22.asm"
INCLUDE "library/common/main/subroutine/tt15.asm"
INCLUDE "library/common/main/subroutine/tt14.asm"
INCLUDE "library/common/main/subroutine/tt128.asm"
INCLUDE "library/common/main/subroutine/tt219.asm"
INCLUDE "library/common/main/subroutine/gnum.asm"
INCLUDE "library/enhanced/main/subroutine/nwdav4.asm"
INCLUDE "library/common/main/subroutine/tt208.asm"
INCLUDE "library/common/main/subroutine/tt210.asm"
INCLUDE "library/common/main/subroutine/tt213.asm"
INCLUDE "library/common/main/subroutine/tt214.asm"
INCLUDE "library/common/main/subroutine/tt16.asm"
INCLUDE "library/common/main/subroutine/tt103.asm"
INCLUDE "library/common/main/subroutine/tt123.asm"
INCLUDE "library/common/main/subroutine/tt105.asm"
INCLUDE "library/common/main/subroutine/tt23.asm"
INCLUDE "library/common/main/subroutine/tt81.asm"
INCLUDE "library/common/main/subroutine/tt111.asm"
INCLUDE "library/common/main/subroutine/hy6-docked.asm"
INCLUDE "library/common/main/subroutine/hyp.asm"
INCLUDE "library/common/main/subroutine/ww.asm"
INCLUDE "library/enhanced/main/subroutine/ttx110.asm"
INCLUDE "library/common/main/subroutine/ghy.asm"
INCLUDE "library/common/main/subroutine/jmp.asm"
INCLUDE "library/common/main/subroutine/ee3.asm"
INCLUDE "library/common/main/subroutine/pr6.asm"
INCLUDE "library/common/main/subroutine/pr5.asm"
INCLUDE "library/common/main/subroutine/tt147.asm"
INCLUDE "library/common/main/subroutine/prq.asm"
INCLUDE "library/common/main/subroutine/tt151.asm"
INCLUDE "library/common/main/subroutine/tt152.asm"
INCLUDE "library/common/main/subroutine/tt162.asm"
INCLUDE "library/common/main/subroutine/tt160.asm"
INCLUDE "library/common/main/subroutine/tt161.asm"
INCLUDE "library/common/main/subroutine/tt16a.asm"
INCLUDE "library/common/main/subroutine/tt163.asm"
INCLUDE "library/common/main/subroutine/tt167.asm"
INCLUDE "library/common/main/subroutine/var.asm"
INCLUDE "library/common/main/subroutine/hyp1.asm"
INCLUDE "library/common/main/subroutine/gvl.asm"
INCLUDE "library/common/main/subroutine/gthg.asm"
INCLUDE "library/common/main/subroutine/mjp.asm"
INCLUDE "library/common/main/subroutine/tt18.asm"
INCLUDE "library/common/main/subroutine/tt110.asm"
INCLUDE "library/common/main/subroutine/tt114.asm"
INCLUDE "library/common/main/subroutine/lcash.asm"
INCLUDE "library/common/main/subroutine/mcash.asm"
INCLUDE "library/common/main/subroutine/gcash.asm"
INCLUDE "library/common/main/subroutine/gc2.asm"

.bay

 JMP BAY

.EQSHP

 LDA #32
 JSR TRADEMODE
 LDA #12

IF _IB_DISK

 STA XC

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 JSR DOXC

ENDIF

 LDA #207
 JSR spc
 LDA #185
 JSR NLIN3
 LDA #128
 STA QQ17
 JSR INCYC
 LDA tek
 CLC
 ADC #3
 CMP #12
 BCC P%+4
 LDA #14
 STA Q
 STA QQ25
 INC Q
 LDA #70
 SEC
 SBC QQ14
 ASL A
 STA PRXS
 LDX #1

.EQL1

 STX XX13
 JSR TT67
 LDX XX13
 CLC
 JSR pr2
 JSR TT162
 LDA XX13
 CLC
 ADC #&68
 JSR TT27
 LDA XX13
 JSR prx-3
 SEC
 LDA #25

IF _IB_DISK

 STA XC

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 JSR DOXC

ENDIF

 LDA #6
 JSR TT11
 LDX XX13
 INX
 CPX Q
 BCC EQL1
 JSR CLYNS
 LDA #127
 JSR prq
 JSR gnum
 beq bay
 bcs bay
 SBC #0
 PHA
 LDA #2

IF _IB_DISK

 STA XC
 INC YC

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 JSR DOXC
 JSR INCYC

ENDIF

 PLA
 PHA
 JSR eq
 PLA
 BNE et0
 LDX #70
 STX QQ14

.et0

 CMP #1
 BNE et1
 LDX NOMSL
 INX
 LDY #124
 CPX #5
 BCS pres
 STX NOMSL
 JSR msblob
 LDA #1

.et1

 LDY #&6B
 CMP #2
 BNE et2
 LDX #37
 CPX CRGO
 BEQ pres
 STX CRGO

.et2

 CMP #3
 BNE et3
 INY
 LDX ECM
 BNE pres
 DEC ECM

.et3

 CMP #4
 BNE et4
 JSR qv
 LDA #POW
 JSR refund
 LDA #4

.et4

 CMP #5
 BNE et5
 JSR qv
 LDA #POW+128
 JSR refund

.et5

 LDY #&6F
 CMP #6
 BNE et6
 LDX BST
 BEQ ed9

.pres

 STY K
 JSR prx
 JSR MCASH
 LDA K
 JSR spc
 LDA #31
 JSR TT27

.err

 JSR dn2
 JMP BAY

.ed9

 DEC BST

.et6

 INY
 CMP #7
 BNE et7
 LDX ESCP
 BNE pres
 DEC ESCP

.et7

 INY
 CMP #8
 BNE et8
 LDX BOMB
 BNE pres
 LDX #&7F
 STX BOMB

.et8

 INY
 CMP #9
 BNE etA
 LDX ENGY
 BNE pres
 INC ENGY

.etA

 INY
 CMP #10
 BNE etB
 LDX DKCMP
 BNE pres
 DEC DKCMP

.etB 

 INY
 CMP #11
 BNE et9
 LDX GHYP
 BNE pres
 DEC GHYP

.et9

 INY
 CMP #12
 BNE et10
 JSR qv
 LDA #Armlas
 JSR refund

.et10

 INY
 CMP #13
 BNE et11
 JSR qv
 LDA #Mlas
 JSR refund

.et11

 JSR dn
 JMP EQSHP

.dn

 JSR TT162
 LDA #119
 JSR spc

.dn2

 JSR BOOP
 LDY #25
 JMP DELAY

.eq

 JSR prx
 JSR LCASH
 BCS c
 LDA #197
 JSR prq
 JMP err
 SEC
 SBC #1

.prx

 ASL A
 TAY
 LDX PRXS,Y
 LDA PRXS+1,Y
 TAY

.c

 RTS

.qv

 LDA tek
 CMP #8
 BCC P%+7
 LDA #32
 JSR TT66
 LDA #16
 TAY

IF _IB_DISK

 STA YC

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 JSR DOYC

ENDIF

.qv1

 LDA #12

IF _IB_DISK

 STA XC

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 JSR DOXC

ENDIF

 TYA
 CLC
 ADC #B-16
 JSR spc
 LDA YC
 CLC
 ADC #&50
 JSR TT27

IF _IB_DISK

 INC YC

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 JSR INCYC

ENDIF

 LDY YC
 CPY #20
 BCC qv1
 JSR CLYNS

.qv2

 LDA #175
 JSR prq
 JSR TT217
 SEC
 SBC #&30
 CMP #4
 BCC qv3
 JSR CLYNS
 JMP qv2

.qv3

 TAX
 RTS

.hm

 JSR TT103
 JSR TT111
 JSR TT103
 JMP CLYNS
 \ref2
\LDY #187
\JMP pres
 \Belgium

.refund

 STA T1
 LDA LASER,X
 BEQ ref3
\CMP T1
\BEQ ref2
 LDY #4
 CMP #POW
 BEQ ref1
 LDY #5
 CMP #POW+128
 BEQ ref1
 LDY #12 \ 11
 CMP #Armlas
 BEQ ref1
 \Mlas
 LDY #13 \ 12

.ref1

 STX ZZ
 TYA
 JSR prx
 JSR MCASH
 LDX ZZ

.ref3

 LDA T1
 STA LASER,X
 RTS

.PRXS

 EQUW 1
 EQUW 300
 EQUW 4000
 EQUW 6000
 EQUW 4000
 EQUW 10000
 EQUW 5250
 EQUW 10000
 EQUW 9000
 EQUW 15000
 EQUW 10000
 EQUW 50000
 EQUW 60000
 EQUW 8000

\ ******************************************************************************
\
\ Save ELTD.bin
\
\ ******************************************************************************

 PRINT "ELITE D"
 PRINT "Assembled at ", ~CODE_D%
 PRINT "Ends at ", ~P%
 PRINT "Code size is ", ~(P% - CODE_D%)
 PRINT "Execute at ", ~LOAD%
 PRINT "Reload at ", ~LOAD_D%

 PRINT "S.ELTD ", ~CODE_D%, " ", ~P%, " ", ~LOAD%, " ", ~LOAD_D%
 SAVE "versions/apple/3-assembled-output/ELTD.bin", CODE_D%, P%, LOAD%

\ ******************************************************************************
\
\ ELITE E FILE
\
\ Produces the binary file ELTE.bin that gets loaded by elite-bcfs.asm.
\
\ ******************************************************************************

 CODE_E% = P%

 LOAD_E% = LOAD% + P% - CODE%

.cpl

 LDX #5

.TT53

 LDA QQ15,X
 STA QQ19,X
 DEX
 BPL TT53
 LDY #3
 BIT QQ15
 BVS P%+3
 DEY
 STY T

.TT55

 LDA QQ15+5
 AND #31
 BEQ P%+7
 ORA #128
 JSR TT27
 JSR TT54
 DEC T
 BPL TT55
 LDX #5

.TT56

 LDA QQ19,X
 STA QQ15,X
 DEX
 BPL TT56
 RTS

.cmn

 LDY #0

.QUL4

 LDA NAME,Y
 CMP #13
 BEQ ypl-1
 JSR TT26
 INY
 BNE QUL4
 RTS

.ypl

 BIT MJ
 BMI ypl16
 JSR TT62
 JSR cpl

.TT62

 LDX #5

.TT78

 LDA QQ15,X
 LDY QQ2,X
 STA QQ2,X
 STY QQ15,X
 DEX
 BPL TT78

.ypl16

 RTS

.tal

 CLC
 LDX GCNT
 INX
 JMP pr2

.fwl

 LDA #105
 JSR TT68
 LDX QQ14
 SEC
 JSR pr2
 LDA #195
 JSR plf

.PCASH

 LDA #119
 BNE TT27

.csh

 LDX #3

.pc1

 LDA CASH,X
 STA K,X
 DEX
 BPL pc1
 LDA #9
 STA U
 SEC
 JSR BPRNT
 LDA #226

.plf

 JSR TT27
 JMP TT67

.TT68

 JSR TT27

.TT73

 LDA #&3A

.TT27

 TAX
 BEQ csh
 BMI TT43
 DEX
 BEQ tal
 DEX
 BEQ ypl
 dex
 bne P%+5
 JMP cpl
 dex
 beq cmn
 dex
 beq fwl
 dex
 bne P%+7
 LDA #128
 STA QQ17
 RTS
 DEX
 DEX
 BNE P%+5
 STX QQ17
 RTS
 dex
 beq crlf
 CMP #&60
 BCS ex
 CMP #14
 BCC P%+6
 CMP #32
 BCC qw
 LDX QQ17
 BEQ TT74
 BMI TT41
 BIT QQ17
 BVS TT46

.TT42

 CMP #65
 BCC TT44
 CMP #&5B
 BCS TT44
 ADC #32

.TT44

 JMP TT26

.TT41

 BIT QQ17
 BVS TT45
 CMP #65
 BCC TT74
 PHA
 TXA
 ORA #64
 STA QQ17
 PLA
 BNE TT44

.qw

 ADC #114
 BNE ex

.crlf

 LDA #21

IF _IB_DISK

 STA XC

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 JSR DOXC

ENDIF

 JMP TT73

.TT45

 CPX #&FF
 BEQ TT48
 CMP #65
 BCS TT42

.TT46

 PHA
 TXA
 AND #191
 STA QQ17
 PLA

.TT74

 JMP TT26

.TT43

 CMP #160
 BCS TT47
 AND #127
 ASL A
 TAY
 LDA QQ16,Y
 JSR TT27
 LDA QQ16+1,Y
 CMP #63
 BEQ TT48
 JMP TT27

.TT47

 SBC #160

.ex

 TAX
 LDA #(QQ18 MOD 256)
 STA V
 LDA #(QQ18 DIV 256)
 STA V+1
 LDY #0
 TXA
 BEQ TT50

.TT51

 LDA (V),Y
 BEQ TT49
 INY
 BNE TT51
 INC V+1
 BNE TT51

.TT49

 INY
 BNE TT59
 INC V+1

.TT59

 DEX
 BNE TT51

.TT50

 TYA
 PHA
 LDA V+1
 PHA
 LDA (V),Y
 EOR #35
 JSR TT27
 PLA
 STA V+1
 PLA
 TAY
 INY
 BNE P%+4
 INC V+1
 LDA (V),Y
 BNE TT50

.TT48

 RTS

.SWAPPZERO

 LDX #K3+1

.SWPZL

 LDA 0,X
 LDY ZPSTORE,X
 STA ZPSTORE,X
 STY 0,X
 INX
 BNE SWPZL
 RTS

.EX2

 LDA INWK+31
 ORA #&A0
 STA INWK+31
 RTS

.DOEXP

 LDA INWK+31
 AND #64
 BEQ P%+5
 JSR PTCLS
 LDA INWK+6
 STA T
 LDA INWK+7
 CMP #&20
 BCC P%+6
 LDA #&FE
 BNE yy
 ASL T
 ROL A
 ASL T
 ROL A
 SEC
 ROL A

.yy

 STA Q
 LDY #1
 LDA (XX19),Y
 STA frump
 ADC #4
 BCS EX2
 STA (XX19),Y
 JSR DVID4
 LDA P
 CMP #&1C
 BCC P%+6
 LDA #&FE
 BNE LABEL_1
 ASL R
 ROL A
 ASL R
 ROL A
 ASL R
 ROL A

.LABEL_1

 DEY
 STA (XX19),Y
 LDA INWK+31
 AND #&BF
 STA INWK+31
 AND #8
 BEQ TT48
 LDY #2
 LDA (XX19),Y
 TAY

.EXL1

 LDA XX3-7,Y
 STA (XX19),Y
 DEY
 CPY #6
 BNE EXL1
 LDA INWK+31
 ORA #64
 STA INWK+31

.PTCLS

 LDY #0
 LDA (XX19),Y
 STA Q
 INY
 LDA (XX19),Y
 BPL P%+4
 EOR #&FF
 LSR A
 LSR A
 LSR A
 LSR A
 ORA #1
 STA U
 INY
 LDA (XX19),Y
 STA TGT
 LDA RAND+1
 PHA
 LDY #6

.EXL5

 LDX #3

.EXL3

 INY
 LDA (XX19),Y
 STA K3,X
 DEX
 BPL EXL3
 STY CNT
 LDY #2

.EXL2

 INY
 LDA (XX19),Y
 EOR CNT
 STA &FFFF,Y
 CPY #6
 BNE EXL2
 LDY U
 STY CNT2

.EXL4 

\ OPT  FNdornd2

 CLC
 LDA RAND
 ROL A
 TAX
 ADC RAND+2
 STA RAND
 STX RAND+2
 LDA RAND+1
 TAX
 ADC RAND+3
 STA RAND+1
 STX RAND+3

\end

 AND #&0C
 ORA #&10
 STA COL
 LDA K3+1
 STA R
 LDA K3
 JSR EXS1
 BNE EX11
 CPX #2*Y-1
 BCS EX11
 STX Y1
 LDA K3+3
 STA R
 LDA K3+2
 JSR EXS1
 BNE EX4
 LDA Y1
 JSR CPIX

.EX4

 DEC CNT2
 BPL EXL4
 LDY CNT
 CPY TGT
 BCC EXL5
 PLA
 STA RAND+1
 LDA K%+6
 STA RAND+3
 RTS

.EX11

\ OPT  FNdornd2

 CLC
 LDA RAND
 ROL A
 TAX
 ADC RAND+2
 STA RAND
 STX RAND+2
 LDA RAND+1
 TAX
 ADC RAND+3
 STA RAND+1
 STX RAND+3

\end

 \<BS>
 JMP EX4

.EXS1

 STA S
\ OPT  FNdornd2

 CLC
 LDA RAND
 ROL A
 TAX
 ADC RAND+2
 STA RAND
 STX RAND+2
 LDA RAND+1
 TAX
 ADC RAND+3
 STA RAND+1
 STX RAND+3

\end

 ROL A
 BCS EX5
 JSR FMLTU
 ADC R
 TAX
 LDA S
 ADC #0
 RTS

.EX5

 JSR FMLTU
 STA T
 LDA R
 SBC T
 TAX
 LDA S
 SBC #0
 RTS

.exlook

 EQUB 0
 EQUB 2

.SOS1

 JSR msblob
 LDA #127
 STA INWK+29
 STA INWK+30
 LDA tek
 AND #2
 ORA #128
 JMP NWSHP

.SOLAR

 LDA TRIBBLE
 BEQ nobirths
 LDA #0
 STA QQ20
 STA QQ20+6 \Eat food & Narc
 JSR DORND
 AND #15
 ADC TRIBBLE
 ORA #4
 ROL A
 STA TRIBBLE
 ROL TRIBBLE+1
 BPL nobirths
 ROR TRIBBLE+1

.nobirths

 LSR FIST
 JSR ZINF
 LDA QQ15+1
 AND #3
 ADC #3
 STA INWK+8
 ROR A
 STA INWK+2
 STA INWK+5
 JSR SOS1
 LDA QQ15+3
 AND #7
 ORA #129
 STA INWK+8
 LDA QQ15+5
 AND #3
 STA INWK+2
 STA INWK+1
 LDA #0
 STA INWK+29
 STA INWK+30
 LDA #&81
 JSR NWSHP

.NWSTARS

 LDA QQ11
\ORA MJ
 BNE WPSHPS

.nWq

 LDY NOSTM

.SAL4

 JSR DORND
 ORA #8
 STA SZ,Y
 STA ZZ
 JSR DORND
 STA SX,Y
 STA X1
 JSR DORND
 STA SY,Y
 STA Y1
 JSR PIXEL2
 DEY
 BNE SAL4
 \\JSRPBFL

.WPSHPS

 LDX #0

.WSL1

 LDA FRIN,X
 BEQ WS2
 BMI WS1
 STA TYPE
 JSR GINF
 LDY #31

.WSL2

 LDA (INF),Y
 STA INWK,Y
 DEY
 BPL WSL2
 STX XSAV
 JSR SCAN
 LDX XSAV
 LDY #31
 LDA (INF),Y
 AND #&A7
 STA (INF),Y

.WS1

 INX
 BNE WSL1

.WS2

 LDX #0
 STX LSP
 DEX
 STX LSX2
 STX LSY2

.FLFLLS

 LDY #199
 LDA #0

.SAL6

 STA LSO,Y
 DEY
 BNE SAL6
 DEY
 STY LSX
 RTS

.DET1

 RTS \X is input-undraw dials
 DEX
 RTS

.SHD

 INX
 BEQ SHD-2

.DENGY

 DEC ENERGY
 PHP
 BNE paen2
 INC ENERGY

.paen2

 PLP
 RTS

.COMPAS

 JSR DOT
 LDA SSPR
 BNE SP1
 JSR SPS1
 JMP SP2

.SPS2

 ASL A
 TAX
 LDA #0
 ROR A
 TAY
 LDA #20 \14
 STA Q
 TXA
 JSR DVID4
 LDX P
 TYA
 BMI LL163
 LDY #0
 RTS

.LL163

 LDY #&FF
 TXA
 EOR #&FF
 TAX
 INX

.COR1

 RTS

.SPS4

 LDX #8

.SPL1

 LDA K%+NI%,X
 STA K3,X
 DEX
 BPL SPL1
 JMP TAS2

.SP1

 JSR SPS4

.SP2

 LDA XX15
 JSR SPS2
 TXA
 ADC #195 \ X-1
 STA COMX
 LDA XX15+1
 JSR SPS2
 STX T
 LDA #148 \156
 SBC T
 STA COMY
 LDA #&60
 LDX XX15+2
 BPL P%+3
 LSR A
 STA COMC

.DOT

 LDA COMC
 BEQ COR1
 STA ZZ
 LDA COMY
 LDX COMX
 JMP PIXEL
 \....

.OOPS

 STA T
 LDX #0
 LDY #8
 LDA (INF),Y
 BMI OO1
 LDA FSH
 SBC T
 BCC OO2
 STA FSH
 RTS

.OO2

 LDX #0
 STX FSH
 BCC OO3

.OO1

 LDA ASH
 SBC T
 BCC OO5
 STA ASH
 RTS

.OO5

 LDX #0
 STX ASH

.OO3

 ADC ENERGY
 STA ENERGY
 BEQ P%+4
 BCS P%+5
 JMP DEATH
 JSR EXNO3
 JMP OUCH

.SPS3

 LDA K%+1,X
 STA K3,X
 LDA K%+2,X
 TAY
 AND #127
 STA K3+1,X
 TYA
 AND #128
 STA K3+2,X
 RTS

.NWSPS

 JSR SPBLB
 LDX #&81
 STX INWK+32
 LDX #0
 STX INWK+30
 STX NEWB
\STX INWK+31
 STX FRIN+1
 DEX
 STX INWK+29
 LDX #10
 JSR NwS1
 JSR NwS1
 JSR NwS1
 LDA spasto
 STA XX21+2*SST-2
 LDA spasto+1
 STA XX21+2*SST-1
 LDA tek
 CMP #10
 BCC notadodo
 LDA XX21+2*DOD-2
 STA XX21+2*SST-2
 LDA XX21+2*DOD-1
 STA XX21+2*SST-1

.notadodo

 LDA #(LSO MOD 256)
 STA INWK+33
 LDA #(LSO DIV 256)
 STA INWK+34
 LDA #SST

.NWSHP

 STA T
 LDX #0

.NWL1

 LDA FRIN,X
 BEQ NW1
 INX
 CPX #NOSH
 BCC NWL1

.NW3

 CLC
 RTS

.NW1

 JSR GINF
 LDA T
 BMI NW2
 ASL A
 TAY
 LDA XX21-1,Y
 BEQ NW3
 STA XX0+1
 LDA XX21-2,Y
 STA XX0
 CPY #2*SST
 BEQ NW6
 LDY #5
 LDA (XX0),Y
 STA T1
 LDA SLSP
 SEC
 SBC T1
 STA INWK+33
 LDA SLSP+1
 SBC #0
 STA INWK+34
 LDA INWK+33
\SEC 
 SBC INF
 TAY
 LDA INWK+34
 SBC INF+1
 BCC NW3+1
 BNE NW4
 CPY #NI%
 BCC NW3+1

.NW4

 LDA INWK+33
 STA SLSP
 LDA INWK+34
 STA SLSP+1

.NW6

 LDY #14
 LDA (XX0),Y
 STA INWK+35
 LDY #19
 LDA (XX0),Y
 AND #7
 STA INWK+31
 LDA T

.NW2

 STA FRIN,X
 TAX
 BMI NW8
 CPX #HER
 BEQ gangbang
 CPX #JL
 BCC NW7
 CPX #JH
 BCS NW7

.gangbang

 INC JUNK

.NW7

 INC MANY,X

.NW8

 LDY T
 LDA E%-1,Y
 AND #&6F
 ORA NEWB
 STA NEWB
 LDY #NI%-1

.NWL3

 LDA INWK,Y
 STA (INF),Y
 DEY
 BPL NWL3
 SEC
 RTS

.NwS1

 LDA INWK,X
 EOR #128
 STA INWK,X
 INX
 INX
 RTS

.ABORT

 LDX #&FF

.ABORT2

 STX MSTG
 LDX NOMSL
 JSR MSBAR
 STY MSAR
 RTS

.msbpars

 EQUB 4
 EQUD 0

.PROJ

 LDA INWK
 STA P
 LDA INWK+1
 STA P+1
 LDA INWK+2
 JSR PLS6
 BCS PL2-1
 LDA K
 ADC #X
 STA K3
 TXA
 ADC #0
 STA K3+1
 LDA INWK+3
 STA P
 LDA INWK+4
 STA P+1
 LDA INWK+5
 EOR #128
 JSR PLS6
 BCS PL2-1
 LDA K
 ADC #Y
 STA K4
 TXA
 ADC #0
 STA K4+1
 CLC
 RTS

.PL2

 LDA TYPE
 LSR A
 BCS P%+5
 JMP WPLS2
 JMP WPLS

.PLANET

 LDA INWK+8
\BMI PL2
 CMP #48
 BCS PL2
 ORA INWK+7
 BEQ PL2
 JSR PROJ
 BCS PL2
 LDA #96
 STA P+1
 LDA #0
 STA P
 JSR DVID3B2
 LDA K+1
 BEQ PL82
 LDA #&F8
 STA K

.PL82

 LDA TYPE
 LSR A
 BCC PL9
 JMP SUN

.PL9

 JSR WPLS2
 JMP CIRCLE
\BCS PL20
\LDA K+1
\BEQ PL25
 \.PL20 RTS
 \.........

.PLF3M3

 JMP WPLS

.PLF3

 TXA
 EOR #&FF
 CLC
 ADC #1
 TAX

.PLF17

 LDA #&FF
 JMP PLF5

.SUN

 LDA #RED
 STA COL
 LDA #1
 STA LSX
 JSR CHKON
 BCS PLF3M3
 LDA #0
 LDX K
 CPX #&60
 ROL A
 CPX #&28
 ROL A
 CPX #&10
 ROL A

.PLF18

 STA CNT
 LDA Yx2M1
 LDX P+2
 BNE PLF2
 CMP P+1
 BCC PLF2
 LDA P+1
 BNE PLF2
 LDA #1

.PLF2

 STA TGT
 LDA Yx2M1
 SEC
 SBC K4
 TAX
 LDA #0
 SBC K4+1
 BMI PLF3
 BNE PLF4
 INX
 DEX
 BEQ PLF17
 CPX K
 BCC PLF5

.PLF4

 LDX K
 LDA #0

.PLF5

 STX V
 STA V+1
 LDA K
 JSR SQUA2
 STA K2+1
 LDA P
 STA K2
 LDY Yx2M1
 LDA SUNX
 STA YY
 LDA SUNX+1
 STA YY+1

.PLFL2

 CPY TGT
 BEQ PLFL
 LDA LSO,Y
 BEQ PLF13
 JSR HLOIN2

.PLF13

 DEY
 BNE PLFL2

.PLFL

 LDA V
 JSR SQUA2
 STA T
 LDA K2
 SEC
 SBC P
 STA Q
 LDA K2+1
 SBC T
 STA R
 STY Y1
 JSR LL5
 LDY Y1
 JSR DORND
 AND CNT
 CLC
 ADC Q
 BCC PLF44
 LDA #&FF

.PLF44

 LDX LSO,Y
 STA LSO,Y
 BEQ PLF11
 LDA SUNX
 STA YY
 LDA SUNX+1
 STA YY+1
 TXA
 JSR EDGES
 LDA X1
 STA XX
 LDA X2
 STA XX+1
 LDA K3
 STA YY
 LDA K3+1
 STA YY+1
 LDA LSO,Y
 JSR EDGES
 BCS PLF23
 LDA X2
 LDX XX
 STX X2
 STA XX
 JSR HLOIN

.PLF23

 LDA XX
 STA X1
 LDA XX+1
 STA X2

.PLF16

 JSR HLOIN

.PLF6

 DEY
 BEQ PLF8
 LDA V+1
 BNE PLF10
 DEC V
 BNE PLFL
 DEC V+1

.PLFLS

 JMP PLFL

.PLF11

 LDX K3
 STX YY
 LDX K3+1
 STX YY+1
 JSR EDGES
 BCC PLF16
 LDA #0
 STA LSO,Y
 BEQ PLF6

.PLF10

 LDX V
 INX
 STX V
 CPX K
 BCC PLFLS
 BEQ PLFLS
 LDA SUNX
 STA YY
 LDA SUNX+1
 STA YY+1

.PLFL3

 LDA LSO,Y
 BEQ PLF9
 JSR HLOIN2

.PLF9

 DEY
 BNE PLFL3

.PLF8

 CLC
 LDA K3
 STA SUNX
 LDA K3+1
 STA SUNX+1

.RTS2

 RTS

.CIRCLE

 JSR CHKON
 BCS RTS2
 LDA #0
 STA LSX2
 LDX K
 LDA #8
 CPX #8
 BCC PL89
 LSR A
 CPX #60
 BCC PL89
 LSR A

.PL89

 STA STP

.CIRCLE2

 LDX #&FF
 STX FLAG
 INX
 STX CNT

.PLL3

 LDA CNT
 JSR FMLTU2
 LDX #0
 STX T
 LDX CNT
 CPX #33
 BCC PL37
 EOR #&FF
 ADC #0
 TAX
 LDA #&FF
 ADC #0
 STA T
 TXA
 CLC

.PL37

 ADC K3
 STA K6
 LDA K3+1
 ADC T
 STA K6+1
 LDA CNT
 CLC
 ADC #16
 JSR FMLTU2
 TAX
 LDA #0
 STA T
 LDA CNT
 ADC #15
 AND #63
 CMP #33
 BCC PL38
 TXA
 EOR #&FF
 ADC #0
 TAX
 LDA #&FF
 ADC #0
 STA T
 CLC

.PL38

 JSR BLINE
 CMP #65
 BCS P%+5
 JMP PLL3
 CLC
 RTS

.WPLS2

 LDY LSX2
 BNE WP1

.WPL1

 CPY LSP
 BCS WP1
 LDA LSY2,Y
 CMP #&FF
 BEQ WP2
 STA Y2
 LDA LSX2,Y
 STA X2
 JSR LOIN
 INY
 LDA SWAP
 BNE WPL1
 LDA X2
 STA X1
 LDA Y2
 STA Y1
 JMP WPL1

.WP2

 INY
 LDA LSX2,Y
 STA X1
 LDA LSY2,Y
 STA Y1
 INY
 JMP WPL1

.WP1

 LDA #1
 STA LSP
 LDA #&FF
 STA LSX2
 RTS

.WPLS

 LDA LSX
 BMI WPLS-1
 LDA SUNX
 STA YY
 LDA SUNX+1
 STA YY+1
 LDY #2*Y-1

.WPL2

 LDA LSO,Y
 BEQ P%+5
 JSR HLOIN2
 DEY
 BNE WPL2
 DEY
 STY LSX
 RTS

.EDGES

 STA T
 CLC
 ADC YY
 STA X2
 LDA YY+1
 ADC #0
 BMI ED1
 BEQ P%+6
 LDA #&FF
 STA X2
 LDA YY
 SEC
 SBC T
 STA X1
 LDA YY+1
 SBC #0
 BNE ED3
 CLC
 RTS

.ED3

 BPL ED1
 LDA #0
 STA X1
 CLC
 RTS

.ED1

 LDA #0
 STA LSO,Y
 SEC
 RTS

.CHKON

 LDA K3
 CLC
 ADC K
 LDA K3+1
 ADC #0
 BMI PL21
 LDA K3
 SEC
 SBC K
 LDA K3+1
 SBC #0
 BMI PL31
 BNE PL21

.PL31

 LDA K4
 CLC
 ADC K
 STA P+1
 LDA K4+1
 ADC #0
 BMI PL21
 STA P+2
 LDA K4
 SEC
 SBC K
 TAX
 LDA K4+1
 SBC #0
 BMI PL44
 BNE PL21
 CPX Yx2M1
 RTS

.PL21

 SEC
 RTS

.PLS6

 JSR DVID3B2
 LDA K+3
 AND #127
 ORA K+2
 BNE PL21
 LDX K+1
 CPX #4
 BCS PL6
 LDA K+3
\CLC 
 BPL PL6
 LDA K
 EOR #&FF
 ADC #1
 STA K
 TXA
 EOR #&FF
 ADC #0
 TAX

.PL44

 CLC

.PL6

 RTS

.YESNO

 JSR t
 CMP #'Y'
 BEQ PL6
 CMP #'N'
 BNE YESNO
 CLC
 RTS

.TT17

 LDA QQ11
 BNE TT17afterall
 JSR DOKEY
 TXA
 RTS

.TT17afterall

 JSR DOKEY
 LDA JSTK
 BEQ TJ1
 LDA JSTY
 JSR TJS1
 TAY
 LDA JSTX
 EOR #&FF
 JSR TJS1
 TAX

IF _SOURCE_DISK_CODE_FILES

 LDA &80
 RTS
 LDA &85
 BIT &86
 BPL L794B
 LDA #&01
     
.L794B

 BIT &87

 BPL L7951
 ASL A
 ASL A

.L7951

 TAY

 LDA #&00
 STA &83
 STA &84
 STA &85
 STA &86
 STA &87

ENDIF

 LDA thiskey
 RTS

.TJ1

IF _IB_DISK

 LDA #0
 STA &8C
 STA &8E

ENDIF

 LDA thiskey
 LDX #0
 LDY #0
 CMP #8

IF _IB_DISK

 BEQ &794B
 CMP #&4A

ENDIF

 BNE P%+3
 DEX
 CMP #21

IF _IB_DISK

 BEQ P%+6
 CMP #&4B

ENDIF

 BNE P%+3
 INX
 CMP #10

IF _IB_DISK

 BEQ P%+6
 CMP #&4D

ENDIF

 BNE P%+3
 DEY
 CMP #11

IF _IB_DISK

 BEQ P%+6
 CMP #&49

ENDIF

 BNE P%+3
 INY
 RTS

.TJS1

 LSR A
 LSR A
 LSR A
 LSR A
 LSR A
 ADC #0
 SBC #3
 RTS

\ ******************************************************************************
\
\ Save ELTE.bin
\
\ ******************************************************************************

 PRINT "ELITE E"
 PRINT "Assembled at ", ~CODE_E%
 PRINT "Ends at ", ~P%
 PRINT "Code size is ", ~(P% - CODE_E%)
 PRINT "Execute at ", ~LOAD%
 PRINT "Reload at ", ~LOAD_E%

 PRINT "S.ELTE ", ~CODE_E%, " ", ~P%, " ", ~LOAD%, " ", ~LOAD_E%
 SAVE "versions/apple/3-assembled-output/ELTE.bin", CODE_E%, P%, LOAD%

\ ******************************************************************************
\
\ ELITE F FILE
\
\ Produces the binary file ELTF.bin that gets loaded by elite-bcfs.asm.
\
\ ******************************************************************************

 CODE_F% = P%

 LOAD_F% = LOAD% + P% - CODE%

\NOSPRITES
\SET L1

.KS3

 LDA P
 STA SLSP
 LDA P+1
 STA SLSP+1
 RTS

.KS1

 LDX XSAV
 JSR KILLSHP
 LDX XSAV
 JMP MAL1

.KS4

 JSR ZINF
 JSR FLFLLS
 STA FRIN+1
 STA SSPR
 JSR SPBLB
 LDA #6
 STA INWK+5
 LDA #&81
 JMP NWSHP

.KS2

 LDX #&FF

.KSL4

 INX
 LDA FRIN,X
 BEQ KS3
 CMP #MSL
 BNE KSL4
 TXA
 ASL A
 TAY
 LDA UNIV,Y
 STA SC
 LDA UNIV+1,Y
 STA SC+1
 LDY #32
 LDA (SC),Y
 BPL KSL4
 AND #&7F
 LSR A
 CMP XX4
 BCC KSL4
 BEQ KS6
 SBC #1
 ASL A
 ORA #128
 STA (SC),Y
 BNE KSL4

.KS6

 LDA #0
 STA (SC),Y
 BEQ KSL4

.KILLSHP

 STX XX4
 LDA MSTG
 CMP XX4
 BNE KS5
 LDY #GREEN
 JSR ABORT
 LDA #200
 JSR MESS

.KS5

 LDY XX4
 LDX FRIN,Y
 CPX #SST
 BEQ KS4
 CPX #CON
 BNE lll
 LDA TP
 ORA #2
 STA TP
 INC TALLY+1  \ --BT

.lll

 CPX #HER
 BEQ blacksuspenders
 CPX #JL
 BCC KS7
 CPX #JH
 BCS KS7

.blacksuspenders

 DEC JUNK

.KS7

 DEC MANY,X
 LDX XX4
 LDY #5
 LDA (XX0),Y
 LDY #33
 CLC
 ADC (INF),Y
 STA P
 INY
 LDA (INF),Y
 ADC #0
 STA P+1

.KSL1

 INX
 LDA FRIN,X
 STA FRIN-1,X
 BNE P%+5
 JMP KS2
 ASL A
 TAY
 LDA XX21-2,Y
 STA SC
 LDA XX21-1,Y
 STA SC+1
 LDY #5
 LDA (SC),Y
 STA T
 LDA P
 SEC
 SBC T
 STA P
 LDA P+1
 SBC #0
 STA P+1
 TXA
 ASL A
 TAY
 LDA UNIV,Y
 STA SC
 LDA UNIV+1,Y
 STA SC+1
 LDY #36
 LDA (SC),Y
 STA (INF),Y
 DEY
 LDA (SC),Y
 STA (INF),Y
 DEY
 LDA (SC),Y
 STA K+1
 LDA P+1
 STA (INF),Y
 DEY
 LDA (SC),Y
 STA K
 LDA P
 STA (INF),Y
 DEY

.KSL2 

 LDA (SC),Y
 STA (INF),Y
 DEY
 BPL KSL2
 LDA SC
 STA INF
 LDA SC+1
 STA INF+1
 LDY T

.KSL3

 DEY
 LDA (K),Y
 STA (P),Y
 TYA
 BNE KSL3
 BEQ KSL1

.THERE

 LDX GCNT
 DEX
 BNE THEX
 LDA QQ0
 CMP #144
 BNE THEX
 LDA QQ1
 CMP #33
 BEQ THEX+1

.THEX

 CLC
 RTS
 \......

.RESET

 JSR ZERO
 LDX #6

.SAL3

 STA BETA,X
 DEX
 BPL SAL3
 STX JSTGY
 TXA
 STA QQ12
 LDX #2

.REL5

 STA FSH,X
 DEX
 BPL REL5

.RES2

\JSR stopbd
 LDA #NOST
 STA NOSTM
 LDX #&FF
 STX LSX2
 STX LSY2
 STX MSTG
 LDA #128
 STA JSTY
 STA ALP2
 STA BET2
 ASL A
 STA BETA
 STA BET1
 STA ALP2+1
 STA BET2+1
 STA MCNT
\STA TRIBCT
 LDA #3
 STA DELTA
 STA ALPHA
 STA ALP1
\LDA #&10
\STA COL2 \ <<
 LDA #0
 STA dontclip
 LDA #2*Y-1
 STA Yx2M1
 LDA SSPR
 BEQ P%+5
 JSR SPBLB
 LDA ECMA
 BEQ yu
 JSR ECMOF

.yu

 JSR WPSHPS
 JSR ZERO
 LDA #(LS%MOD 256)
 STA SLSP
 LDA #(LS%DIV 256)
 STA SLSP+1

.ZINF

 LDY #NI%-1
 LDA #0

.ZI1

 STA INWK,Y
 DEY
 BPL ZI1
 LDA #96
 STA INWK+18
 STA INWK+22
 ORA #128
 STA INWK+14
 RTS

.msblob

 LDX #4

.ss

 CPX NOMSL
 BEQ SAL8
 LDY #BLACK
 JSR MSBAR
 DEX
 BNE ss
 RTS

.SAL8

 LDY #GREEN
 JSR MSBAR
 DEX
 BNE SAL8
 RTS

.me2

 LDA QQ11
 BNE clynsneed
 LDA MCH
 JSR MESS
 LDA #0
 STA DLY
 JMP me3

.clynsneed

 JSR CLYNS
 JMP me3

.Ze

 JSR ZINF
 JSR DORND
 STA T1
 AND #128
 STA INWK+2
 TXA
 AND #128
 STA INWK+5
 LDA #25
 STA INWK+1
 STA INWK+4
 STA INWK+7
 TXA
 CMP #245
 ROL A
 ORA #&C0
 STA INWK+32

.DORND2

 CLC

.DORND

 LDA RAND
 ROL A
 TAX
 ADC RAND+2
 STA RAND
 STX RAND+2
 LDA RAND+1
 TAX
 ADC RAND+3
 STA RAND+1
 STX RAND+3
 RTS

.MTT4

 JSR DORND
 LSR A
 STA INWK+32
 STA INWK+29
 ROL INWK+31
 AND #31
 ORA #16
 STA INWK+27
 JSR DORND
 BMI nodo
 LDA INWK+32
 ORA #&C0
 STA INWK+32
 LDX #16
 STX NEWB

.nodo

 AND #2
 ADC #CYL
 CMP #HER
 BEQ TT100
 JSR NWSHP \ trader

.TT100 \ MLoop

 JSR M%
 DEC DLY
 BEQ me2
 BPL me3
 INC DLY

.me3

 DEC MCNT
 BEQ P%+5

.ytq

 JMP MLOOP
 LDA MJ
 BNE ytq
 JSR DORND
 CMP #35
 BCS MTT1
 LDA JUNK
 CMP #3
 BCS MTT1
 JSR ZINF
 LDA #38
 STA INWK+7
 JSR DORND
 STA INWK
 STX INWK+3
 AND #128
 STA INWK+2
 TXA
 AND #128
 STA INWK+5
 ROL INWK+1
 ROL INWK+1
 JSR DORND
 BVS MTT4
 ORA #&6F
 STA INWK+29
 LDA SSPR
 BNE MTT1
 TXA
 BCS MTT2
 AND #31
 ORA #16
 STA INWK+27
 BCC MTT3

.MTT2

 ORA #127
 STA INWK+30

.MTT3

 JSR DORND
 CMP #252
 BCC thongs
 LDA #HER
 STA INWK+32
 BNE whips

.thongs

 CMP #10
 AND #1
 ADC #OIL

.whips

 JSR NWSHP \junk

.MTT1

 LDA SSPR
 BEQ P%+5

.MLOOPS

 JMP MLOOP
 JSR BAD
 ASL A
 LDX MANY+COPS
 BEQ P%+5
 ORA FIST
 STA T
 JSR Ze
 CMP #136
 BEQ fothg
 CMP T
 BCS P%+7
 LDA #COPS
 JSR NWSHP
 LDA MANY+COPS
 BNE MLOOPS
 DEC EV
 BPL MLOOPS
 INC EV
 LDA TP
 AND #&C
 CMP #8
 BNE nopl
 JSR DORND
 CMP #200
 BCC nopl

.fothg 

.fothg2

 JSR GTHG

.nopl

 JSR DORND
 LDY gov
 BEQ LABEL_2
 CMP #90
 BCS MLOOPS
 AND #7
 CMP gov
 BCC MLOOPS

.LABEL_2

 JSR Ze
 CMP #100
 BCS mt1
 INC EV
 AND #3
 ADC #CYL2
 TAY
 JSR THERE
 BCC NOCON
 LDA #&F9
 STA INWK+32
 LDA TP
 AND #3
 LSR A
 BCC NOCON
 ORA MANY+CON
 BEQ YESCON

.NOCON

 LDA #4
 STA NEWB
 JSR DORND
 CMP #200
 ROL A
 ORA #&C0
 STA INWK+32
 TYA
 EQUB &2C

.YESCON

 LDA #CON

.focoug

 JSR NWSHP

.mj1

 JMP MLOOP
 \fothg
\LDA K+6
\AND #&3E
\BNE fothg2
\LDA #18
\STA INWK+27
\LDA #&79
\STA INWK+32
\LDA #COU
\BNE focoug

.mt1

 AND #3
 STA EV
 STA XX13

.mt3

 JSR DORND
 STA T
 JSR DORND
 AND T
 AND #7
 ADC #PACK
 JSR NWSHP \pack
 DEC XX13
 BPL mt3

.MLOOP

 LDX #&FF
 TXS
 LDX GNTMP
 BEQ EE20
 DEC GNTMP

.EE20

 LDX LASCT
 BEQ NOLASCT
 DEX
 BEQ P%+3
 DEX
 STX LASCT

.NOLASCT

\LDA QQ11
\BNE P%+5
 JSR DIALS
 LDA QQ11
 BEQ plus13

 AND PATG
 LSR A
 BCS plus13
 LDY #2
 JSR DELAY

.plus13

 JSR TT17

.FRCE

 JSR TT102
 LDA QQ12
 BEQ P%+5
 JMP MLOOP
 JMP TT100

.TT102

 CMP #f8
 BNE P%+5
 JMP STATUS
 CMP #f4
 BNE P%+5
 JMP TT22
 CMP #f5
 BNE P%+5
 JMP TT23
 CMP #f6
 BNE TT92
 JSR TT111
 JMP TT25

.TT92

 CMP #f9
 BNE P%+5
 JMP TT213
 CMP #f7
 BNE P%+5
 JMP TT167
 CMP #f0
 BNE fvw
 JMP TT110

.fvw

 BIT QQ12
 BPL INSP
 CMP #f3
 BNE P%+5
 JMP EQSHP
 CMP #f1
 BNE P%+5
 JMP TT219
 CMP #'I'
 BNE nosave
 JSR SVE
 BCC P%+5
 JMP QU5
 JMP BAY

.nosave

 CMP #f2
 BNE LABEL_3
 JMP TT208

.INSP

 CMP #f12
 BEQ chview1
 CMP #f22
 BEQ chview2
 CMP #f32
 BNE LABEL_3
 LDX #3
 EQUB &2C

.chview2

 LDX #2
 EQUB &2C

.chview1

 LDX #1
 JMP LOOK1

.LABEL_3

 LDA KL
 CMP #'H'
 BNE P%+5
 JMP hyp
 CMP #'G'
 BNE P%+5
 JMP hyp

.NWDAV5 

 CMP #'D'
 BEQ T95
 CMP #'F'\Find
 BNE HME1
 LDA QQ12
 BEQ t95
 LDA QQ11
 AND #192
 BEQ t95
 JMP HME2

.HME1

 STA T1
 LDA QQ11
 AND #192
 BEQ TT107
 LDA QQ22+1
 BNE TT107
 LDA T1
 CMP #'O'
 BNE ee2
 JSR TT103
 JSR ping
 JMP TT103

.ee2

 JSR TT16

.TT107 

 LDA QQ22+1
 BEQ t95
 DEC QQ22
 BNE t95
 LDX QQ22+1
 DEX
 JSR ee3
 LDA #5
 STA QQ22
 LDX QQ22+1
 JSR ee3
 DEC QQ22+1
 BNE t95
 JMP TT18

.t95

 RTS

.T95

 LDA QQ11
 AND #&C0
 BEQ t95
 JSR hm
\STA QQ17
 JSR cpl
 LDA #128
 STA QQ17
 LDA #12
 JSR TT26
 JMP TT146

.BAD

 LDA QQ20+3
 CLC
 ADC QQ20+6
 ASL A
 ADC QQ20+10
 RTS

.FAROF

 LDA #&E0

.FAROF2

 CMP INWK+1
 BCC FA1
 CMP INWK+4
 BCC FA1
 CMP INWK+7

.FA1

 RTS

.MAS4

 ORA INWK+1
 ORA INWK+4
 ORA INWK+7
 RTS

.brkd

 EQUB 0

.BRBR

 DEC brkd
 LDX #&FF
 TXS
 JSR backtonormal
 TAY
 LDA #7

.BRBRLOOP

 JSR CHPR
 INY
 LDA (&FD),Y
 BNE BRBRLOOP
 JMP BR1

.DEATH

 LDY #210
 JSR SOEXPL \ @@
 JSR RES2
 ASL DELTA
 ASL DELTA
\LDX #24
\JSR DET1
 LDA #0
 JSR TT66
 JSR nWq
 LDA #12
 STA XC
 STA YC
 LDA #146
 JSR ex

.D1

 JSR Ze
 LSR A
 LSR A
 STA INWK
 LDY #0
 STY INWK+1
 STY INWK+4
 STY INWK+7
 STY INWK+32
 DEY
 STY MCNT
 EOR #42
 STA INWK+3
 ORA #80
 STA INWK+6
 TXA
 AND #&8F
 STA INWK+29
 LDY #&40
 STY LASCT
 SEC
 ROR A
 AND #&87
 STA INWK+30
 LDX #OIL
 LDA XX21-1+2*PLT
 BEQ D3
 BCC D3
 DEX

.D3

 JSR fq1
 JSR DORND
 AND #128
 LDY #31
 STA (INF),Y
 LDA FRIN+4
 BEQ D1
\JSR U%\@@
 LDA #0
 STA DELTA
 JSR M%
\JSR NOSPRITES

.D2

 JSR M%
 DEC LASCT
 BNE D2
\LDX #31
\JSR DET1
 JMP DEATH2

.spasto

IF _IB_DISK

 EQUW &A49E

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 EQUW &8888
 \.......

ENDIF

.BEGIN

 LDX #(DISK-COMC)
 LDA #0

.BEL1

 STA COMC,X
 DEX
 BPL BEL1
 LDA XX21+SST*2-2
 STA spasto
 LDA XX21+SST*2-1
 STA spasto+1
 JSR JAMESON

.TT170

 LDX #&FF
 TXS
 JSR RESET

.DEATH2 

 LDX #&FF
 TXS
 JSR RES2

.BR1

 JSR ZEKTRAN
 LDA #3
 STA XC
\JSR startat
 LDX #CYL
 LDA #6
 LDY #250 \ @@
 JSR TITLE
 CPX #'Y'
 BNE QU5
\JSR stopat
 JSR DFAULT
 JSR SVE
\JSR startat

.QU5

 JSR DFAULT
 JSR msblob
 LDA #7
 LDX #SH3 \ADA
 LDY #75 \48
 JSR TITLE
\JSR stopat
 JSR ping
\JSR hyp1 was here...
 JSR TT111
 JSR jmp
 LDX #5

.likeTT112

 LDA QQ15,X
 STA QQ2,X
 DEX
 BPL likeTT112
 INX
 STX EV
 LDA QQ3
 STA QQ28
 LDA QQ5
 STA tek
 LDA QQ4
 STA gov

.BAY

 LDA #&FF
 STA QQ12
 LDA #f8
 JMP FRCE

.DFAULT

 LDX #NT%+8

.QUL1

 LDA NA%-1,X
 STA NAME-1,X
 DEX
 BNE QUL1
 STX QQ11

.doitagain

 JSR CHECK
 CMP CHK
 BNE doitagain
 EOR #&A9
 TAX
 LDA COK
 CPX CHK2
 BEQ tZ
 ORA #128

.tZ

 ORA #8
 STA COK
 JSR CHECK2
 CMP CHK3
 BNE doitagain
 RTS

.TITLE

 STY distaway
 PHA
 STX TYPE
 LDA #&FF
 STA MULIE
 JSR RESET
 LDA #0
 STA MULIE
 JSR ZEKTRAN
\LDA #32
\JSR DOVDU19
 LDA #13
 JSR TT66
\LDA #RED
\JSR DOCOL
 lda #0
 sta QQ11
 LDA #96
 STA INWK+14
 LDA #96
 STA INWK+7
 LDX #127
 STX INWK+29
 STX INWK+30
 INX
 STX QQ17
 LDA TYPE
 JSR NWSHP
 LDA #6
 STA XC
 LDA #30
 JSR plf
 LDA #10
 JSR TT26
 LDA #6
 STA XC
 LDA PATG
 BEQ awe
 LDA #13
 JSR DETOK

.awe

 LDA brkd
 BEQ BRBR2
 INC brkd
 LDA #7
 STA XC
 LDA #9
 STA YC
 LDY #0
 JSR CHPR
 INY
 LDA (&FD),Y
 BNE P%-6

.BRBR2

 LDY #0
 STY DELTA
 STY JSTK
 LDA #14
 STA YC
 LDA #1
 STA XC
 PLA
 JSR DETOK
 LDA #3
 STA XC
 LDA #12
 JSR DETOK
 LDA #12
 STA CNT2
 LDA #5
 STA MCNT

.TLL2

 LDA INWK+7
 CMP #1
 BEQ TL1
 DEC INWK+7

.TL1

 JSR MVEIT
 LDX distaway
 STX INWK+6
 LDA MCNT
 AND #3
 lda #0
 sta INWK
 sta INWK+3
 JSR LL9
 JSR RDKEY
 DEC MCNT
 LDA &C061
 ORA &C062

IF _IB_DISK

 AND &4562

ENDIF

 BMI TL3
 BCC TLL2
 RTS

.TL3

 DEC JSTK
 RTS
 \.............

.CHECK

 LDX #NT%-3
 CLC
 TXA

.QUL2

 ADC NA%+7,X
 EOR NA%+8,X
 DEX
 BNE QUL2
 RTS

.CHECK2

 LDX #NT%-3
 CLC
 TXA

.QU2L2

 STX T
 EOR T
 ROR A
 ADC NA%+7,X
 EOR NA%+8,X
 DEX
 BNE QU2L2
 RTS

.JAMESON

 LDY #(NAEND%-NA2%)

.JAMEL1

 LDA NA2%,Y
 STA NA%,Y
 DEY
 BPL JAMEL1
 LDY #7
 STY oldlong
 RTS

.COPYNAME

 LDX #0

.COPYL1

 LDA INWK+5,X
 CMP #13
 BEQ COPYL2
 STA comnam,X
 INX
 CPX #7
 BCC COPYL1

.COPYL2

 LDA #&20

.COPYL3

 STA comnam,X
 INX
 CPX #30
 BCC COPYL3
 RTS

.TRNME

 LDX #7
 LDA thislong
 STA oldlong

.GTL1

 LDA INWK+5,X
 STA NA%,X
 DEX
 BPL GTL1

.TR1

 LDX #7

.GTL2

 LDA NA%,X
 STA INWK+5,X
 DEX
 BPL GTL2
 RTS

.GTNMEW 

.GTNME

 LDX #4

.GTL3

 LDA NA%-5,X
 STA INWK,X
 DEX
 BPL GTL3
 LDA #7
 STA RLINE+2
 LDA #8
 JSR DETOK
 JSR MT26
 LDA #9
 STA RLINE+2
 TYA
 BEQ TR1
 STY thislong
 RTS

.MT26

 \OSWORD 0 mimic to INWK+5
\LDA #MAG2
\STA COL2
 LDY #8
 JSR DELAY
 JSR FLKB
 LDY #0

.OSW0L

 JSR TT217
 CMP #13
 BEQ OSW03
 CMP #27
 BEQ OSW04
 CMP #&7F
 BEQ OSW05
 CPY RLINE+2
 BCS OSW01
 CMP RLINE+3
 BCC OSW01
 CMP RLINE+4
 BCS OSW01
 STA INWK+5,Y
 INY
 EQUB &2C

.OSW01

 LDA #7

.OSW06

 JSR CHPR
 BCC OSW0L

.OSW03

 STA INWK+5,Y
\LDA #&10
\STA COL2
 LDA #12
 JMP CHPR

.OSW04

\LDA #&10
\STA COL2
 SEC
 RTS

.OSW05

 TYA
 BEQ OSW01
 DEY
 LDA #&7F
 BNE OSW06

.RLINE

 EQUW (INWK+5)
 EQUB 9
 EQUB &21
 EQUB &7B

.FILEPR

 LDA#3
 CLC
 ADC DISK
 JMP DETOK

.OTHERFILEPR

 LDA #2
 SEC
 SBC DISK
 JMP DETOK

.ZERO

 LDX #(de-FRIN)
 LDA #0

.ZEL2

 STA FRIN,X
 DEX
 BPL ZEL2
 RTS

.ZEBC

 RTS
 LDX #&C
 JSR ZES1
 DEX  \<<

.ZES1

 LDY #0
 STY SC

.ZES2

 LDA #0
 STX SC+1

.ZEL1

 STA (SC),Y
 INY
 BNE ZEL1
 RTS

.SVE

 LDA #1
 JSR DETOK
 JSR t
 CMP #&31
 BEQ loading
 CMP #&32
 BEQ SV1
 CMP #&33
\BEQ feb10 \ @@
\CMP #&34
 BNE feb13
 LDA #224
 JSR DETOK
 JSR YESNO
 BCC feb13
 JSR JAMESON
 JMP DFAULT

.feb13

 CLC
 RTS
 \.feb10 \LDADISK
\EOR #&FF
\STA DISK
\JMP SVE  \no tape?

.loading

 JSR GTNMEW
 JSR LOD
 JSR TRNME
 SEC
 RTS

.SV1

 JSR GTNMEW
 JSR TRNME
 LSR SVC
 LDA #4 \C64
 JSR DETOK
 LDX #NT%

.SVL1

 LDA TP,X
\STA &B00,X
 STA NA%+8,X
 DEX
 BPL SVL1
 JSR CHECK2
 STA CHK3
 JSR CHECK
 STA CHK
 PHA
 ORA #128
 STA K
 EOR COK
 STA K+2
 EOR CASH+2
 STA K+1
 EOR #&5A
 EOR TALLY+1
 STA K+3
 CLC
 JSR BPRNT
 JSR TT67
 JSR TT67
 PLA
 EOR #&A9
 STA CHK2
 JSR COPYNAME
 LDY #NT%

.copyme2

 LDA NA%+8,Y
 STA TAP%,Y
 DEY
 BPL copyme2
 JSR wfile
 BCS diskerror
 JSR DFAULT
 JSR t

.SVEX

 CLC
 RTS

.diskerror

 ASL A
 TAX
 LDA ERTAB-2,X
 STA XX15
 LDA ERTAB-1,X
 STA XX15+1
 LDY #0

.dskerllp

 LDA (XX15),Y
 BEQ dskerllp2
 JSR TT26
 INY
 BNE dskerllp

.dskerllp2 

 JSR BOOP
 JSR t
 JMP SVE

.thislong

 EQUB 7

.oldlong

 EQUB 7

.LOD

 JSR COPYNAME
 JSR rfile
 BCS diskerror
 JSR UNMUTILATE
 LDA TAP%
 BMI ELT2F
 LDY #NT%

.copyme

 LDA TAP%,Y
 STA NA%+8,Y
 DEY
 BPL copyme

.LOR

 SEC
 RTS

.ELT2F

 LDA #9
 JSR DETOK
 JSR t
 JMP SVE

.DERR1

 EQUS "DISK WRITE PROTECTED"
 EQUB 0

.DERR2

 EQUS "DISK FULL"
 EQUB 0

.DERR3

 EQUS "CATALOG FULL"
 EQUB 0

.DERR4

 EQUS "DISK I/O ERROR"
 EQUB 0

.DERR5

 EQUS "FILE NOT FOUND"
 EQUB 0

.ERTAB

 EQUW DERR1
 EQUW DERR2
 EQUW DERR3
 EQUW DERR4
 EQUW DERR5

.backtonormal

 RTS
 \VIAE,DODOSVN

.CLDELAY

 RTS

.ZEKTRAN

 LDA #0
 LDX #16

.ZEKLOOP

 STA KEYLOOK,X
 DEX
 BPL ZEKLOOP
 RTS
 RTS

.SPS1

 LDX #0
 JSR SPS3
 LDX #3
 JSR SPS3
 LDX #6
 JSR SPS3

.TAS2

 LDA K3
 ORA K3+3
 ORA K3+6
 ORA #1
 STA K3+9
 LDA K3+1
 ORA K3+4
 ORA K3+7

.TAL2

 ASL K3+9
 ROL A
 BCS TA2
 ASL K3
 ROL K3+1
 ASL K3+3
 ROL K3+4
 ASL K3+6
 ROL K3+7
 BCC TAL2

.TA2

 LDA K3+1
 LSR A
 ORA K3+2
 STA XX15
 LDA K3+4
 LSR A
 ORA K3+5
 STA XX15+1
 LDA K3+7
 LSR A
 ORA K3+8
 STA XX15+2

.NORM

 LDA XX15
 JSR SQUA
 STA R
 LDA P
 STA Q
 LDA XX15+1
 JSR SQUA
 STA T
 LDA P
 ADC Q
 STA Q
 LDA T
 ADC R
 STA R
 LDA XX15+2
 JSR SQUA
 STA T
 LDA P
 ADC Q
 STA Q
 LDA T
 ADC R
 STA R
 JSR LL5
 LDA XX15
 JSR TIS2
 STA XX15 \*96/Q
 LDA XX15+1
 JSR TIS2
 STA XX15+1
 LDA XX15+2
 JSR TIS2
 STA XX15+2

.NO1

 RTS
 \.....

.RDS1

 \Read Joystick X
 LDA &C064,X
 BMI RDS1
 LDY &C070
 LDY #0
 NOP
 NOP

.RDL2

 LDA &C064,X
 BPL RDR1
 INY
 BNE RDL2
 DEY

.RDR1

 TYA
 EOR JSTE
 RTS
 \..............

.RDKEY

 TYA
 PHA
 JSR ZEKTRAN

.scanmatrix

 CLC
 LDA &C000
 BPL nokeys2
 BIT &C010
 AND #127
 STA thiskey
 LDX #16

.RDL1

 CMP KYTB,X
 BNE RD1
 DEC KEYLOOK,X

.RD1

 DEX
 BNE RDL1
 SEC

.nokeys2

 LDA JSTK

IF _IB_DISK

 BPL nofast+2

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 BPL nojoyst

ENDIF

IF _IB_DISK OR _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES

 LDX auto
 BNE nojoyst
\LDX #0

ELIF _SOURCE_DISK_CODE_FILES

 LDX #0

ENDIF

 JSR RDS1
 EOR #&FF
 STA JSTX
 INX
 JSR RDS1
 EOR JSTGY
 STA JSTY

.nojoyst

 LDA #&FF
 BIT &C061
 BPL nofire
 BIT &C062
 BPL noslow
 STA KY1
 BMI nofast

.noslow

 STA KY7

.nofire

 BIT &C062
 BPL nofast
 STA KY2

.nofast

 LDA QQ11
 BEQ allkeys
 LDA #0
 STA KY12
 STA KY13
 STA KY14
 STA KY15
 STA KY16
 STA KY17
 STA KY18
 STA KY19
 STA KY20

.allkeys

 PLA
 TAY
 LDA thiskey
 TAX
 RTS  \!!
 \.......

.WARP

 LDX JUNK
 LDA FRIN+2,X
 ORA SSPR
 ORA MJ
 BNE WA1
 LDY K%+8
 BMI WA3
 TAY
 JSR MAS2
 CMP #2
 BCC WA1

.WA3

 LDY K%+NI%+8
 BMI WA2
 LDY #NI%
 JSR m
 CMP #2
 BCC WA1

.WA2

 LDA #&81
 STA S
 STA R
 STA P
 LDA K%+8
 JSR ADD
 STA K%+8
 LDA K%+NI%+8
 JSR ADD
 STA K%+NI%+8
 LDA #1
 STA QQ11
 STA MCNT
 LSR A
 STA EV
 LDX VIEW
 JMP LOOK1

.WA1

 JMP BOOP \ @@

.KYTB

 RTS
 EQUS "/ ,.XSAB"
 EQUB 27
 EQUS "TUMEJCP" \? <>XSABescTUMEJCP

.DKSANYKEY

 LDX #0
 BIT &C000
 BPL P%+6
 DEX
 BIT &C010
 TXA
 RTS
 \.DKS2 LDAKTRAN+7,X
\EOR JSTE
 RTS

.DKS3

 TXA
 CMP TGINT,Y
 BNE Dk3
 LDA DAMP,Y
 EOR #&FF
 STA DAMP,Y
 BPL P%+5
 JSR BELL
 JSR BELL
 TYA
 PHA
 LDY #20
 JSR DELAY
 PLA
 TAY

.Dk3

 RTS

.U%

\LDA #0
\LDY #&38
 \

.DKL3

\STA KLO,Y
\DEY 
\BNE DKL3
\STA KL
 RTS

.DOKEY

 JSR RDKEY
 LDA auto
 BEQ DK15
 \......
 JSR ZINF
 LDA #96
 STA INWK+14
 ORA #128
 STA INWK+22
 STA TYPE
 LDA DELTA
 STA INWK+27
 JSR DOCKIT
 LDA INWK+27
 CMP #22
 BCC P%+4
 LDA #22
 STA DELTA
 LDA #&FF
 LDX #(KY1-KLO)
 LDY INWK+28
 BEQ DK11
 BMI P%+4
 LDX #(KY2-KLO)
 STA KLO,X

.DK11

 LDA #128
 LDX #(KY3-KLO)
 ASL INWK+29
 BEQ DK12
 BCC P%+4
 LDX #(KY4-KLO)
 BIT INWK+29
 BPL DK14
 LDA #64
 STA JSTX
 LDA #0

.DK14

 STA KLO,X
 LDA JSTX

.DK12

 STA JSTX
 LDA #128
 LDX #(KY5-KLO)
 ASL INWK+30
 BEQ DK13
 BCS P%+4
 LDX #(KY6-KLO)
 STA KLO,X
 LDA JSTY

.DK13

 STA JSTY
 \.........

.DK15

 LDX JSTX
 LDA #20
 LDY KY3
 BEQ P%+5
 JSR BUMP2
 LDY KY4
 BEQ P%+5
 JSR REDU2
 STX JSTX
 LDX JSTY
 LDY KY5
 BEQ P%+5
 JSR REDU2
 LDY KY6
 BEQ P%+5
 JSR BUMP2
 STX JSTY

.DK4

 LDX thiskey
 STX KL
 CPX #'='
 \@@
 BNE DK2

.FREEZE

 JSR WSCAN
 JSR RDKEY
 CPX #'Q'
 BNE DK6
 LDX #&FF
 STX DNOIZ
 LDX #'Q'

.DK6

 LDY #0

.DKL4

 JSR DKS3
 INY
 CPY #(DISK+1-DAMP)
 BNE DKL4
 CPX #'S'
 BNE DK7
 LDA #0
 STA DNOIZ

.DK7

 CPX #27
 BNE P%+5
 JMP DEATH2
 CPX #'-'
 \@@
 BNE FREEZE

.DK2

 RTS

.TT217

 STY YSAV

.t

 LDY #2
 JSR DELAY
 JSR RDKEY
 BNE t

.t2

 JSR RDKEY
 BEQ t2
 LDY YSAV
 TAX

.out

 RTS

.me1

 STX DLY
 PHA
 LDA MCH
 JSR mes9
 PLA

.MESS

 PHA
 LDA #15
 LDX QQ11
 BEQ infrontvw
 JSR CLYNS
 LDA #25
 EQUB &2C

.infrontvw

 STA YC
 LDX #0
 STX QQ17
 LDA messXC
 STA XC
 PLA
 LDY #20
 CPX DLY
 BNE me1
 STY DLY
 STA MCH
 LDA #&C0
 STA DTW4
 LDA de
 LSR A
 LDA #0
 BCC P%+4
 LDA #10
 STA DTW5
 LDA MCH
 JSR TT27
 LDA #32
 SEC
 SBC DTW5
 LSR A
 STA messXC
 STA XC
 JSR MT15
 LDA MCH

.mes9

 JSR TT27
 LSR de
 BCC out
 LDA #253
 JMP TT27

.OUCH

 JSR DORND
 BMI out
 CPX #22
 BCS out
 LDA QQ20,X
 BEQ out
 LDA DLY
 BNE out
 LDY #3
 STY de
 STA QQ20,X
 CPX #17
 BCS ou1
 TXA
 ADC #208
 JMP MESS \was BNE <<----

.ou1

 BEQ ou2
 CPX #18
 BEQ ou3
 TXA
 ADC #113-20
 JMP MESS

.ou2

 lda #108
 JMP MESS

.ou3

 lda #111
 JMP MESS

.QQ23 \ Prxs 

 EQUD &1068213
 EQUD &30A8114
 EQUD &7028341 \Food
 EQUD &1FE28528
 EQUD &FFB8553
 EQUD &33608C4
 EQUD &78081DEB \slvs..
 EQUD &3380E9A
 EQUD &7280675
 EQUD &1F11014E
 EQUD &71D0D7C \comps
 EQUD &3FDC89B0
 EQUD &03358120
 \EQUD &360A118
 EQUD &742A161
 EQUD &1F37A2AB \platnm
 EQUD &FFAC12D
 EQUD &7C00F35 \Gms.

.TI2

 TYA
 LDY #2
 JSR TIS3
 STA INWK+20 \ Uz = -(FxUx+FyUy)/Fz
 JMP TI3

.TI1

 TAX
 LDA XX15+1
 AND #&60
 BEQ TI2
 LDA #2
 JSR TIS3
 STA INWK+18
 JMP TI3

.TIDY

 LDA INWK+10
 STA XX15
 LDA INWK+12
 STA XX15+1
 LDA INWK+14
 STA XX15+2
 JSR NORM
 LDA XX15
 STA INWK+10
 LDA XX15+1
 STA INWK+12
 LDA XX15+2
 STA INWK+14
 LDY #4
 LDA XX15
 AND #&60
 BEQ TI1
 LDX #2
 LDA #0
 JSR TIS3
 STA INWK+16

.TI3

 LDA INWK+16
 STA XX15
 LDA INWK+18
 STA XX15+1
 LDA INWK+20
 STA XX15+2
 JSR NORM
 LDA XX15
 STA INWK+16
 LDA XX15+1
 STA INWK+18
 LDA XX15+2
 STA INWK+20
 LDA INWK+12
 STA Q
 LDA INWK+20
 JSR MULT12
 LDX INWK+14
 LDA INWK+18
 JSR TIS1
 EOR #128
 STA INWK+22
 LDA INWK+16
 JSR MULT12
 LDX INWK+10
 LDA INWK+20
 JSR TIS1
 EOR #128
 STA INWK+24
 LDA INWK+18
 JSR MULT12
 LDX INWK+12
 LDA INWK+16
 JSR TIS1
 EOR #128
 STA INWK+26 \FxU/96(LHS)
 LDA #0
 LDX #14

.TIL1

 STA INWK+9,X
 DEX
 DEX
 BPL TIL1
 RTS

.TIS2

 TAY
 AND #127
 CMP Q
 BCS TI4
 LDX #254
 STX T

.TIL2

 ASL A
 CMP Q
 BCC P%+4
 SBC Q
 ROL T
 BCS TIL2
 LDA T
 LSR A
 LSR A
 STA T
 LSR A
 ADC T
 STA T
 TYA
 AND #128
 ORA T
 RTS

.TI4

 TYA
 AND #128
 ORA #96
 RTS

.TIS3

 STA P+2
 LDA INWK+10,X
 STA Q
 LDA INWK+16,X
 JSR MULT12
 LDX INWK+10,Y
 STX Q
 LDA INWK+16,Y
 JSR MAD
 STX P
 LDY P+2
 LDX INWK+10,Y
 STX Q
 EOR #128

.DVIDT \ A = AP/Q 

 STA P+1
 EOR Q
 AND #128
 STA T
 LDA #0
 LDX #16
 ASL P
 ROL P+1
 ASL Q
 LSR Q

.DVL2

 ROL A
 CMP Q
 BCC P%+4
 SBC Q
 ROL P
 ROL P+1
 DEX
 BNE DVL2
 LDA P
 ORA T

.itsoff

 RTS
 \..............

.buf

 EQUB 2
 EQUB 15

.KTRAN

 EQUS "12345678901234567"
 \............

\ ******************************************************************************
\
\ Save ELTF.bin
\
\ ******************************************************************************

 PRINT "ELITE F"
 PRINT "Assembled at ", ~CODE_F%
 PRINT "Ends at ", ~P%
 PRINT "Code size is ", ~(P% - CODE_F%)
 PRINT "Execute at ", ~LOAD%
 PRINT "Reload at ", ~LOAD_F%

 PRINT "S.ELTF ", ~CODE_F%, " ", ~P%, " ", ~LOAD%, " ", ~LOAD_F%
 SAVE "versions/apple/3-assembled-output/ELTF.bin", CODE_F%, P%, LOAD%

\ ******************************************************************************
\
\ ELITE G FILE
\
\ Produces the binary file ELTG.bin that gets loaded by elite-bcfs.asm.
\
\ ******************************************************************************

 CODE_G% = P%

 LOAD_G% = LOAD% + P% - CODE%

.SHPPT

 JSR PROJ
 ORA K3+1
 BNE nono
 LDA K4
 CMP #Y*2-2
 BCS nono
 JSR Shpt
 LDA K4
 CLC
 ADC #1
 JSR Shpt
 LDA #8
 ORA XX1+31
 STA XX1+31
 JMP LSCLR

.nono

 lda #&F7
 and XX1+31
 sta XX1+31
 JMP LSCLR

.Shpt

 STA XX15+1
 STA XX15+3
 LDA K3
 STA XX15
 CLC
 ADC #3
 BCC P%+4
 LDA #&FF
 STA XX15+2
 JMP LSPUT

.LL5

 \2BSQRT Q = SQR(RQ)
 LDY R
 LDA Q
 STA S
 LDX #0
 STX Q
 LDA #8
 STA T

.LL6

 CPX Q
 BCC LL7
 BNE P%+6
 CPY #&40
 BCC LL7
 TYA
 SBC #&40
 TAY
 TXA
 SBC Q
 TAX

.LL7

 ROL Q
 ASL S
 TYA
 ROL A
 TAY
 TXA
 ROL A
 TAX
 ASL S
 TYA
 ROL A
 TAY
 TXA
 ROL A
 TAX
 DEC T
 BNE LL6
 RTS

.LL28

 \BFRDIV R = A*256/Q
 CMP Q
 BCS LL2
 STA widget
 TAX
 BEQ LLfix
 LDA logL,X
 LDX Q
 SEC
 SBC logL,X
 LDX widget
 LDA log,X
 LDX Q
 SBC log,X
 BCS LL2
 TAX
 LDA alogh,X

.LLfix

 STA R
 RTS
 \LL28 CMPQ
 BCS LL2
 LDX #254
 STX R

.LL31

 ASL A
 BCS LL29
 CMP Q
 BCC P%+4
 SBC Q
 ROL R
 BCS LL31
 RTS

.LL29

 SBC Q
 SEC
 ROL R
 BCS LL31
 LDA R
 RTS

.LL2

 LDA #&FF
 STA R
 RTS

.LL38

 \BADD(S)A = R+Q(SA)
 EOR S
 BMI LL39
 LDA Q
 CLC
 ADC R
 RTS

.LL39

 LDA R
 SEC
 SBC Q
 BCC LL40
 CLC
 RTS

.LL40

 PHA
 LDA S
 EOR #128
 STA S
 PLA
 EOR #255
 ADC #1
 RTS

.LL51

 \XX12 = XX15.XX16
 LDX #0
 LDY #0

.ll51

 LDA XX15
 STA Q
 LDA XX16,X
 JSR FMLTU
 STA T
 LDA XX15+1
 EOR XX16+1,X
 STA S
 LDA XX15+2
 STA Q
 LDA XX16+2,X
 JSR FMLTU
 STA Q
 LDA T
 STA R
 LDA XX15+3
 EOR XX16+3,X
 JSR LL38
 STA T
 LDA XX15+4
 STA Q
 LDA XX16+4,X
 JSR FMLTU
 STA Q
 LDA T
 STA R
 LDA XX15+5
 EOR XX16+5,X
 JSR LL38
 STA XX12,Y
 LDA S
 STA XX12+1,Y
 INY
 INY
 TXA
 CLC
 ADC #6
 TAX
 CMP #17
 BCC ll51
 RTS

.LL25

 JMP PLANET 

.LL9

 \ENTRY
 LDA TYPE
 BMI LL25
 LDA #31
 STA XX4
 LDY #1
 STY LSNUM
 DEY
 LDA #8
 BIT XX1+31
 BNE P%+5
 LDA #0
 EQUB &2C
 LDA (XX19),Y
 STA LSNUM2
 LDA NEWB
 BMI EE51
 LDA #32
 BIT XX1+31
 BNE EE28
 BPL EE28
 \Initiate explosion
 ORA XX1+31
 AND #&3F
 STA XX1+31
 LDA #0
 LDY #28
 STA (INF),Y
 LDY #30
 STA (INF),Y
 JSR EE51
 LDY #1
 LDA #18
 STA (XX19),Y
 LDY #7
 LDA (XX0),Y
 LDY #2
 STA (XX19),Y

.EE55

 INY
 JSR DORND
 STA (XX19),Y
 CPY #6
 BNE EE55

.EE28

 LDA XX1+8

.EE49

 BPL LL10

.LL14

 LDA XX1+31
 AND #32
 BEQ EE51
 LDA XX1+31
 AND #&F7
 STA XX1+31
 JMP DOEXP

.EE51

 LDA #8
 BIT XX1+31
 BEQ LL10-1
 EOR XX1+31
 STA XX1+31
 JMP LSCLR
 RTS

.LL10

 LDA XX1+7
 CMP #&C0
 BCS LL14
 LDA XX1
 CMP XX1+6
 LDA XX1+1
 SBC XX1+7
 BCS LL14
 LDA XX1+3
 CMP XX1+6
 LDA XX1+4
 SBC XX1+7
 BCS LL14
 LDY #6
 LDA (XX0),Y
 TAX
 LDA #255
 STA XX3,X
 STA XX3+1,X
 LDA XX1+6
 STA T
 LDA XX1+7
 LSR A
 ROR T
 LSR A
 ROR T
 LSR A
 ROR T
 LSR A
 BNE LL13
 LDA T
 ROR A
 LSR A
 LSR A
 LSR A
 STA XX4
 BPL LL17

.LL13

 LDY #13
 LDA (XX0),Y
 CMP XX1+7
 BCS LL17
 LDA #32
 AND XX1+31
 BNE LL17
 JMP SHPPT

.LL17

 LDX #5

.LL15

 LDA XX1+21,X
 STA XX16,X
 LDA XX1+15,X
 STA XX16+6,X
 LDA XX1+9,X
 STA XX16+12,X
 DEX
 BPL LL15
 LDA #197 \NORM
 STA Q
 LDY #16

.LL21

 LDA XX16,Y
 ASL A
 LDA XX16+1,Y
 ROL A
 JSR LL28
 LDX R
 STX XX16,Y
 DEY
 DEY
 BPL LL21
 LDX #8

.ll91

 LDA XX1,X
 STA XX18,X
 DEX
 BPL ll91
 LDA #255
 STA XX2+15
 LDY #12
 LDA XX1+31
 AND #32
 BEQ EE29
 LDA (XX0),Y
 LSR A
 LSR A
 TAX
 LDA #&FF

.EE30

 STA XX2,X
 DEX
 BPL EE30
 INX
 STX XX4

.LL41

 JMP LL42

.EE29

 LDA (XX0),Y
 BEQ LL41
 STA XX20
 \DtProd^XX2
 LDY #18
 LDA (XX0),Y
 TAX
 LDA XX18+7

.LL90

 TAY
 BEQ LL91
 INX
 LSR XX18+4
 ROR XX18+3
 LSR XX18+1
 ROR XX18
 LSR A
 ROR XX18+6
 TAY
 BNE LL90+3

.LL91

 STX XX17
 LDA XX18+8
 STA XX15+5
 LDA XX18
 STA XX15
 LDA XX18+2
 STA XX15+1
 LDA XX18+3
 STA XX15+2
 LDA XX18+5
 STA XX15+3
 LDA XX18+6
 STA XX15+4
 JSR LL51
 LDA XX12
 STA XX18
 LDA XX12+1
 STA XX18+2
 LDA XX12+2
 STA XX18+3
 LDA XX12+3
 STA XX18+5
 LDA XX12+4
 STA XX18+6
 LDA XX12+5
 STA XX18+8
 LDY #4
 LDA (XX0),Y
 CLC
 ADC XX0
 STA V
 LDY #17
 LDA (XX0),Y
 ADC XX0+1
 STA V+1
 LDY #0

.LL86

 LDA (V),Y
 STA XX12+1
 AND #31
 CMP XX4
 BCS LL87
 TYA
 LSR A
 LSR A
 TAX
 LDA #255
 STA XX2,X
 TYA
 ADC #4
 TAY
 JMP LL88

.LL87

 LDA XX12+1
 ASL A
 STA XX12+3
 ASL A
 STA XX12+5
 INY
 LDA (V),Y
 STA XX12
 INY
 LDA (V),Y
 STA XX12+2
 INY
 LDA (V),Y
 STA XX12+4
 LDX XX17
 CPX #4
 BCC LL92

.LL143

 \Fce ofst<<PV
 LDA XX18
 STA XX15
 LDA XX18+2
 STA XX15+1
 LDA XX18+3
 STA XX15+2
 LDA XX18+5
 STA XX15+3
 LDA XX18+6
 STA XX15+4
 LDA XX18+8
 STA XX15+5
 JMP LL89

.ovflw

 LSR XX18
 LSR XX18+6
 LSR XX18+3
 LDX #1

.LL92

 LDA XX12
 STA XX15
 LDA XX12+2
 STA XX15+2
 LDA XX12+4

.LL93

 DEX
 BMI LL94
 LSR XX15
 LSR XX15+2
 LSR A
 DEX
 BPL LL93+3

.LL94

 STA R
 LDA XX12+5
 STA S
 LDA XX18+6
 STA Q
 LDA XX18+8
 JSR LL38
 BCS ovflw
 STA XX15+4
 LDA S
 STA XX15+5
 LDA XX15
 STA R
 LDA XX12+1
 STA S
 LDA XX18
 STA Q
 LDA XX18+2
 JSR LL38
 BCS ovflw
 STA XX15
 LDA S
 STA XX15+1
 LDA XX15+2
 STA R
 LDA XX12+3
 STA S
 LDA XX18+3
 STA Q
 LDA XX18+5
 JSR LL38
 BCS ovflw
 STA XX15+2
 LDA S
 STA XX15+3

.LL89

 LDA XX12
 STA Q
 LDA XX15
 JSR FMLTU
 STA T
 LDA XX12+1
 EOR XX15+1
 STA S
 LDA XX12+2
 STA Q
 LDA XX15+2
 JSR FMLTU
 STA Q
 LDA T
 STA R
 LDA XX12+3
 EOR XX15+3
 JSR LL38
 STA T
 LDA XX12+4
 STA Q
 LDA XX15+4
 JSR FMLTU
 STA Q
 LDA T
 STA R
 LDA XX15+5
 EOR XX12+5
 JSR LL38
 PHA
 TYA
 LSR A
 LSR A
 TAX
 PLA
 BIT S
 BMI P%+4
 LDA #0
 STA XX2,X
 INY

.LL88

 CPY XX20
 BCS LL42
 JMP LL86

.LL42

 \ndeX-Ycrds
 \TrnspMat
 LDY XX16+2
 LDX XX16+3
 LDA XX16+6
 STA XX16+2
 LDA XX16+7
 STA XX16+3
 STY XX16+6
 STX XX16+7
 LDY XX16+4
 LDX XX16+5
 LDA XX16+12
 STA XX16+4
 LDA XX16+13
 STA XX16+5
 STY XX16+12
 STX XX16+13
 LDY XX16+10
 LDX XX16+11
 LDA XX16+14
 STA XX16+10
 LDA XX16+15
 STA XX16+11
 STY XX16+14
 STX XX16+15
 LDY #8
 LDA (XX0),Y
 STA XX20
 LDA XX0
 CLC
 ADC #20
 STA V
 LDA XX0+1
 ADC #0
 STA V+1
 LDY #0
 STY CNT

.LL48

 STY XX17
 LDA (V),Y
 STA XX15
 INY
 LDA (V),Y
 STA XX15+2
 INY
 LDA (V),Y
 STA XX15+4
 INY
 LDA (V),Y
 STA T
 AND #31
 CMP XX4
 BCC LL49-3
 INY
 LDA (V),Y
 STA P
 AND #15
 TAX
 LDA XX2,X
 BNE LL49
 LDA P
 LSR A
 LSR A
 LSR A
 LSR A
 TAX
 LDA XX2,X
 BNE LL49
 INY
 LDA (V),Y
 STA P
 AND #15
 TAX
 LDA XX2,X
 BNE LL49
 LDA P
 LSR A
 LSR A
 LSR A
 LSR A
 TAX
 LDA XX2,X
 BNE LL49
 JMP LL50

.LL49

 LDA T
 STA XX15+1
 ASL A
 STA XX15+3
 ASL A
 STA XX15+5
 JSR LL51
 LDA XX1+2
 STA XX15+2
 EOR XX12+1
 BMI LL52
 CLC
 LDA XX12
 ADC XX1
 STA XX15
 LDA XX1+1
 ADC #0
 STA XX15+1
 JMP LL53

.LL52

 LDA XX1
 SEC
 SBC XX12
 STA XX15
 LDA XX1+1
 SBC #0
 STA XX15+1
 BCS LL53
 EOR #&FF
 STA XX15+1
 LDA #1
 SBC XX15
 STA XX15
 BCC P%+4
 INC XX15+1
 LDA XX15+2
 EOR #128
 STA XX15+2

.LL53

 LDA XX1+5
 STA XX15+5
 EOR XX12+3
 BMI LL54
 CLC
 LDA XX12+2
 ADC XX1+3
 STA XX15+3
 LDA XX1+4
 ADC #0
 STA XX15+4
 JMP LL55

.LL54

 LDA XX1+3
 SEC
 SBC XX12+2
 STA XX15+3
 LDA XX1+4
 SBC #0
 STA XX15+4
 BCS LL55
 EOR #255
 STA XX15+4
 LDA XX15+3
 EOR #255
 ADC #1
 STA XX15+3
 LDA XX15+5
 EOR #128
 STA XX15+5
 BCC LL55
 INC XX15+4

.LL55

 LDA XX12+5
 BMI LL56
 LDA XX12+4
 CLC
 ADC XX1+6
 STA T
 LDA XX1+7
 ADC #0
 STA U
 JMP LL57

.LL61

 LDX Q
 BEQ LL84
 LDX #0

.LL63

 LSR A
 INX
 CMP Q
 BCS LL63
 STX S
 JSR LL28
 LDX S
 LDA R

.LL64

 ASL A
 ROL U
 BMI LL84
 DEX
 BNE LL64
 STA R
 RTS

.LL84

 LDA #50
 STA R
 STA U
 RTS

.LL62

 LDA #128
 SEC
 SBC R
 STA XX3,X
 INX
 LDA #0
 SBC U
 STA XX3,X
 JMP LL66

.LL56

 LDA XX1+6
 SEC
 SBC XX12+4
 STA T
 LDA XX1+7
 SBC #0
 STA U
 BCC LL140
 BNE LL57
 LDA T
 CMP #4
 BCS LL57

.LL140

 LDA #0
 STA U
 LDA #4
 STA T

.LL57

 LDA U
 ORA XX15+1
 ORA XX15+4
 BEQ LL60
 LSR XX15+1
 ROR XX15
 LSR XX15+4
 ROR XX15+3
 LSR U
 ROR T
 JMP LL57

.LL60

 LDA T
 STA Q
 LDA XX15
 CMP Q
 BCC LL69
 JSR LL61
 JMP LL69+3

.LL69

 JSR LL28
 LDX CNT
 LDA XX15+2
 BMI LL62
 LDA R
 CLC
 ADC #128
 STA XX3,X
 INX
 LDA U
 ADC #0
 STA XX3,X

.LL66

 TXA
 PHA
 LDA #0
 STA U
 LDA T
 STA Q
 LDA XX15+3
 CMP Q
 BCC LL67
 JSR LL61
 JMP LL68

.LL70

 LDA #Y
 CLC
 ADC R
 STA XX3,X
 INX
 LDA #0
 ADC U
 STA XX3,X
 JMP LL50

.LL67

 JSR LL28

.LL68

 PLA
 TAX
 INX
 LDA XX15+5
 BMI LL70
 LDA #Y
 SEC
 SBC R
 STA XX3,X
 INX
 LDA #0
 SBC U
 STA XX3,X

.LL50

 CLC
 LDA CNT
 ADC #4
 STA CNT
 LDA XX17
 ADC #6
 TAY
 BCS LL72
 CMP XX20
 BCS LL72
 JMP LL48 

.LL72

 LDA XX1+31
 AND #32
 BEQ EE31
 LDA XX1+31
 ORA #8
 STA XX1+31
 JMP DOEXP

.EE31

 LDY #9
 LDA (XX0),Y
 STA XX20
 LDA #8
 ORA XX1+31
 STA XX1+31
 LDY #0
\STY LSNUM
 STY XX17
 BIT XX1+31
 BVC LL170
 LDA XX1+31
 AND #&BF
 STA XX1+31
 LDY #6
 LDA (XX0),Y
 TAY
 LDX XX3,Y
 STX XX15
 INX
 BEQ LL170
 LDX XX3+1,Y
 STX XX15+1
 INX
 BEQ LL170
 LDX XX3+2,Y
 STX XX15+2
 LDX XX3+3,Y
 STX XX15+3
 LDA #0
 STA XX15+4
 STA XX15+5
 STA XX12+1
 LDA XX1+6
 STA XX12
 LDA XX1+2
 BPL P%+4
 DEC XX15+4
 JSR CLIP
 BCS LL170
 JSR LSPUT

.LL170

 \
 \ Calculate new lines
 LDY #3
 CLC
 LDA (XX0),Y
 ADC XX0
 STA V
 LDY #16
 LDA (XX0),Y
 ADC XX0+1
 STA V+1
 LDY #5
 LDA (XX0),Y
 STA CNT

.LL75

 LDY #0
 LDA (V),Y
 CMP XX4
 BCC LL78 \Priority
 INY
 LDA (V),Y
 STA P
 AND #15
 TAX
 LDA XX2,X
 BNE LL79 \norm 1
 LDA P
 LSR A
 LSR A
 LSR A
 LSR A
 TAX
 LDA XX2,X
 BEQ LL78 \norm 2

.LL79

 INY
 LDA (V),Y
 TAX
 LDA XX3,X
 STA XX15
 LDA XX3+1,X
 STA XX15+1
 LDA XX3+2,X
 STA XX15+2
 LDA XX3+3,X
 STA XX15+3
 INY
 LDA (V),Y
 TAX
 LDA XX3,X
 STA XX15+4
 LDA XX3+2,X
 STA XX12
 LDA XX3+3,X
 STA XX12+1
 LDA XX3+1,X
 STA XX15+5
 JSR CLIP2
 BCS LL78
 JSR LSPUT \do line

.LL78

 LDA LSNUM
 CMP CNT
 BCS LL81
 LDA V
 CLC
 ADC #4
 STA V
 BCC P%+4
 INC V+1
 INC XX17
 LDY XX17
 CPY XX20
 BCC LL75

.LL81

 JMP LSCLR \<3BS>**

.LL118

 \move XX15,XX15+2 to screen-grad.XX12+2
 LDA XX15+1
 BPL LL119
 STA S
 JSR LL120  \ X1<0
 TXA
 CLC
 ADC XX15+2
 STA XX15+2
 TYA
 ADC XX15+3
 STA XX15+3
 LDA #0
 STA XX15
 STA XX15+1
 TAX

.LL119

 BEQ LL134
 STA S
 DEC S
 JSR LL120 \ X1>255
 TXA
 CLC
 ADC XX15+2
 STA XX15+2
 TYA
 ADC XX15+3
 STA XX15+3
 LDX #&FF
 STX XX15
 INX
 STX XX15+1

.LL134

 LDA XX15+3
 BPL LL135
 STA S
 LDA XX15+2
 STA R   \ Y1<0
 JSR LL123
 TXA
 CLC
 ADC XX15
 STA XX15
 TYA
 ADC XX15+1
 STA XX15+1
 LDA #0
 STA XX15+2
 STA XX15+3

.LL135

\BNE LL139
 LDA XX15+2
 SEC
 SBC #Y*2
 STA R     \ Y1>191
 LDA XX15+3
 SBC #0
 STA S
 BCC LL136

.LL139

 JSR LL123
 TXA
 CLC
 ADC XX15
 STA XX15
 TYA
 ADC XX15+1
 STA XX15+1
 LDA #Y*2-1
 STA XX15+2
 LDA #0
 STA XX15+3

.LL136

 RTS
 \ YX = SR*M/256 - dedicated for CLIP

.LL120

 LDA XX15
 STA R
 \.LL120
 JSR LL129
 PHA
 LDX T
 BNE LL121

.LL122

 LDA #0
 TAX
 TAY
 LSR S
 ROR R
 ASL Q
 BCC LL126

.LL125

 TXA
 CLC
 ADC R
 TAX
 TYA
 ADC S
 TAY

.LL126

 LSR S
 ROR R
 ASL Q
 BCS LL125
 BNE LL126
 PLA
 BPL LL133
 RTS
 \ YX = SR*256/M (M = grad.)

.LL123

 JSR LL129
 PHA
 LDX T
 BNE LL122

.LL121

 LDA #255
 TAY
 ASL A
 TAX

.LL130

 ASL R
 ROL S
 LDA S
 BCS LL131
 CMP Q
 BCC LL132

.LL131

 SBC Q
 STA S
 LDA R
 SBC #0
 STA R
 SEC

.LL132

 TXA
 ROL A
 TAX
 TYA
 ROL A
 TAY
 BCS LL130
 PLA
 BMI LL128

.LL133

 TXA
 EOR #&FF
\CLC 
 ADC #1
 TAX
 TYA
 EOR #&FF
 ADC #0
 TAY

.LL128

 RTS

.LL129

 LDX XX12+2
 STX Q
 LDA S
 BPL LL127
 LDA #0
 SEC
 SBC R
 STA R
 LDA S
 PHA
 EOR #255
 ADC #0
 STA S
 PLA

.LL127

 EOR XX12+3
 RTS

.LL145 

.CLIP

 LDA #0
 STA SWAP
 LDA XX15+5

.CLIP2

 LDX #Y*2-1
 ORA XX12+1
 BNE LL107
 CPX XX12
 BCC LL107
 LDX #0

.LL107

 STX XX13
 LDA XX15+1
 ORA XX15+3
 BNE LL83
 LDA #Y*2-1
 CMP XX15+2
 BCC LL83
 LDA XX13
 BNE LL108

.LL146

 LDA XX15+2
 STA XX15+1
 LDA XX15+4
 STA XX15+2
 LDA XX12
 STA XX15+3
 CLC
 RTS

.LL109

 SEC
 RTS

.LL108

 LSR XX13

.LL83

 LDA XX13
 BPL LL115
 LDA XX15+1
 AND XX15+5
 BMI LL109
 LDA XX15+3
 AND XX12+1
 BMI LL109
 LDX XX15+1
 DEX
 TXA
 LDX XX15+5
 DEX
 STX XX12+2
 ORA XX12+2
 BPL LL109
 LDA XX15+2
 CMP #Y*2
 LDA XX15+3
 SBC #0
 STA XX12+2
 LDA XX12
 CMP #Y*2
 LDA XX12+1
 SBC #0
 ORA XX12+2
 BPL LL109

.LL115

 TYA
 PHA
 LDA XX15+4
 SEC
 SBC XX15
 STA XX12+2
 LDA XX15+5
 SBC XX15+1
 STA XX12+3
 LDA XX12
 SEC
 SBC XX15+2
 STA XX12+4
 LDA XX12+1
 SBC XX15+3
 STA XX12+5
 EOR XX12+3
 STA S
 LDA XX12+5
 BPL LL110
 LDA #0
 SEC
 SBC XX12+4
 STA XX12+4
 LDA #0
 SBC XX12+5
 STA XX12+5

.LL110

 LDA XX12+3
 BPL LL111
 SEC
 LDA #0
 SBC XX12+2
 STA XX12+2
 LDA #0
 SBC XX12+3
\GET grad

.LL111

 TAX
 BNE LL112
 LDX XX12+5
 BEQ LL113

.LL112

 LSR A
 ROR XX12+2
 LSR XX12+5
 ROR XX12+4
 JMP LL111

.LL113

 STX T
 LDA XX12+2
 CMP XX12+4
 BCC LL114
 STA Q
 LDA XX12+4
 JSR LL28
 \ Use Y/X grad.
 JMP LL116

.LL114

 LDA XX12+4
 STA Q
 LDA XX12+2
 JSR LL28
 \ Use X/Y grad.
 DEC T

.LL116

 LDA R
 STA XX12+2
 LDA S
 STA XX12+3
 LDA XX13
 BEQ LL138
 BPL LLX117

.LL138

 JSR LL118
 LDA XX13
 BPL LL124

.LL117

 LDA XX15+1
 ORA XX15+3
 BNE LL137
 LDA XX15+2
 CMP #Y*2
 BCS LL137

.LLX117

 LDX XX15
 LDA XX15+4
 STA XX15
 STX XX15+4
 LDA XX15+5
 LDX XX15+1
 STX XX15+5
 STA XX15+1
 LDX XX15+2
 LDA XX12
 STA XX15+2
 STX XX12
 LDA XX12+1
 LDX XX15+3
 STX XX12+1
 STA XX15+3
 JSR LL118
 DEC SWAP

.LL124

 PLA
 TAY
 JMP LL146

.LL137

 PLA
 TAY
 SEC
 RTS

.LSCLR

 LDY LSNUM

.LSC1

 CPY LSNUM2
 BCS LSC2
 LDA (XX19),Y
 INY
 STA XX15
 LDA (XX19),Y
 INY
 STA XX15+1
 LDA (XX19),Y
 INY
 STA XX15+2
 LDA (XX19),Y
 INY
 STA XX15+3
 JSR LOIN
 JMP LSC1

.LSC2

 LDA LSNUM
 LDY #0
 STA (XX19),Y

.LSC3

 RTS

.LSPUT

 LDY LSNUM
 CPY LSNUM2
 PHP
 LDX #3

.LSC4

 LDA XX15,X
 STA XX12,X
 DEX
 BPL LSC4
 JSR LOIN
 LDA (XX19),Y
 STA XX15
 LDA XX12
 STA (XX19),Y
 INY
 LDA (XX19),Y
 STA XX15+1
 LDA XX12+1
 STA (XX19),Y
 INY
 LDA (XX19),Y
 STA XX15+2
 LDA XX12+2
 STA (XX19),Y
 INY
 LDA (XX19),Y
 STA XX15+3
 LDA XX12+3
 STA (XX19),Y
 INY
 STY LSNUM
 PLP
 BCS LSC3
 JMP LOIN

\ ******************************************************************************
\
\ Save ELTG.bin
\
\ ******************************************************************************

 PRINT "ELITE G"
 PRINT "Assembled at ", ~CODE_G%
 PRINT "Ends at ", ~P%
 PRINT "Code size is ", ~(P% - CODE_G%)
 PRINT "Execute at ", ~LOAD%
 PRINT "Reload at ", ~LOAD_G%

 PRINT "S.ELTG ", ~CODE_G%, " ", ~P%, " ", ~LOAD%, " ", ~LOAD_G%
 SAVE "versions/apple/3-assembled-output/ELTG.bin", CODE_G%, P%, LOAD%

\ ******************************************************************************
\
\ ELITE H FILE
\
\ Produces the binary file ELTH.bin that gets loaded by elite-bcfs.asm.
\
\ ******************************************************************************

 CODE_H% = P%

 LOAD_H% = LOAD% + P% - CODE%

.MVEIT

 LDA INWK+31
 AND #&A0
 BNE MV30
 LDA MCNT
 EOR XSAV
 AND #15
 BNE MV3
 JSR TIDY

.MV3

 LDX TYPE
 BPL P%+5
 JMP MV40
 LDA INWK+32
 BPL MV30
 CPX #MSL
 BEQ MV26
 LDA MCNT
 EOR XSAV
 AND #7
 BNE MV30

.MV26

 JSR TACTICS

.MV30

 JSR SCAN
 LDA INWK+27
 ASL A
 ASL A
 STA Q
 LDA INWK+10
 AND #127
 JSR FMLTU
 STA R
 LDA INWK+10
 LDX #0
 JSR MVT1-2
 LDA INWK+12
 AND #127
 JSR FMLTU
 STA R
 LDA INWK+12
 LDX #3
 JSR MVT1-2
 LDA INWK+14
 AND #127
 JSR FMLTU
 STA R
 LDA INWK+14
 LDX #6
 JSR MVT1-2
 LDA INWK+27
 CLC
 ADC INWK+28
 BPL P%+4
 LDA #0
 LDY #15
 CMP (XX0),Y
 BCC P%+4
 LDA (XX0),Y
 STA INWK+27
 LDA #0
 STA INWK+28
 LDX ALP1
 LDA INWK
 EOR #&FF
 STA P
 LDA INWK+1
 JSR MLTU2-2
 STA P+2
 LDA ALP2+1
 EOR INWK+2
 LDX #3
 JSR MVT6
 STA K2+3
 LDA P+1
 STA K2+1
 EOR #&FF
 STA P
 LDA P+2
 STA K2+2 \ K2 = Y-aX
 LDX BET1
 JSR MLTU2-2
 STA P+2
 LDA K2+3
 EOR BET2
 LDX #6
 JSR MVT6
 STA INWK+8
 LDA P+1
 STA INWK+6
 EOR #&FF
 STA P
 LDA P+2
 STA INWK+7 \ Z = Z+bK2
 JSR MLTU2
 STA P+2
 LDA K2+3
 STA INWK+5
 EOR BET2
 EOR INWK+8
 BPL MV43
 LDA P+1
 ADC K2+1
 STA INWK+3
 LDA P+2
 ADC K2+2
 STA INWK+4
 JMP MV44

.MV43

 LDA K2+1
 SBC P+1
 STA INWK+3
 LDA K2+2
 SBC P+2
 STA INWK+4
 BCS MV44
 LDA #1
 SBC INWK+3
 STA INWK+3
 LDA #0
 SBC INWK+4
 STA INWK+4
 LDA INWK+5
 EOR #128
 STA INWK+5

.MV44 \ Y = K2-bZ 

 LDX ALP1
 LDA INWK+3
 EOR #&FF
 STA P
 LDA INWK+4
 JSR MLTU2-2
 STA P+2
 LDA ALP2
 EOR INWK+5
 LDX #0
 JSR MVT6
 STA INWK+2
 LDA P+2
 STA INWK+1
 LDA P+1
 STA INWK \ X = X+aY

.MV45

 LDA DELTA
 STA R
 LDA #128
 LDX #6
 JSR MVT1
 LDA TYPE
 AND #&81
 CMP #&81
 BNE P%+3
 RTS \Z = Z-d
 LDY #9
 JSR MVS4
 LDY #15
 JSR MVS4
 LDY #21
 JSR MVS4
 LDA INWK+30
 AND #128
 STA RAT2
 LDA INWK+30
 AND #127
 BEQ MV8
 CMP #127
 SBC #0
 ORA RAT2
 STA INWK+30
 LDX #15
 LDY #9
 JSR MVS5
 LDX #17
 LDY #11
 JSR MVS5
 LDX #19
 LDY #13
 JSR MVS5

.MV8

 LDA INWK+29
 AND #128
 STA RAT2
 LDA INWK+29
 AND #127
 BEQ MV5
 CMP #127
 SBC #0
 ORA RAT2
 STA INWK+29
 LDX #15
 LDY #21
 JSR MVS5
 LDX #17
 LDY #23
 JSR MVS5
 LDX #19
 LDY #25
 JSR MVS5

.MV5

 LDA INWK+31
 AND #&A0
 BNE MVD1
 LDA INWK+31
 ORA #16
 STA INWK+31
 JMP SCAN

.MVD1

 LDA INWK+31
 AND #&EF
 STA INWK+31
 RTS
 AND #128

.MVT1

 ASL A
 STA S
 LDA #0
 ROR A
 STA T
 LSR S
 EOR INWK+2,X
 BMI MV10
 LDA R
 ADC INWK,X
 STA INWK,X
 LDA S
 ADC INWK+1,X
 STA INWK+1,X
 LDA INWK+2,X
 ADC #0
 ORA T
 STA INWK+2,X
 RTS

.MV10

 LDA INWK,X
 SEC
 SBC R
 STA INWK,X
 LDA INWK+1,X
 SBC S
 STA INWK+1,X
 LDA INWK+2,X
 AND #127
 SBC #0
 ORA #128
 EOR T
 STA INWK+2,X
 BCS MV11
 LDA #1
 SBC INWK,X
 STA INWK,X
 LDA #0
 SBC INWK+1,X
 STA INWK+1,X
 LDA #0
 SBC INWK+2,X
 AND #127
 ORA T
 STA INWK+2,X

.MV11

 RTS

.MVS4

 LDA ALPHA
 STA Q
 LDX INWK+2,Y
 STX R
 LDX INWK+3,Y
 STX S
 LDX INWK,Y
 STX P
 LDA INWK+1,Y
 EOR #128
 JSR MAD
 STA INWK+3,Y
 STX INWK+2,Y
 STXP \ Y = Y-aX
 LDX INWK,Y
 STX R
 LDX INWK+1,Y
 STX S
 LDA INWK+3,Y
 JSR MAD
 STA INWK+1,Y
 STX INWK,Y
 STXP \ X = X+aY
 LDA BETA
 STA Q
 LDX INWK+2,Y
 STX R
 LDX INWK+3,Y
 STX S
 LDX INWK+4,Y
 STX P
 LDA INWK+5,Y
 EOR #128
 JSR MAD
 STA INWK+3,Y
 STX INWK+2,Y
 STXP \ Y = Y-bZ
 LDX INWK+4,Y
 STX R
 LDX INWK+5,Y
 STX S
 LDA INWK+3,Y
 JSR MAD
 STA INWK+5,Y
 STX INWK+4,Y
 RTS \Z = Z+bY

.MVT6

 TAY
 EOR INWK+2,X
 BMI MV50
 LDA P+1
 CLC
 ADC INWK,X
 STA P+1
 LDA P+2
 ADC INWK+1,X
 STA P+2
 TYA
 RTS

.MV50

 LDA INWK,X
 SEC
 SBC P+1
 STA P+1
 LDA INWK+1,X
 SBC P+2
 STA P+2
 BCC MV51
 TYA
 EOR #128
 RTS

.MV51

 LDA #1
 SBC P+1
 STA P+1
 LDA #0
 SBC P+2
 STA P+2
 TYA
 RTS

.MV40

 LDA ALPHA
 EOR #128
 STA Q
 LDA INWK
 STA P
 LDA INWK+1
 STA P+1
 LDA INWK+2
 JSR MULT3
 LDX #3
 JSR MVT3 \ K = Y-aX
 LDA K+1
 STA K2+1
 STA P
 LDA K+2
 STA K2+2
 STA P+1
 LDA BETA
 STA Q
 LDA K+3
 STA K2+3
 JSR MULT3
 LDX #6
 JSR MVT3
 LDA K+1
 STA P
 STA INWK+6
 LDA K+2
 STA P+1
 STA INWK+7
 LDA K+3
 STA INWK+8 \ Z = Z+bK2
 EOR #128
 JSR MULT3
 LDA K+3
 AND #128
 STA T
 EOR K2+3
 BMI MV1
 LDA K
 CLC
 ADC K2
 LDA K+1
 ADC K2+1
 STA INWK+3
 LDA K+2
 ADC K2+2
 STA INWK+4
 LDA K+3
 ADC K2+3
 JMP MV2

.MV1

 LDA K
 SEC
 SBC K2
 LDA K+1
 SBC K2+1
 STA INWK+3
 LDA K+2
 SBC K2+2
 STA INWK+4
 LDA K2+3
 AND #127
 STA P
 LDA K+3
 AND #127
 SBC P
 STA P
 BCS MV2
 LDA #1
 SBC INWK+3
 STA INWK+3
 LDA #0
 SBC INWK+4
 STA INWK+4
 LDA #0
 SBC P
 ORA #128

.MV2

 EOR T
 STA INWK+5 \ Y = K2-bZ
 LDA ALPHA
 STA Q
 LDA INWK+3
 STA P
 LDA INWK+4
 STA P+1
 LDA INWK+5
 JSR MULT3
 LDX #0
 JSR MVT3
 LDA K+1
 STA INWK
 LDA K+2
 STA INWK+1
 LDA K+3
 STA INWK+2 \ X = X+aY
 JMP MV45
 \....

.PLUT

 LDX VIEW
 BEQ PU2-1

.PU1

 DEX
 BNE PU2
 LDA INWK+2
 EOR #128
 STA INWK+2
 LDA INWK+8
 EOR #128
 STA INWK+8
 LDA INWK+10
 EOR #128
 STA INWK+10
 LDA INWK+14
 EOR #128
 STA INWK+14
 LDA INWK+16
 EOR #128
 STA INWK+16
 LDA INWK+20
 EOR #128
 STA INWK+20
 LDA INWK+22
 EOR #128
 STA INWK+22
 LDA INWK+26
 EOR #128
 STA INWK+26
 RTS

.PU2

 LDA #0
 CPX #2
 ROR A
 STA RAT2
 EOR #128
 STA RAT
 LDA INWK
 LDX INWK+6
 STA INWK+6
 STX INWK
 LDA INWK+1
 LDX INWK+7
 STA INWK+7
 STX INWK+1
 LDA INWK+2
 EOR RAT
 TAX
 LDA INWK+8
 EOR RAT2
 STA INWK+2
 STX INWK+8
 LDY #9
 JSR PUS1
 LDY #15
 JSR PUS1
 LDY #21

.PUS1

 LDA INWK,Y
 LDX INWK+4,Y
 STA INWK+4,Y
 STX INWK,Y
 LDA INWK+1,Y
 EOR RAT
 TAX
 LDA INWK+5,Y
 EOR RAT2
 STA INWK+1,Y
 STX INWK+5,Y

.LO2

 RTS

.LQ

 STX VIEW
 JSR TT66
 JSR SIGHT
 LDA BOMB
 BPL P%+5
 JSR BOMBOFF \ @@
 JMP NWSTARS

.LOOK1

 LDA #0
 LDY QQ11
 BNE LQ
 CPX VIEW
 BEQ LO2
 STX VIEW
 JSR TT66
 JSR FLIP
 LDA BOMB
 BPL P%+5
 JSR BOMBOFF \@@
 JSR WPSHPS

.SIGHT

 LDY VIEW
 LDA LASER,Y
 BEQ LO2
 LDY #0
 CMP #POW
 BEQ SIG1
 INY
 CMP #(POW+128)
 BEQ SIG1
 INY
 CMP #Armlas
 BEQ SIG1
 INY

.SIG1

 LDA sightcol,Y
 STA COL
 LDA #128
 STA QQ19
 LDA #Y-24
 STA QQ19+1
 LDA #20
 STA QQ19+2
 JSR TT15
 LDA #10
 STA QQ19+2
 JMP TT15
 \.......

.sightcol

 EQUB BLUE
 EQUB RED
 EQUB WHITE
 EQUB WHITE

.beamcol

 EQUB VIOLET
 EQUB RED
 EQUB GREEN
 EQUB WHITE
\.TRIBTA
\EQUB 0
\EQUB 1
\EQUB 2
\EQUB 3
\EQUB 4 
\EQUB 5 
\EQUB 6 
\EQUB 6
\.TRIBMA
\EQUB 0
\EQUB 4
\EQUB &C
\EQUB &1C
\EQUB &3C
\EQUB &7C
\EQUB &FC
\EQUB &FC

.TT66

 STA QQ11

.TTX66

 JSR MT2
 LDA #0
 STA LSP
 LDA #128
 STA QQ17
 STA DTW2
 LDA #1
 STA XC
 STA YC
 JSR TTX66K
 LDA text
 BMI P%+5
 JSR FLFLLS
 LDA #0
 STA LAS2
 STA DLY
 STA de
 LDX QQ22+1
 BEQ OLDBOX
 JSR ee3

.OLDBOX 

 LDA #1
 STA YC
 LDA QQ11
 BNE tt66
 LDA #11
 STA XC
 LDA VIEW
 ORA #&60
 JSR TT27
 JSR TT162
 LDA #175
 JSR TT27

.tt66

 LDX #1
 STX XC
 STX YC
 DEX
 STX QQ17
 RTS

\ ******************************************************************************
\
\ Save ELTH.bin
\
\ ******************************************************************************

 PRINT "ELITE H"
 PRINT "Assembled at ", ~CODE_H%
 PRINT "Ends at ", ~P%
 PRINT "Code size is ", ~(P% - CODE_H%)
 PRINT "Execute at ", ~LOAD%
 PRINT "Reload at ", ~LOAD_H%

 PRINT "S.ELTH ", ~CODE_H%, " ", ~P%, " ", ~LOAD%, " ", ~LOAD_H%
 SAVE "versions/apple/3-assembled-output/ELTH.bin", CODE_H%, P%, LOAD%

\ ******************************************************************************
\
\ ELITE I FILE
\
\ Produces the binary file ELTI.bin that gets loaded by elite-bcfs.asm.
\
\ ******************************************************************************

 CODE_I% = P%

 LOAD_I% = LOAD% + P% - CODE%

.yetanotherrts 

.DEMON

 RTS \<<

.ECMOF

 LDA #0
 STA ECMA
 STA ECMP
 JMP ECBLB \@@

.SFRMIS

 LDX #MSL
 JSR SFS1-2
 BCC yetanotherrts
 LDA #&78
 JSR MESS
 LDY #50
 JMP SOHISS \ @@

.EXNO2

 LDA TALLYL
 CLC
 ADC KWL%-1,X
 STA TALLYL
 LDA TALLY
 ADC KWH%-1,X
 STA TALLY
 BCC davidscockup
 INC TALLY+1
 LDA #101
 JSR MESS

.davidscockup

 LDY #55
 BNE SOEXPL \ @@

.EXNO

 LDY #15
 BNE SOEXPL \ @@
 \...................

.BOOP

 LDY #99
 LDX #&FF
 BNE SOBEEP

.SOHISS

 BIT DNOIZ
 BMI SOUR

.SOHISS2 

 LDA &C030
 JSR DORND
 DEX
 NOP
 NOP
 BNE P%-3
 DEY
 BNE SOHISS2
 LDA &C030
 RTS

.EXNO3

 LDY #40

.SOEXPL

 BIT DNOIZ
 BMI SOUR
 LDX #50
 STX T3

.BEEPL4

 LDA &C030
 INC T3
 LDX T3
 DEX
 NOP
 NOP
 BNE P%-3
 JSR DORND
 DEX
 NOP
 BNE P%-2
 DEY
 BNE BEEPL4
 LDA &C030
 RTS

.BEEP

 LDY #30
 LDX #110

.SOBEEP

 BIT DNOIZ
 BMI SOUR
 STX T3

.BEEPL1

 LDA &C030
 LDX T3
 DEX
 BNE P%-1
 DEY
 BNE BEEPL1
 LDA &C030

.SOUR

 RTS

.SOBLIP

 BIT DNOIZ
 BMI SOUR
 STX T3

.BEEPL2

 LDA &C030
 DEC T3
 LDX T3
 DEX
 NOP
 BNE P%-2
 DEY
 BNE BEEPL2
 LDA &C030
 RTS

.LASNOISE

 LDY #11
 LDX #150

.SOBLOP

 BIT DNOIZ
 BMI SOUR
 STX T3

.BEEPL3

 LDA &C030
 INC T3
 INC T3
 LDX T3
 DEX
 BNE P%-1
 DEY
 BNE BEEPL3
 LDA &C030
 RTS

.LASNOISE2

 LDY #11
 LDX #130

.SOBOMB

 BIT DNOIZ
 BMI SOUR
 LDY #25

.SOHISS4

 LDA &C030
 JSR DORND
 AND #31
 ORA #&E0
 TAX
 DEX
 NOP
 BNE P%-2
 DEY
 BNE SOHISS4
 LDA &C030
 RTS

.CLICK

 BIT DNOIZ
 BMI SOUR2
 LDA &C030

.SOUR2

 RTS
 \............ 

.COLD

 \Page out KERNAL etc
 JSR HGR
 LDA #8
 STA SC+1
 LDX #2
 LDA #0
 STA SC
 TAY

.zerowksploop

 STA (SC),Y
 INY
 BNE zerowksploop
 INC SC+1
 DEX
 BNE zerowksploop

.zerowkl2

 STA &200,Y
 DEY
 BNE zerowkl2
 LDA #(NMIpissoff MOD 256)
 STA NMIV
 LDA #(NMIpissoff DIV 256)
 STA NMIV+1
 LDA #(CHPR2 MOD 256)
 STA CHRV
 LDA #(CHPR2 DIV 256)
 STA CHRV+1
 SEI

IF NOT(USA%)
 \UK CHECK
ENDIF

 RTS

.NMIpissoff

 CLI
 RTI

\ ******************************************************************************
\
\ Save ELTI.bin
\
\ ******************************************************************************

 PRINT "ELITE I"
 PRINT "Assembled at ", ~CODE_I%
 PRINT "Ends at ", ~P%
 PRINT "Code size is ", ~(P% - CODE_I%)
 PRINT "Execute at ", ~LOAD%
 PRINT "Reload at ", ~LOAD_I%

 PRINT "S.ELTI ", ~CODE_I%, " ", ~P%, " ", ~LOAD%, " ", ~LOAD_H%
 SAVE "versions/apple/3-assembled-output/ELTI.bin", CODE_I%, P%, LOAD%

\ ******************************************************************************
\
\ ELITE J FILE
\
\ Produces the binary file ELTJ.bin that gets loaded by elite-bcfs.asm.
\
\ ******************************************************************************

 CODE_J% = P%

 LOAD_J% = LOAD% + P% - CODE%

\ DOS_RW1

.comnam

 \ (must be 30 characters long - pad with spaces)
 EQUS "COMMANDER                     " 

.rfile

 \ read a Commander file from a DOS disc into buffer
 TSX
 STX stkptr
 JSR findf
 LDA #5
 BCS rfile3 \ branch if file not found
 JSR gettsl \ get track/sector list of file
 JSR rsect \ read first sector of file
 LDY #0

.rfile2

 LDA buffer+4,Y
 STA comfil,Y \ copy buffer to commander file
 INY
 CPY #comsiz \loop other way ## <2BS>
 BNE rfile2
 CLC

.rfile3

 RTS  \ C = 1 file not found, C = 0 file found and in buffer 

.wfile

 \ write a commander file from buffer to a DOS disc
 JSR MUTILATE
 TSX
 STX stkptr
 JSR findf
 BCC oldfil \ branch if file already exists 

.newfil

 \ save a new commander file
 JSR isfull \ check for at least two free sectors
 LDA #2
 BCS rfile3 \ branch if disc full
 JSR finde \ find an empty file entry
 LDA #3
 BCS rfile3 \ branch if cat full
 LDA tsltrk
 STA buffer,Y \ tsl track field
 LDA tslsct
 STA buffer+1,Y \ tsl sector field
 LDA #4
 STA buffer+2,Y \ file type = BINARY file
 LDA #2
 STA buffer+&21,Y \ sectors lo = 2
 LDA #0
 STA buffer+&22,Y \ sectors hi = 0
 TAX

.newfl2

 LDA comnam,X
 ORA #&80
 STA buffer+3,Y \ copy commander name to file name field
 INY
 INX
 CPX #30
 BNE newfl2
 JSR wsect \ write catalog sector to disc
 JSR isfull \ allocate two free sectors
 JSR wsect \ write VTOC

.newfl3

 LDA #0
 TAY

.newfl4

 STA buffer,Y \ init tsl
 INY
 BNE newfl4
 LDA filtrk
 STA buffer+12 \ track of commander file
 LDA filsct
 STA buffer+13 \ sector of commander file
 LDA tsltrk
 STA track
 LDA tslsct
 STA sector
 JSR wsect \ write tsl sector
 LDA filtrk
 STA track
 LDA filsct
 STA sector
 BPL oldfl2 \ always 

.oldfil

 \ update an existing commander file
 JSR gettsl \ get tsl of file

.oldfl2

 LDY #0

.oldfl3

 LDA comfil,Y
 STA buffer+4,Y \ copy commander file to buffer
 INY
 CPY #comsiz
 BNE oldfl3
 JMP wsect \ write first sector of commander file 

.findf

 \ find an existing file
 CLC
 BCC rentry \ always

.finde

 \ find a new entry
 SEC

.rentry

 ROR atemp0
 JSR rvtoc \ read VTOC

.rentr2

 LDA buffer+1 \ read track of next catalog
 STA track
 LDA buffer+2 \ read sector of next catalog
 STA sector
 JSR rsect \ read catalog sector
 LDY #&B \ point to first entry in sector

.rentr3

 LDA buffer,Y
 BIT atemp0
 BPL rentr4 \ branch if searching catalog for a file
 TAX
 BEQ rentr6 \ branch if found blank entry
 CMP #&FF \INX ##
 BEQ rentr6 \ branch if found deleted entry
 BNE rentr8 \ branch if used entry

.rentr4

 TAX
 BEQ rentr9 \ branch if last catalog entry
 CMP #&FF
 BEQ rentr8 \ branch if deleted file
 TYA
 PHA
 LDX #0

.rentr5

 LDA buffer+3,Y
 AND #&7F
 CMP comnam,X
 BNE rentr7 \ branch if names don't match
 INY
 INX
 CPX #30
 BNE rentr5
 PLA
 TAY \ Y points to start of file entry

.rentr6

 CLC \ signifies file found
 RTS

.rentr7

 PLA
 TAY

.rentr8

 TYA
 CLC
 ADC #35
 TAY
 BNE rentr3 \ branch if not reached last entry
 LDA buffer+1
 BNE rentr2 \ branch if not last catalog sector

.rentr9

 SEC \ signifies file not found
 RTS 

.getsct

 \ allocate one free sector from VTOC - doesn't update VTOC on disc
 LDA #0
 STA ztemp0 \ init allocation flag
 BEQ getsc4 \ always

.getsc3

 LDA dirtrk

.getsc4

 CLC
 ADC fretrk \ add last allocated track to direction of allocation
 BEQ getsc5 \ branch if track 0
 CMP tracks
 BCC getsc7 \ branch if not last track+1
 LDA #&FF
 BNE getsc6 \ always - direction  =  backwards

.getsc5

 LDA ztemp0
 BNE getscB \ branch if no free sectors - disc full
 LDA #1 \ direction = forwards
 STA ztemp0

.getsc6

 STA dirtrk \ change direction
 CLC
 ADC #17

.getsc7

 STA fretrk
 ASL A
 ASL A
 TAY
 LDX #16
 LDA bitmap,Y
 BNE getsc8 \ branch if not all allocated
 INY
 LDX #8
 LDA bitmap,Y
 BEQ getsc3 \ branch if all allocated

.getsc8

 STX ztemp0
 LDX #0

.getsc9

 INX
 DEC ztemp0 \ sector = sector-1
 ROL A
 BCC getsc9 \ loop until got a free sector
 CLC \ allocate sector by clearing bit

.getscA

 ROR A \ shift bits back again
 DEX
 BNE getscA
 STA bitmap,Y \ update VTOC
 LDX fretrk \ next free track
 LDY ztemp0 \ next free sector
 CLC \ signifies one sector has been allocated
 RTS

.getscB

 SEC \ signifies disc full
 RTS 

.isfull

 \ search VTOC for tsl sector and commander file sector
 JSR rvtoc \ read VTOC
 JSR getsct \ find free sector for tsl
 BCS isful2 \ branch if disc full
 STX tsltrk
 STY tslsct
 JSR getsct \ find free sector for commander file
 STX filtrk
 STY filsct

.isful2

 RTS \ C = 0 = disc full, C = 1 = enough space 

.gettsl

 \ read a file's track sector list
 LDA buffer,Y \ get track of tsl
 STA track
 LDA buffer+1,Y \ get sector of tsl
 STA sector
 JSR rsect \ read tsl
 LDY #&C
 LDA buffer,Y \ get track of first sector of file
 STA track
 LDA buffer+1,Y \ get sector of first sector of file
 STA sector
 RTS 

.rvtoc

 \ read VTOC sector into buffer
 LDA #17
 STA track
 LDA #0
 STA sector

 \REM DOS_RW2 

.rsect

 \ read sector from disc into buffer
 CLC
 BCC wsect2 \ always

.wsect

 \ write sector from buffer to disc
 SEC

.wsect2

 \ drive = 1, track = ?track, sector = ?sector
 PHP
 LDA #&60
 STA slot16
 LDA #2
 STA recals \ init max number of arm recalibrations
 LDA #4
 STA seeks \ init max number of seeks
 LDA #&D8
 STA mtimeh \ init motor on time hi
 LDX slot16 \ get slot number*16 of controller card
 LDA Q7L,X \ prepare latch for input
 LDA Q6L,X \ strobe data latch for I/O
 LDY #8

.rwts2

 LDA Q6L,X \ read data
 PHA \ short delay
 PLA
 PHA
 PLA
 CMP &100
 CMP Q6L,X
 BNE rwts3 \ branch if data latch changed ie. disc is spinning
 DEY
 BNE rwts2

.rwts3

 PHP \ save result - Z = 0 = disc is spinning, Z = 1 = disc not spinning
 LDA mtron,X \ turn motor on - if disc was not spinning
 LDA drv1en,X \ enable drive 1
 PLP
 PHP
 BNE rwts5 \ branch if disc is spinning
 LDY #7

.rwts4

 JSR armwat \ wait for capacitor to discharge
 DEY
 BNE rwts4
 LDX slot16

.rwts5

 LDA track
 JSR seek
 PLP
 BNE trytrk \ branch if disc is spinning
 LDY mtimeh
 BPL trytrk \ branch if motor reached correct speed

.rwts6

 LDY #18 \ delay for motor to reach correct speed

.rwts7

 DEY
 BNE rwts7
 INC mtimel
 BNE rwts6
 INC mtimeh
 BNE rwts6

.trytrk

 PLP \ get read/write status
 PHP
 BCC trytr2 \ branch if read sector
 JSR prenib \ convert sector to 6 bit 'nibbles'

.trytr2

 LDY #48
 STY ztemp2

.trytr3

 LDX slot16
 JSR rdaddr \ find track address
 BCC rdrght \ branch if no error

.trytr4

 DEC ztemp2
 BPL trytr3 \ branch if not last try

.trytr5

 DEC recals
 BEQ drverr \ branch if last try
 LDA #4
 STA seeks
 LDA #&60
 STA curtrk
 LDA #0
 JSR seek \ reset head

.trytr6

 LDA track
 JSR seek \ seek to desired track
 JMP trytr2 

.rdrght

 LDY idfld+2
 CPY track
 BEQ rttrk \ branch if track does match track id
 DEC seeks
 BNE trytr6
 BEQ trytr5 \ always 

.prterr

 \ disc write protected
 LDA #1
 BPL drver2_copy

{
.drverr     \ Removed as it isn't used and clashes with drverr below
}

 \ disc I/O error
 LDA #4 \ I/O error

.drver2

 LDX stkptr
 TXS
 LDX slot16
 LDY mtroff,X \ turn motor off
 SEC \ signify error has occured
 RTS 

.rttrk

 LDY sector
 LDA scttab,Y
 CMP idfld+1
 BNE trytr4 \ branch if sector doesn't match sector id
 PLP
 BCS rttrk2 \ branch if write sector
 JSR read
 PHP
 BCS trytr4 \ branch if read error
 PLP
 JSR pstnib \ convert sector to 8 bit bytes
 JMP rttrk3

.rttrk2

 JSR write
 BCC rttrk3 \ branch if no error
 LDA #1

 BPL drver2

.drverr

 \ disc I/O error
 LDA #4 \ I/O error

\.drver2

.drver2_copy            \ Added as drver2 is repeated

 LDX stkptr
 TXS
 SEC
 BCS rttrk4

.rttrk3

 LDA #0
 CLC

.rttrk4

 LDX slot16
 LDY mtroff,X \ turn motor off
 RTS \ C = 0 = no error, C = 1 = error, A = error code 

.read

 \ read sector
 LDY #32

.read2

 DEY
 BEQ readE

.read3

 LDA Q6L,X
 BPL read3

.read4

 EOR #&D5
 BNE read2
 NOP

.read5

 LDA Q6L,X
 BPL read5
 CMP #&AA
 BNE read4
 LDY #&56

.read6

 LDA Q6L,X
 BPL read6
 CMP #&AD
 BNE read4
 LDA #0

.read7

 DEY
 STY ztemp0

.read8

 LDY Q6L,X
 BPL read8
 EOR rtable-&96,Y
 LDY ztemp0
 STA buffr2+256,Y
 BNE read7

.read9

 STY ztemp0

.readA

 LDY Q6L,X
 BPL readA
 EOR rtable-&96,Y
 LDY ztemp0
 STA buffr2,Y
 INY
 BNE read9

.readB

 LDY Q6L,X
 BPL readB
 CMP rtable-&96,Y
 BNE readE

.readC

 LDA Q6L,X
 BPL readC
 CMP #&DE
 BNE readE
 NOP

.readD

 LDA Q6L,X
 BPL readD
 CMP #&AA
 BEQ readF

.readE

 SEC
 RTS

.readF

 CLC
 RTS

.write

 \ write sector
 SEC
 STX ztemp1
 LDA Q6H,X
 LDA Q7L,X
 BMI write6
 LDA buffr2+256
 STA ztemp0
 LDA #&FF
 STA Q7H,X
 ORA Q6L,X
 PHA
 PLA
 NOP
 LDY #4

.write2

 PHA
 PLA
 JSR wbyte2
 DEY
 BNE write2
 LDA #&D5
 JSR wbyte
 LDA #&AA
 JSR wbyte
 LDA #&AD
 JSR wbyte
 TYA
 LDY #&56
 BNE write4

.write3

 LDA buffr2+256,Y

.write4

 EOR buffr2+255,Y
 TAX
 LDA wtable,X
 LDX ztemp1
 STA Q6H,X
 LDA Q6L,X
 DEY
 BNE write3
 LDA ztemp0
 NOP

.write5

 EOR buffr2,Y
 TAX
 LDA wtable,X
 LDX slot16
 STA Q6H,X
 LDA Q6L,X
 LDA buffr2,Y
 INY
 BNE write5
 TAX
 LDA wtable,X
 LDX ztemp1
 JSR wbyte3
 LDA #&DE
 JSR wbyte
 LDA #&AA
 JSR wbyte
 LDA #&EB
 JSR wbyte
 LDA #&FF
 JSR wbyte
 LDA Q7L,X

.write6

 LDA Q6L,X
 RTS

 \REM DOS_RW3 

.rdaddr

 \ read track address field
 LDY #&FC
 STY ztemp0

.rdadr2

 INY
 BNE rdadr3
 INC ztemp0
 BEQ rdadrD

.rdadr3

 LDA Q6L,X
 BPL rdadr3

.rdadr4

 CMP #&D5
 BNE rdadr2
 NOP

.rdadr5

 LDA Q6L,X
 BPL rdadr5
 CMP #&AA
 BNE rdadr4
 LDY #3

.rdadr6

 LDA Q6L,X
 BPL rdadr6
 CMP #&96
 BNE rdadr4
 LDA #0

.rdadr7

 STA ztemp1

.rdadr8

 LDA Q6L,X
 BPL rdadr8
 ROL A
 STA ztemp0

.rdadr9

 LDA Q6L,X
 BPL rdadr9
 AND ztemp0
 STA idfld,Y
 EOR ztemp1
 DEY
 BPL rdadr7
 TAY
 BNE rdadrD

.rdadrA

 LDA Q6L,X
 BPL rdadrA
 CMP #&DE
 BNE rdadrD
 NOP

.rdadrB

 LDA Q6L,X
 BPL rdadrB
 CMP #&AA
 BNE rdadrD

.rdadrC

 CLC
 RTS

.rdadrD

 SEC
 RTS 

.seek

 \ A = desired track
 STX ztemp0
 ASL A
 CMP curtrk
 BEQ step3 \ branch if head already over desired track
 STA ztemp1 \ save desired track*2
 LDA #0
 STA ztemp2

.seek2

 LDA curtrk
 STA ztemp3
 SEC
 SBC ztemp1
 BEQ seek7 \ branch if reached desired track
 BCS seek3 \ branch if step back
 EOR #&FF
 INC curtrk \ track = track+1
 BCC seek4 \ always

.seek3

 ADC #&FE
 DEC curtrk \ track = track-1

.seek4

 CMP ztemp2
 BCC seek5
 LDA ztemp2

.seek5

 CMP #12
 BCS seek6
 TAY

.seek6

 SEC
 JSR step
 LDA armtab,Y
 JSR armwat
 LDA ztemp3
 CLC
 JSR step2
 LDA armtb2,Y
 JSR armwat
 INC ztemp2
 BNE seek2 \ always

.seek7

 JSR armwat
 CLC 

.step

 \ step drive head
 LDA curtrk

.step2

 AND #3
 ROL A
 ORA ztemp0
 TAX
 LDA phsoff,X \ stepper motor phase 0-3 on/off
 LDX ztemp0

.step3

 RTS 

.armwat

 \ arm move delay
 LDX #17

.armwt2

 DEX
 BNE armwt2
 INC mtimel
 BNE armwt3
 INC mtimeh

.armwt3

 SEC
 SBC #1
 BNE armwat
 RTS 

.armtab

 EQUB 1
 EQUB &30
 EQUB &28
 EQUB &24
 EQUB &20
 EQUB &1E
 EQUB &1D
 EQUB &1C
 EQUB &1C
 EQUB &1C
 EQUB &1C
 EQUB &1C

.armtb2

 EQUB &70
 EQUB &2C
 EQUB &26
 EQUB &22
 EQUB &1F
 EQUB &1E
 EQUB &1D
 EQUB &1C
 EQUB &1C
 EQUB &1C
 EQUB &1C
 EQUB &1C 

.prenib

 \ comverts 256*8 bit bytes to 342*6 bit 'nibbles'
 LDX #0
 LDY #2

.prenb2

 DEY
 LDA buffer,Y
 LSR A
 ROL buffr2+256,X
 LSR A
 ROL buffr2+256,X
 STA buffr2,Y
 INX
 CPX #&56
 BCC prenb2
 LDX #0
 TYA
 BNE prenb2
 LDX #&55

.prenb3

 LDA buffr2+256,X
 AND #&3F
 STA buffr2+256,X
 DEX
 BPL prenb3
 RTS 

.pstnib

 \ convert 342*6 bit 'nibbles' to 256*8 bit bytes
 LDY #0

.pstnb2

 LDX #&56

.pstnb3

 DEX
 BMI pstnb2
 LDA buffr2,Y
 LSR buffr2+256,X
 ROL A
 LSR buffr2+256,X
 ROL A
 STA buffer,Y
 INY
 BNE pstnb3
 RTS 

.wbyte

 \ write one byte to disc
 CLC

.wbyte2

 PHA
 PLA

.wbyte3

 STA Q6H,X
 ORA Q6L,X
 RTS 

.scttab

 EQUD &090B0D00
 EQUD &01030507
 EQUD &080A0C0E
 EQUD &0F020406 

.rtable

 EQUD &99980100
 EQUD &049C0302
 EQUD &A1A00605
 EQUD &A5A4A3A2
 EQUD &A9A80807
 EQUD &0B0A09AA
 EQUD &B1B00D0C
 EQUD &11100F0E
 EQUD &14B81312
 EQUD &18171615
 EQUD &C1C01A19
 EQUD &C5C4C3C2
 EQUD &C9C8C7C6
 EQUD &1CCC1BCA
 EQUD &D1D01E1D
 EQUD &D5D41FD2
 EQUD &22D82120
 EQUD &26252423
 EQUD &E1E02827
 EQUD &29E4E3E2
 EQUD &2CE82B2A
 EQUD &302F2E2D
 EQUD &F1F03231
 EQUD &36353433
 EQUD &39F83837
 EQUD &3D3C3B3A
 EQUW &3F3E 

.MUTILATE

 LDA CHK3
 EOR RAND
 STA RAND
 STA comfil2
 EOR #&A5
 ORA #17
 EOR RAND+1
 STA RAND+1
 STA comfil2+1
 EOR RAND+2
 EOR #&F8
 STA RAND+2
 STA comfil2+2
 EOR RAND+3
 EOR #&12
 STA RAND+3
 STA comfil2+3

.MUTIL3

 LDY #comsiz-5

.MUTIL1

 JSR DORND2
 EOR comfil,Y
 STA comfil,Y
 DEY
 BPL MUTIL1
 RTS

.UNMUTILATE

 LDY #3

.MUTIL2

 LDA comfil2,Y
 STA RAND,Y
 DEY
 BPL MUTIL2
 BMI MUTIL3

\ ******************************************************************************
\
\ Save ELTJ.bin
\
\ ******************************************************************************

 PRINT "ELITE J"
 PRINT "Assembled at ", ~CODE_J%
 PRINT "Ends at ", ~P%
 PRINT "Code size is ", ~(P% - CODE_J%)
 PRINT "Execute at ", ~LOAD%
 PRINT "Reload at ", ~LOAD_J%

 PRINT "S.ELTJ ", ~CODE_J%, " ", ~P%, " ", ~LOAD%, " ", ~LOAD_J%
 SAVE "versions/apple/3-assembled-output/ELTJ.bin", CODE_J%, P%, LOAD%

\ ******************************************************************************
\
\ ELITE K FILE
\
\ Produces the binary file ELTK.bin that gets loaded by elite-bcfs.asm.
\
\ ******************************************************************************

 CODE_K% = P%

 LOAD_K% = LOAD% + P% - CODE%

 OSWRCH = &FFEE
 OSBYTE = &FFF4
 OSWORD = &FFF1
 OSFILE = &FFDD
 SCLI = &FFF7
 VIA = &FE40
 USVIA = VIA
 IRQ1V = &204
 VSCAN = 57
 WRCHV = &20E
 WORDV = &20C
 RDCHV = &210
 protlen = 0
 BULBCOL = &E0

 \  ...................... Scanners  .............................. 

.TWOS

 EQUD &08040201
 EQUW &2010
 EQUB &40

.TWOS2

 EQUD &988C8683
 EQUW &E0B0
 EQUB &C0

.TWFL

 EQUB &83
 EQUB &87
 EQUB &8F
 EQUB &9F
 EQUB &BF
 EQUB &FF
 EQUB &FF

.TWFR

 EQUB &FF
 EQUB &FE
 EQUB &FC
 EQUB &F8
 EQUB &F0
 EQUB &E0
 EQUB &C0

.CTWOS 

.cellocl

 EQUD &82028202
 EQUD &82028202
 EQUD &AA2AAA2A
 EQUD &AA2AAA2A
 EQUD &D252D252
 EQUD &D252D252
 \............. Line Draw .............. 

.SCTBL

 EQUW &8000
 EQUW &8000
 EQUW &8000
 EQUW &8000
 EQUW &A828
 EQUW &A828
 EQUW &A828
 EQUW &A828
 EQUW &D050
 EQUW &D050
 EQUW &D050
 EQUW &D050

.SCTBH

 EQUW &2020
 EQUW &2121
 EQUW &2222
 EQUW &2323
 EQUW &2020
 EQUW &2121
 EQUW &2222
 EQUW &2323
 EQUW &2020
 EQUW &2121
 EQUW &2222
 EQUW &2323
 EQUW &2020
 EQUW &2020
 EQUW &2020
 EQUW &2020   \safety

.SCTBH2

 EQUW &3C3C
 EQUW &3D3D
 EQUW &3E3E
 EQUW &3F3F
 EQUW &3C3C
 EQUW &3D3D
 EQUW &3E3E
 EQUW &3F3F
 EQUW &3C3C
 EQUW &3D3D
 EQUW &3E3E
 EQUW &3F3F
 \ can loose this table by adding &1C00 to SCTBH references
 \.......
 \.grubbyline RTS

.LL30 

.LOIN

 STY YSAV
\LDA Y1
\CMP #Y*2
\BCS grubbyline
\LDA Y2
\CMP #Y*2
\BCS grubbyline
 \**
 LDA #128
 STA S
 ASL A
 STA SWAP
 LDA X2
 SBC X1
 BCS LI1
 EOR #&FF
 ADC #1
 SEC

.LI1

 STA P
 LDA Y2
 SBC Y1
 BCS LI2
 EOR #&FF
 ADC #1

.LI2

 STA Q
 CMP P
 BCC STPX
 JMP STPY

.STPX

 LDX X1
 CPX X2
 BCC LI3
 DEC SWAP
 LDA X2
 STA X1
 STX X2
 TAX
 LDA Y2
 LDY Y1
 STA Y1
 STY Y2

.LI3

 LDA Y1
 LSR A
 LSR A
 LSR A
 STA T1
 TAY
 LDA SCTBL,Y
 STA SC
 LDA Y1
 AND #7
 STA T2
 ASL A
 ASL A
 ADC SCTBH,Y
 STA SC+1 \SC = address of leftmost byte in correct row
 LDY SCTBX1,X
 LDA TWOS,Y
 STA R
 LDY SCTBX2,X
 LDX Q
 BNE LIlog7
 TXA
 BEQ LIlog6

.LIlog7

 LDA logL,X
 LDX P
 SEC
 SBC logL,X
 LDX Q
 LDA log,X
 LDX P
 SBC log,X
 BCC P%+6
 LDA #&FF
 BNE LIlog6
 TAX
 LDA alogh,X

.LIlog6

 STA Q
 SEC
 LDX P
 INX
 LDA Y2
 SBC Y1
 BCS DOWN
 \...
 LDA SWAP
 BNE LI6
 DEX

.LIL2

 LDA R
 EOR (SC),Y
 STA (SC),Y

.LI6

 ASL R
 BPL LI7
 LDA #1
 STA R
 INY

.LI7

 LDA S
 ADC Q
 STA S
 BCC LIC2
 DEC T2
 BMI LI20
 LDA SC+1
 SBC #4
 STA SC+1

.LIC2

 DEX
 BNE LIL2
 LDY YSAV
 RTS

.LI20

 LDA #7
 STA T2
 STX T
 LDX T1
 DEX
 STX T1
 LDA SCTBL,X
 STA SC
 LDA SCTBH2,X
 LDX T
 STA SC+1
 JMP LIC2
 \.....

.DOWN

 LDA T2
 EOR #7
 STA T2
 LDA SWAP
 BEQ LI9
 DEX

.LIL3

 LDA R
 EOR (SC),Y
 STA (SC),Y

.LI9

 ASL R
 BPL LI10
 LDA #1
 STA R
 INY

.LI10

 LDA S
 ADC Q
 STA S
 BCC LIC3
 DEC T2
 BMI LI21
 LDA SC+1
 ADC #3
 STA SC+1

.LIC3

 DEX
 BNE LIL3
 LDY YSAV
 RTS

.LI21

 LDA #7
 STA T2
 STX T
 LDX T1
 INX
 STX T1
 LDA SCTBL,X
 STA SC
 LDA SCTBH,X
 STA SC+1
 LDX T
 JMP LIC3
 \.....

.STPY

 LDY Y1
 TYA
 LDX X1
 CPY Y2
 BCS LI15
 DEC SWAP
 LDA X2
 STA X1
 STX X2
 TAX
 LDA Y2
 STA Y1
 STY Y2
 TAY

.LI15

 LSR A
 LSR A
 LSR A
 STA T1
 TAY
 LDA SCTBL,Y
 STA SC
 LDA Y1
 AND #7
 STA T2
 ASL A
 ASL A
 ADC SCTBH,Y
 STA SC+1
 LDY SCTBX1,X
 LDA TWOS,Y
 STA R
 LDY SCTBX2,X
 LDX P
 BEQ LIfudge
 LDA logL,X
 LDX Q
 SEC
 SBC logL,X
 LDX P
 LDA log,X
 LDX Q
 SBC log,X
 BCC P%+6
 LDA #&FF
 BNE LIlog2
 TAX
 LDA alogh,X

.LIlog2

 STA P

.LIfudge

 SEC
 LDX Q
 INX
 LDA X2
 SBC X1
 BCC LFT
 \....
 CLC
 LDA SWAP
 BEQ LI17
 DEX

.LIL5

 LDA R
 EOR (SC),Y
 STA (SC),Y

.LI17

 DEC T2
 BMI LI22
 LDA SC+1
 SBC #3
 STA SC+1
 CLC

.LI16

 LDA S
 ADC P
 STA S
 BCC LIC5
 ASL R
 BPL LIC5
 LDA #1
 STA R
 INY

.LIC5

 DEX
 BNE LIL5
 LDY YSAV
 RTS

.LI22

 LDA #7
 STA T2
 STX T
 LDX T1
 DEX
 STX T1
 LDA SCTBL,X
 STA SC
 LDA SCTBH2,X
 LDX T
 STA SC+1
 JMP LI16
 \.....

.LFT

 LDA SWAP
 BEQ LI18
 DEX

.LIL6

 LDA R
 EOR (SC),Y
 STA (SC),Y

.LI18

 DEC T2
 BMI LI23
 LDA SC+1
 SBC #3
 STA SC+1
 CLC

.LI19

 LDA S
 ADC P
 STA S
 BCC LIC6
 LSR R
 BCC LIC6
 LDA #64
 STA R
 DEY
 CLC

.LIC6

 DEX
 BNE LIL6
 LDY YSAV

.HL6

 RTS

.LI23

 LDA #7
 STA T2
 STX T
 LDX T1
 DEX
 STX T1
 LDA SCTBL,X
 STA SC
 LDA SCTBH2,X
 LDX T
 STA SC+1
 JMP LI19
 \...................................

.MSBARS

 JSR P%+3
 INC Y1
 \ ............HLOIN.......... 

.HLOIN

 STY YSAV
 LDA X1
 AND #&FE
 STA X1
 TAX
 LDA X2
 AND #&FE
 STA X2
 CMP X1
 BEQ HL6
 BCS HL5
 STX X2
 TAX

.HL5

 LDA Y1
 LSR A
 LSR A
 LSR A
 TAY
 LDA SCTBL,Y
 STA SC
 LDA Y1
 AND #7
 ASL A
 ASL A
 ADC SCTBH,Y
 STA SC+1
 LDA SCTBX2,X
 AND #1
 ORA COL
 TAY
 LDA MASKT,Y
 STA T1
 LDA MASKT+1,Y
 STA T2

.HL1

 LDY X2
 LDA SCTBX2-2,Y
 LDY SCTBX1,X
 SEC
 SBC SCTBX2,X
 STAR \R = no bytes apart
 LDA TWFR,Y
 AND T1
 LDY SCTBX2,X
 LDX R
 BEQ HL3
 STA T4
 LDA (SC),Y
 AND #&7F
 EOR T4
 STA (SC),Y
 INY
 DEX
 BEQ HL4

.HLL1

 LDA (SC),Y
 AND #&7F
 EOR T2
 STA (SC),Y
 INY
 DEX
 BEQ HL8
 LDA (SC),Y
 AND #&7F
 EOR T1
 STA (SC),Y
 INY
 DEX
 BNE HLL1

.HL4

 LDA T2

.HL2

 LDX X2
 LDY SCTBX1-2,X
 CPY #6
 AND TWFL,Y
 LDY SCTBX2-2,X
 STA T4
 LDA (SC),Y
 AND #&7F
 EOR T4
 STA (SC),Y
 BCC HL7
 LDA #&81
 AND T1
 INY
 STA T4
 LDA (SC),Y
 AND #&7F
 EOR T4
 STA (SC),Y

.HL7

 LDY YSAV
 RTS

.HL8

 LDA T1

.HL3

 LDX T2
 STX T1
 JMP HL2
 \.....

.MASKT

 EQUD 0
 EQUD &552A55
 EQUD &2A552A
 EQUD &7F7F7F
 EQUD &D5AAD5
 EQUD &AAD5AA
 EQUD &AAAAAA

.VLOIN

 STY YSAV
 LDA Y1
 CMP Y2
 BCS VLO1
 LDY Y2
 STA Y2
 TYA

.VLO1

 LDX X1
 JSR CPIX
 LDA Y1
 SEC
 SBC Y2
 BEQ VLO5
 TAX
 INX
 JMP VLO4

.VLOL1

 LDA R
 EOR (SC),Y
 STA (SC),Y
 LDA T3
 BEQ VLO4
 INY
 EOR (SC),Y
 STA (SC),Y
 DEY

.VLO4

 DEC T2
 BMI VLO2
 LDA SC+1
 SEC
 SBC #4
 STA SC+1

.VLO3

 DEX
 BNE VLOL1

.VLO5

 LDY YSAV
 RTS

.VLO2

 LDA #7
 STA T2
 STX T
 LDX T1
 DEX
 STX T1
 LDA SCTBL,X
 STA SC
 LDA SCTBH2,X
 LDX T
 STA SC+1
 JMP VLO3
 \.....

.CPIX

 STA Y1
 LSR A
 LSR A
 LSR A
 STA T1
 TAY
 LDA SCTBL,Y
 STA SC
 LDA Y1
 AND #7
 STA T2
 ASL A
 ASL A
 ADC SCTBH,Y
 STA SC+1
 LDY SCTBX1,X
 LDA #0
 CPY #6
 BNE P%+4
 LDA #&81
 STA T3
 LDA TWOS2,Y
 STA R
 LDA SCTBX2,X
 AND #1
 ORA COL
 TAY
 LDA MASKT+1,Y
 AND T3
 STA T3
 LDA MASKT,Y
 AND R
 STA R
 LDY SCTBX2,X
 EOR (SC),Y
 STA (SC),Y
 LDA T3
 BEQ CPR1
 INY
 EOR (SC),Y
 STA (SC),Y
 DEY

.CPR1

 RTS
 \...................

 \...........

.ECBLB2

 LDA #32
 STA ECMA
\LDY #sfxecm
\JSR NOISE \ @@

.ECBLB

 LDA #(ECBT MOD 256)
 LDX #56
 BNE BULB

.SPBLB

 LDA #(SPBT MOD 256)
 LDX #192

.BULB

 STA P
 LDA #(SPBT DIV 256)
 STA P+1
 LDA #22
 STA YC
 JMP letter2

.ECBT

 EQUW &7F7F
 EQUB &07

.SPBT

 EQUD &7F077F7F
 EQUD &7F7F707F

.MSBAR

 TYA
 PHA
 JSR MSBAR2
 PLA
 STA mscol-1,X

.MSBAR2

 LDA mscol-1,X
 BEQ coolkey
 STA COL
 LDA msloc-1,X
 STA X1
 CLC
 ADC #6
 STA X2
 TXA
 PHA
 LDA #184
 STA Y1
 JSR MSBARS
 JSR MSBARS
 PLA
 TAX
 TYA
 LDY #0
 RTS

.msloc

 EQUB &28
 EQUB &20
 EQUB &18
 EQUB &10
 \....

.newosrdch

 JSR &FFFF
 CMP #128
 BCC P%+6

.badkey

 LDA #7
 CLC
 RTS
 CMP #32
 BCS coolkey
 CMP #13
 BEQ coolkey
 CMP #21
 BNE badkey

.coolkey

 CLC
 RTS
 \ADD AX = AP+SR  Should be in ELITEC (?)

 \..........Bay View.......... 

.WSCAN

IF _IB_DISK

 PHA
 TXA
 PHA
 TYA
 PHA
 LDY #&0F
 LDX #0

.LA087

 DEX
 BNE LA087
 DEY
 BNE LA087
 PLA
 TAY
 PLA
 TAX
 PLA

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 BIT &C019
 BPL WSCAN

.WSCL1

 BIT &C019
 BMI WSCL1

ENDIF




 RTS

 \ ............. Character Print ..................... 

.CHPR2

 CMP #123
 BCS whosentthisshit
 CMP #13
 BCC whosentthisshit
 BNE CHPR
 LDA #12
 JSR CHPR
 LDA #13

.whosentthisshit

 CLC
 RTS  \ tape CHPR

.R5

 JSR BEEP
 JMP RR4

.clss

 BIT text
 BPL clss1
 JSR cleartext
 LDA K3
 JMP RRafter

.clss1

 JSR cleargrap
 LDA K3
 JMP RRafter

.RR5

 \text chpr
 BIT UPTOG

IF _IB_DISK

 BMI RR7

ELIF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES OR _SOURCE_DISK_CODE_FILES

 BPL RR7

ENDIF

 CMP #&5B
 BCC RR7
 SBC #&20

.RR7

 ORA #128
 PHA
 LDA cellocl,Y
 STA SC
 TYA
 AND #7
 LSR A
 CLC
 ADC #4
 STA SC+1
 TXA
 TAY
 PLA
 STA (SC),Y
 JMP RR6

\.TT67
.TT67_copy     \ Renamed as there are two TT67s

 LDA #12

.CHPR

 STA K3
 STY YSAV2
 STX XSAV2
 LDY QQ17
 CPY #&FF
 BEQ RR4

.RRafter

 CMP #7
 BEQ R5
 CMP #32
 BCS RR1
 CMP #10
 BEQ RRX1

.RRX2

 LDX #1
 STX XC

.RRX1

 CMP #13
 BEQ RR4
 INC YC
 BNE RR4

.RR1

 LDX XC
 CPX #31
 BCC RRa
 JSR RRX2
 LDX XC \ David@@

.RRa

 LDY YC
 CPY #24
 BCS clss
 BIT text
 BMI RR5
 PHA
 LDA XC
 ASL A
 ASL A
 ASL A
 ADC #13
 SBC XC
 TAX  \7*XC+12
 PLA
 JSR letter

.RR6

 INC XC

.RR4

 LDY YSAV2
 LDX XSAV2
 LDA K3
 CLC
 RTS \must exit CHPR with C = 0
 \.....

.letter

 \plot character A at X,YC*8
 LDY #((FONT DIV 256)-1)
 ASL A
 ASL A
 BCC P%+4
 LDY #((FONT DIV 256)+1)
 ASL A
 BCC RR9
 INY

.RR9

\CLC 
\ADC #(FONT MOD 256)
 STA P
\BCC P%+3
\INY 
 STY P+1

.letter2

 LDY YC
 LDA SCTBL,Y
 STA SC
 LDA SCTBH,Y
 STA SC+1
 LDY SCTBX1,X
 STY P+2
 LDY SCTBX2,X
 STY T1
 LDY #0

.RRL1

 LDA #0
 STA T3
 LDA (P),Y
 LDX P+2

.RRL2

 CMP #128
 ROL T3
 DEX
 BMI RR8
 ASL A
 JMP RRL2

.RR8

 AND #127
 CLC
 STY T2
 LDY T1
 EOR (SC),Y
 STA (SC),Y
 INY
 LDA T3
 EOR (SC),Y
 STA (SC),Y
 LDY T2
 LDA SC+1
 ADC #4
 STA SC+1
 INY
 CPY #8
 BNE RRL1
 RTS
 \
 \.....TTX66K......
 \

.TTX66K

 LDA QQ11
 BEQ wantgrap
 CMP #13
 BEQ wantgrap
 AND #&C0
 BNE wantgrap
 JSR cleartext
 JMP TEXT

.cleartext

 LDY #0
 LDX #4
 STY SC
 STX SC+1
 LDA #160

.cleartextl

 STA (SC),Y
 INY
 BNE cleartextl
 INC SC+1
 DEX
 BNE cleartextl
 RTS
 \...........
 \....

.wantgrap

 JSR cleargrap
 JSR BOX
 JSR HGR
 RTS
 \........

.BOX

 LDX #0
 STX X1
 STX Y1
 DEX
 STX X2
 LDA #BLUE
 STA COL
 JSR HLOIN
 LDA #&AA
 STA SCBASE+1
 LDA #&AA
 STA SCBASE+37
 RTS
 \....
 \.......

.cleargrap

 LDY #16

.cleargl

 JSR clearrow
 DEY
 BPL cleargl
 INY
 STY XC
 STY YC
 RTS
 \....

.ZES1k

 LDY #0
 STY SC

.ZES2k

 LDA #0
 STX SC+1

.ZEL1k

 STA (SC),Y
 DEY
 BNE ZEL1k
 RTS

.ZESNEW

 LDA #0

.ZESNEWL

 STA (SC),Y
 INY
 BNE ZESNEWL
 RTS

IF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES

\.SETXC
\
\STA XC

 RTS  \JMPPUTBACK

ELIF _IB_DISK OR _SOURCE_DISK_CODE_FILES

.SETXC

 STA XC

ENDIF

 RTS  \JMPPUTBACK

IF _SOURCE_DISK_BUILD OR _SOURCE_DISK_ELT_FILES

\.SETYC
\
\STA YC

ELIF _IB_DISK OR _SOURCE_DISK_CODE_FILES

.SETYC

 STA YC

 RTS  \JMPPUTBACK

ENDIF

.mvblockK

 LDY #0

.mvbllop

 LDA (V),Y
 STA (SC),Y
 DEY
 BNE mvbllop
 INC V+1
 INC SC+1
 DEX
 BNE mvbllop
 RTS  \remember ELITEK has different SC!  (NO LONGER) 

.CLYNS

 LDA #0
 STA DLY
 STA de

.CLYNS2

 JSR CLYS1 \ @@
 LDA #&FF
 STA DTW2
 LDA #128
 STA QQ17
 LDA text
 BPL CLY1
 LDA #32
 LDX #64

.CLYL1

 JSR CHPR
 DEX
 BNE CLYL1

.CLYS1

 LDA #21
 STA YC
 LDA #1
 STA XC
 RTS
 \...

.CLY1

 LDY #15
 STY YC
 LDA #1
 STA XC
 JSR clearrow
 INY

.clearrow

 LDA #8
 STA T2
 LDX SCTBL,Y
 STX SC
 LDX SCTBH,Y
 TYA
 PHA

.cleargl2

 STX SC+1
 LDA #&A0
 LDY #37

.cleargl3

 STA (SC),Y
 LDA #0
 DEY
 BNE cleargl3
 LDA #&C0
 STA (SC),Y
 INY
 ASL A
 STA (SC),Y
 INX
 INX
 INX
 INX
 DEC T2
 BNE cleargl2
 PLA
 TAY

.SCR1

 RTS
 \................

.SCAN

\LDA QQ11
\BNE SCR1
 LDA INWK+31
 AND #16
 BEQ SCR1
 LDX TYPE
 BMI SCR1
 LDA scacol,X
 STA COL
 LDA INWK+1
 ORA INWK+4
 ORA INWK+7
 AND #&C0
 BNE SCR1
 LDA INWK+1
 CLC
 LDX INWK+2
 BPL SC2
 EOR #&FF
 ADC #1
 CLC

.SC2

 ADC #125
 AND #&FE
 STA X1
 TAX
 DEX
 DEX
 LDA INWK+7
 LSR A
 LSR A
 CLC
 LDY INWK+8
 BPL SC3
 EOR #&FF
 SEC

.SC3

 ADC #91 \83
 EOR #&FF
 STA Y2
 LDA INWK+4
 LSR A
 CLC
 LDY INWK+5
 BMI SCD6
 EOR #&FF
 SEC

.SCD6

 ADC Y2
\BPL ld246
 CMP #146 \194
 BCS P%+4
 LDA #146
 CMP #191 \199
 BCC P%+4

.ld246

 LDA #190 \198
 JSR CPIX
 JMP VLOIN
 \.......

.HGR

 LDA &C054
 LDA &C052
 LDA &C057
 LDA &C050
 LSR text
 RTS

.TEXT

 LDA &C054
 LDA &C051
 SEC
 ROR text
 RTS

.F%

IF _IB_DISK

 EQUB &83, &6F, &63, &6F, &75

ENDIF

\ D% = &A300 = XX21 - ships go here

\ ******************************************************************************
\
\ Save ELTK.bin
\
\ ******************************************************************************

 PRINT "ELITE K"
 PRINT "Assembled at ", ~CODE_K%
 PRINT "Ends at ", ~P%
 PRINT "Code size is ", ~(P% - CODE_K%)
 PRINT "Execute at ", ~LOAD%
 PRINT "Reload at ", ~LOAD_K%

 PRINT "S.ELTK ", ~CODE_K%, " ", ~P%, " ", ~LOAD%, " ", ~LOAD_J%
 SAVE "versions/apple/3-assembled-output/ELTK.bin", CODE_K%, P%, LOAD%

IF F%>D%
  ERROR "Code too long."
ENDIF

\ Flag knowledge of F%

 PRINT ~CODE%, F%, S%, K%, " (Free: ", D%-F%, ")  ZP: ", ~ZP
 PRINT " ZP: ", ~ZP, ", WP: ", ~WP, ", UP: ", ~UP

 PRINT "Addresses for the scramble routines in elite-checksum.py"
 PRINT "B% = ", ~CODE%
 PRINT "G% = ", ~G%
 PRINT "NA2% = ", ~NA2%

\ ******************************************************************************
\
\ ELITE SHIP BLUEPRINTS FILE
\
\ Produces the binary file SHIPS.bin that gets loaded by elite-bcfs.asm.
\
\ ******************************************************************************

 CODE_SHIPS% = D%

 LOAD_SHIPS% = LOAD% + D% - CODE%

 ORG D%

INCLUDE "library/common/main/variable/xx21.asm"
INCLUDE "library/advanced/main/variable/e_per_cent.asm"
INCLUDE "library/master/data/variable/kwl_per_cent.asm"
INCLUDE "library/master/data/variable/kwh_per_cent.asm"
INCLUDE "library/common/main/macro/vertex.asm"
INCLUDE "library/common/main/macro/edge.asm"
INCLUDE "library/common/main/macro/face.asm"
INCLUDE "library/common/main/variable/ship_missile.asm"
INCLUDE "library/common/main/variable/ship_coriolis.asm"
INCLUDE "library/common/main/variable/ship_escape_pod.asm"
INCLUDE "library/enhanced/main/variable/ship_plate.asm"
INCLUDE "library/common/main/variable/ship_canister.asm"
INCLUDE "library/enhanced/main/variable/ship_boulder.asm"
INCLUDE "library/common/main/variable/ship_asteroid.asm"
INCLUDE "library/enhanced/main/variable/ship_splinter.asm"
INCLUDE "library/enhanced/main/variable/ship_shuttle.asm"
INCLUDE "library/enhanced/main/variable/ship_transporter.asm"
INCLUDE "library/common/main/variable/ship_cobra_mk_3.asm"
INCLUDE "library/common/main/variable/ship_python.asm"
INCLUDE "library/enhanced/main/variable/ship_boa.asm"
INCLUDE "library/enhanced/main/variable/ship_anaconda.asm"
INCLUDE "library/advanced/main/variable/ship_rock_hermit.asm"
INCLUDE "library/common/main/variable/ship_viper.asm"
INCLUDE "library/common/main/variable/ship_sidewinder.asm"
INCLUDE "library/common/main/variable/ship_mamba.asm"
INCLUDE "library/enhanced/main/variable/ship_krait.asm"
INCLUDE "library/enhanced/main/variable/ship_adder.asm"
INCLUDE "library/enhanced/main/variable/ship_gecko.asm"
INCLUDE "library/enhanced/main/variable/ship_cobra_mk_1.asm"
INCLUDE "library/enhanced/main/variable/ship_worm.asm"
INCLUDE "library/enhanced/main/variable/ship_cobra_mk_3_p.asm"
INCLUDE "library/enhanced/main/variable/ship_asp_mk_2.asm"

 EQUB &E7, &33          \ These bytes appear to be unused
 EQUB &53, &08

INCLUDE "library/enhanced/main/variable/ship_python_p.asm"
INCLUDE "library/enhanced/main/variable/ship_fer_de_lance.asm"
INCLUDE "library/enhanced/main/variable/ship_moray.asm"
INCLUDE "library/common/main/variable/ship_thargoid.asm"
INCLUDE "library/common/main/variable/ship_thargon.asm"
INCLUDE "library/enhanced/main/variable/ship_constrictor.asm"
INCLUDE "library/enhanced/main/variable/ship_dodo.asm"

 EQUB &08, &08          \ These bytes appear to be unused
 EQUB &03, &FE

\ ******************************************************************************
\
\ Save SHIPS.bin
\
\ ******************************************************************************

 PRINT "SHIPS"
 PRINT "Assembled at ", ~CODE_SHIPS%
 PRINT "Ends at ", ~P%
 PRINT "Code size is ", ~(P% - CODE_SHIPS%)
 PRINT "Execute at ", ~LOAD%
 PRINT "Reload at ", ~LOAD_SHIPS%

 PRINT "S.SHIPS ", ~CODE_SHIPS%, " ", ~P%, " ", ~LOAD%, " ", ~LOAD_SHIPS%
 SAVE "versions/apple/3-assembled-output/SHIPS.bin", CODE_SHIPS%, P%, LOAD%
